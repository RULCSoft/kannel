#! /bin/sh /usr/share/dpatch/dpatch-run
## 16_kannel_list.dpatch by  <paul@dwerryhouse.com.au>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Kannel namespace patch

@DPATCH@

diff -ur kannel-1.4.0/checks/check_list.c kannel-1.4.0.mod/checks/check_list.c
--- kannel-1.4.0/checks/check_list.c	2004-01-22 15:08:24.000000000 +0100
+++ kannel-1.4.0.mod/checks/check_list.c	2006-03-24 16:50:55.000000000 +0100
@@ -106,8 +106,8 @@
 	id = gwthread_self();
 	index = info->start_index;
 	for (i = 0; i < NUM_ITEMS_PER_PRODUCER; ++i, ++index)
-		list_produce(info->list, new_item(id, i, index));
-	list_remove_producer(info->list);
+		gwlist_produce(info->list, new_item(id, i, index));
+	gwlist_remove_producer(info->list);
 }
 
 static void consumer(void *arg) {
@@ -116,7 +116,7 @@
 	
 	list = arg;
 	for (;;) {
-		item = list_consume(list);
+		item = gwlist_consume(list);
 		if (item == NULL)
 			break;
 		received[item->index] = 1;
@@ -138,13 +138,13 @@
 	long p, n, index;
 	int errors;
 	
-	list = list_create();
+	list = gwlist_create();
 	init_received();
 	
 	for (i = 0; i < NUM_PRODUCERS; ++i) {
 	    	tab[i].list = list;
 		tab[i].start_index = i * NUM_ITEMS_PER_PRODUCER;
-	    	list_add_producer(list);
+	    	gwlist_add_producer(list);
 		tab[i].id = gwthread_create(producer, tab + i);
 	}
 	for (i = 0; i < NUM_CONSUMERS; ++i)
@@ -153,9 +153,9 @@
     	gwthread_join_every(producer);
     	gwthread_join_every(consumer);
 
-	while (list_len(list) > 0) {
-		item = list_get(list, 0);
-		list_delete(list, 0, 1);
+	while (gwlist_len(list) > 0) {
+		item = gwlist_get(list, 0);
+		gwlist_delete(list, 0, 1);
 		warning(0, "main: %ld %ld %ld", (long) item->producer, 
 				item->num, item->index);
 	}
@@ -198,25 +198,25 @@
 	char *p;
 	List *list;
 
-	list = list_create();
+	list = gwlist_create();
 	
 	for (j = 0; j < num_repeats; ++j)
 		for (i = 0; i < num_items; ++i)
-			list_append(list, items[i]);
-	list_delete_matching(list, items[0], compare_cstr);
-	for (i = 0; i < list_len(list); ++i) {
-		p = list_get(list, i);
+			gwlist_append(list, items[i]);
+	gwlist_delete_matching(list, items[0], compare_cstr);
+	for (i = 0; i < gwlist_len(list); ++i) {
+		p = gwlist_get(list, i);
 		if (strcmp(p, items[0]) == 0)
 			panic(0, "list contains `%s' after deleting it!",
 				items[0]);
 	}
 	
 	for (i = 0; i < num_items; ++i)
-		list_delete_equal(list, items[i]);
-	if (list_len(list) != 0)
+		gwlist_delete_equal(list, items[i]);
+	if (gwlist_len(list) != 0)
 		panic(0, "list is not empty after deleting everything");
 	
-	list_destroy(list, NULL);
+	gwlist_destroy(list, NULL);
 }
 
 
@@ -232,37 +232,37 @@
 	char *p;
 	List *list, *extracted;
 
-	list = list_create();
+	list = gwlist_create();
 	
 	for (j = 0; j < num_repeats; ++j)
 		for (i = 0; i < num_items; ++i)
-			list_append(list, items[i]);
+			gwlist_append(list, items[i]);
 
 	for (j = 0; j < num_items; ++j) {
-		extracted = list_extract_matching(list, items[j], 
+		extracted = gwlist_extract_matching(list, items[j], 
 					compare_cstr);
 		if (extracted == NULL)
 			panic(0, "no extracted elements, should have!");
-		for (i = 0; i < list_len(list); ++i) {
-			p = list_get(list, i);
+		for (i = 0; i < gwlist_len(list); ++i) {
+			p = gwlist_get(list, i);
 			if (strcmp(p, items[j]) == 0)
 				panic(0, "list contains `%s' after "
 				         "extracting it!",
 					items[j]);
 		}
-		for (i = 0; i < list_len(extracted); ++i) {
-			p = list_get(extracted, i);
+		for (i = 0; i < gwlist_len(extracted); ++i) {
+			p = gwlist_get(extracted, i);
 			if (strcmp(p, items[j]) != 0)
 				panic(0, 
 				  "extraction returned wrong element!");
 		}
-		list_destroy(extracted, NULL);
+		gwlist_destroy(extracted, NULL);
 	}
 	
-	if (list_len(list) != 0)
+	if (gwlist_len(list) != 0)
 		panic(0, "list is not empty after extracting everything");
 	
-	list_destroy(list, NULL);
+	gwlist_destroy(list, NULL);
 }
 
 
diff -ur kannel-1.4.0/gw/bb_alog.c kannel-1.4.0.mod/gw/bb_alog.c
--- kannel-1.4.0/gw/bb_alog.c	2004-08-11 18:41:29.000000000 +0200
+++ kannel-1.4.0.mod/gw/bb_alog.c	2006-03-24 16:50:55.000000000 +0100
@@ -129,9 +129,9 @@
 
     if (octstr_len(text)) {
         word_list = octstr_split_words(text);
-        num_words = list_len(word_list);
+        num_words = gwlist_len(word_list);
     } else {
-    	word_list = list_create();
+    	word_list = gwlist_create();
         num_words = 0;
     }
 
@@ -154,20 +154,20 @@
 	case 'k':
 	    if (num_words <= 0)
                 break;
-	    octstr_append(result, list_get(word_list, 0));
+	    octstr_append(result, gwlist_get(word_list, 0));
 	    break;
 
 	case 's':
 	    if (nextarg >= num_words)
                 break;
-	    octstr_append(result, list_get(word_list, nextarg));
+	    octstr_append(result, gwlist_get(word_list, nextarg));
 	    ++nextarg;
 	    break;
 
 	case 'S':
 	    if (nextarg >= num_words)
                 break;
-	    temp = list_get(word_list, nextarg);
+	    temp = gwlist_get(word_list, nextarg);
 	    for (i = 0; i < octstr_len(temp); ++i) {
 		if (octstr_get_char(temp, i) == '*')
 		    octstr_append_char(result, '~');
@@ -181,7 +181,7 @@
 	    for (j = nextarg; j < num_words; ++j) {
 		if (j != nextarg)
 		    octstr_append_char(result, '+');
-		octstr_append(result, list_get(word_list, j));
+		octstr_append(result, gwlist_get(word_list, j));
 	    }
 	    break;
     
@@ -204,7 +204,7 @@
 	    for (j = 0; j < num_words; ++j) {
                 if (j > 0)
                     octstr_append_char(result, ' ');
-                octstr_append(result, list_get(word_list, j));
+                octstr_append(result, gwlist_get(word_list, j));
             }
             break;
 
@@ -312,7 +312,7 @@
         pattern++;
     } /* for ... */
 
-    list_destroy(word_list, octstr_destroy_item);
+    gwlist_destroy(word_list, octstr_destroy_item);
 
     return result;
 }
diff -ur kannel-1.4.0/gw/bb_boxc.c kannel-1.4.0.mod/gw/bb_boxc.c
--- kannel-1.4.0/gw/bb_boxc.c	2004-08-11 18:41:29.000000000 +0200
+++ kannel-1.4.0.mod/gw/bb_boxc.c	2006-03-24 16:50:55.000000000 +0100
@@ -263,7 +263,7 @@
     /* remove messages from socket until it is closed */
     while (bb_status != BB_DEAD && conn->alive) {
 
-        list_consume(suspended);	/* block here if suspended */
+        gwlist_consume(suspended);	/* block here if suspended */
 
         msg = read_from_box(conn);
 
@@ -300,7 +300,7 @@
 
             /* XXX we should block these in SHUTDOWN phase too, but
                we need ack/nack msgs implemented first. */
-            list_produce(conn->outgoing, msg);
+            gwlist_produce(conn->outgoing, msg);
 
         } else if (msg_type(msg) == sms  && conn->is_wap) {
             debug("bb.boxc", 0, "boxc_receiver: got sms from wapbox");
@@ -440,19 +440,19 @@
     Msg *msg;
     Boxc *conn = arg;
 
-    list_add_producer(flow_threads);
+    gwlist_add_producer(flow_threads);
 
     while (bb_status != BB_DEAD && conn->alive) {
 
         /*
          * Make sure there's no data left in the outgoing connection before
-         * doing the potentially blocking list_consume()s
+         * doing the potentially blocking gwlist_consume()s
          */
         conn_flush(conn->conn);
 
-        list_consume(suspended);	/* block here if suspended */
+        gwlist_consume(suspended);	/* block here if suspended */
 
-        if ((msg = list_consume(conn->incoming)) == NULL) {
+        if ((msg = gwlist_consume(conn->incoming)) == NULL) {
             /* tell sms/wapbox to die */
             msg = msg_create(admin);
             msg->admin.command = restart ? cmd_restart : cmd_shutdown;
@@ -469,7 +469,7 @@
         if (!conn->alive || send_msg(conn, msg) == -1) {
             /* we got message here */
             boxc_sent_pop(conn, msg);
-            list_produce(conn->retry, msg);
+            gwlist_produce(conn->retry, msg);
             break;
         }
         msg_destroy(msg);
@@ -482,7 +482,7 @@
     /* set conn to unroutable */
     conn->routable = 0;
 
-    list_remove_producer(flow_threads);
+    gwlist_remove_producer(flow_threads);
 }
 
 /*---------------------------------------------------------------
@@ -580,15 +580,15 @@
     List *keys;
     Octstr *key;
 
-    list_add_producer(flow_threads);
+    gwlist_add_producer(flow_threads);
     fd = (int)arg;
     newconn = accept_boxc(fd, smsbox_port_ssl);
     if (newconn == NULL) {
-	    list_remove_producer(flow_threads);
+	    gwlist_remove_producer(flow_threads);
 	    return;
     }
-    newconn->incoming = list_create();
-    list_add_producer(newconn->incoming);
+    newconn->incoming = gwlist_create();
+    gwlist_add_producer(newconn->incoming);
     newconn->retry = incoming_sms;
     newconn->outgoing = outgoing_sms;
     newconn->sent = dict_create(smsbox_max_pending, NULL);
@@ -607,16 +607,16 @@
      * registration we will forward some messages to smsbox).
      */
     gw_rwlock_wrlock(smsbox_list_rwlock);
-    list_append(smsbox_list, newconn);
+    gwlist_append(smsbox_list, newconn);
     gw_rwlock_unlock(smsbox_list_rwlock);
 
-    list_add_producer(newconn->outgoing);
+    gwlist_add_producer(newconn->outgoing);
     boxc_receiver(newconn);
-    list_remove_producer(newconn->outgoing);
+    gwlist_remove_producer(newconn->outgoing);
 
     /* remove us from smsbox routing list */
     gw_rwlock_wrlock(smsbox_list_rwlock);
-    list_delete_equal(smsbox_list, newconn);
+    gwlist_delete_equal(smsbox_list, newconn);
     if (newconn->boxc_id) {
         dict_remove(smsbox_by_id, newconn->boxc_id);
     }
@@ -626,8 +626,8 @@
      * check if we in the shutdown phase and sms dequeueing thread
      *   has removed the producer already
      */
-    if (list_producer_count(newconn->incoming) > 0)
-        list_remove_producer(newconn->incoming);
+    if (gwlist_producer_count(newconn->incoming) > 0)
+        gwlist_remove_producer(newconn->incoming);
 
     /* check if we are still waiting for ack's and semaphore locked */
     if (dict_key_count(newconn->sent) >= smsbox_max_pending)
@@ -637,22 +637,22 @@
 
     /* put not acked msgs into incoming queue */    
     keys = dict_keys(newconn->sent);
-    while((key = list_extract_first(keys)) != NULL) {
+    while((key = gwlist_extract_first(keys)) != NULL) {
         msg = dict_remove(newconn->sent, key);
-        list_produce(incoming_sms, msg);
+        gwlist_produce(incoming_sms, msg);
         octstr_destroy(key);
     }
-    gw_assert(list_len(keys) == 0);
-    list_destroy(keys, octstr_destroy_item);
+    gw_assert(gwlist_len(keys) == 0);
+    gwlist_destroy(keys, octstr_destroy_item);
 
     /* clear our send queue */
-    while((msg = list_extract_first(newconn->incoming)) != NULL) {
-        list_produce(incoming_sms, msg);
+    while((msg = gwlist_extract_first(newconn->incoming)) != NULL) {
+        gwlist_produce(incoming_sms, msg);
     }
 
 cleanup:
-    gw_assert(list_len(newconn->incoming) == 0);
-    list_destroy(newconn->incoming, NULL);
+    gw_assert(gwlist_len(newconn->incoming) == 0);
+    gwlist_destroy(newconn->incoming, NULL);
     gw_assert(dict_key_count(newconn->sent) == 0);
     dict_destroy(newconn->sent);
     semaphore_destroy(newconn->pending);
@@ -661,7 +661,7 @@
     /* wakeup the dequeueing thread */
     gwthread_wakeup(sms_dequeue_thread);
 
-    list_remove_producer(flow_threads);
+    gwlist_remove_producer(flow_threads);
 }
 
 
@@ -673,11 +673,11 @@
     List *newlist;
     long sender;
 
-    list_add_producer(flow_threads);
+    gwlist_add_producer(flow_threads);
     fd = (int)arg;
     newconn = accept_boxc(fd, wapbox_port_ssl);
     if (newconn == NULL) {
-	    list_remove_producer(flow_threads);
+	    gwlist_remove_producer(flow_threads);
 	    return;
     }
     newconn->is_wap = 1;
@@ -690,8 +690,8 @@
 
     debug("bb", 0, "setting up systems for new wapbox");
     
-    newlist = list_create();
-    list_add_producer(newlist);  /* this is released by the 
+    newlist = gwlist_create();
+    gwlist_add_producer(newlist);  /* this is released by the 
     	    	    	    	    sender/receiver if it exits */
     
     newconn->incoming = newlist;
@@ -704,30 +704,30 @@
 	          octstr_get_cstr(newconn->client_ip));
 	    goto cleanup;
     }
-    list_append(wapbox_list, newconn);
-    list_add_producer(newconn->outgoing);
+    gwlist_append(wapbox_list, newconn);
+    gwlist_add_producer(newconn->outgoing);
     boxc_receiver(newconn);
 
     /* cleanup after receiver has exited */
     
-    list_remove_producer(newconn->outgoing);
-    list_lock(wapbox_list);
-    list_delete_equal(wapbox_list, newconn);
-    list_unlock(wapbox_list);
+    gwlist_remove_producer(newconn->outgoing);
+    gwlist_lock(wapbox_list);
+    gwlist_delete_equal(wapbox_list, newconn);
+    gwlist_unlock(wapbox_list);
 
-    while (list_producer_count(newlist) > 0)
-	    list_remove_producer(newlist);
+    while (gwlist_producer_count(newlist) > 0)
+	    gwlist_remove_producer(newlist);
 
     newconn->alive = 0;
     
     gwthread_join(sender);
 
 cleanup:
-    gw_assert(list_len(newlist) == 0);
-    list_destroy(newlist, NULL);
+    gw_assert(gwlist_len(newlist) == 0);
+    gwlist_destroy(newlist, NULL);
     boxc_destroy(newconn);
 
-    list_remove_producer(flow_threads);
+    gwlist_remove_producer(flow_threads);
 }
 
 
@@ -774,34 +774,34 @@
     Boxc *conn, *best;
     int i, b, len;
     
-    ap = list_search(route_info, msg, cmp_route);
+    ap = gwlist_search(route_info, msg, cmp_route);
     if (ap == NULL) {
 	    debug("bb.boxc", 0, "Did not find previous routing info for WDP, "
 	    	  "generating new");
 route:
 
-	    if (list_len(wapbox_list) == 0)
+	    if (gwlist_len(wapbox_list) == 0)
 	        return NULL;
 
-	    list_lock(wapbox_list);
+	    gwlist_lock(wapbox_list);
 
 	/* take random wapbox from list, and then check all wapboxes
 	 * and select the one with lowest load level - if tied, the first
 	 * one
 	 */
-	    len = list_len(wapbox_list);
+	    len = gwlist_len(wapbox_list);
 	    b = gw_rand() % len;
-	    best = list_get(wapbox_list, b);
+	    best = gwlist_get(wapbox_list, b);
 
-	    for(i = 0; i < list_len(wapbox_list); i++) {
-	        conn = list_get(wapbox_list, (i+b) % len);
+	    for(i = 0; i < gwlist_len(wapbox_list); i++) {
+	        conn = gwlist_get(wapbox_list, (i+b) % len);
 	        if (conn != NULL && best != NULL)
 		        if (conn->load < best->load)
 		            best = conn;
 	    }
 	    if (best == NULL) {
 	        warning(0, "wapbox_list empty!");
-	        list_unlock(wapbox_list);
+	        gwlist_unlock(wapbox_list);
 	        return NULL;
 	    }
 	    conn = best;
@@ -811,11 +811,11 @@
 	    ap->address = octstr_duplicate(msg->wdp_datagram.source_address);
 	    ap->port = msg->wdp_datagram.source_port;
 	    ap->wapboxid = conn->id;
-	    list_produce(route_info, ap);
+	    gwlist_produce(route_info, ap);
 
-	    list_unlock(wapbox_list);
+	    gwlist_unlock(wapbox_list);
     } else
-	    conn = list_search(wapbox_list, ap, cmp_boxc);
+	    conn = gwlist_search(wapbox_list, ap, cmp_boxc);
 
     if (conn == NULL) {
 	/* routing failed; wapbox has disappeared!
@@ -823,7 +823,7 @@
 
 	    debug("bb.boxc", 0, "Old wapbox has disappeared, re-routing");
 
-	    list_delete_equal(route_info, ap);
+	    gwlist_delete_equal(route_info, ap);
 	    ap_destroy(ap);
 	    goto route;
     }
@@ -843,17 +843,17 @@
     Msg *msg;
     int i;
 
-    list_add_producer(flow_threads);
-    list_add_producer(wapbox_list);
+    gwlist_add_producer(flow_threads);
+    gwlist_add_producer(wapbox_list);
 
-    route_info = list_create();
+    route_info = gwlist_create();
 
     
     while(bb_status != BB_DEAD) {
 
-	    list_consume(suspended);	/* block here if suspended */
+	    gwlist_consume(suspended);	/* block here if suspended */
 
-	    if ((msg = list_consume(incoming_wdp)) == NULL)
+	    if ((msg = gwlist_consume(incoming_wdp)) == NULL)
 	         break;
 
 	    gw_assert(msg_type(msg) == wdp_datagram);
@@ -864,25 +864,25 @@
 	        msg_destroy(msg);
 	        continue;
 	    }
-	    list_produce(conn->incoming, msg);
+	    gwlist_produce(conn->incoming, msg);
     }
     debug("bb", 0, "wdp_to_wapboxes: destroying lists");
-    while((ap = list_extract_first(route_info)) != NULL)
+    while((ap = gwlist_extract_first(route_info)) != NULL)
 	ap_destroy(ap);
 
-    gw_assert(list_len(route_info) == 0);
-    list_destroy(route_info, NULL);
+    gw_assert(gwlist_len(route_info) == 0);
+    gwlist_destroy(route_info, NULL);
 
-    list_lock(wapbox_list);
-    for(i=0; i < list_len(wapbox_list); i++) {
-	    conn = list_get(wapbox_list, i);
-	    list_remove_producer(conn->incoming);
+    gwlist_lock(wapbox_list);
+    for(i=0; i < gwlist_len(wapbox_list); i++) {
+	    conn = gwlist_get(wapbox_list, i);
+	    gwlist_remove_producer(conn->incoming);
 	    conn->alive = 0;
     }
-    list_unlock(wapbox_list);
+    gwlist_unlock(wapbox_list);
 
-    list_remove_producer(wapbox_list);
-    list_remove_producer(flow_threads);
+    gwlist_remove_producer(wapbox_list);
+    gwlist_remove_producer(flow_threads);
 }
 
 
@@ -903,7 +903,7 @@
          *           Otherwise we wait here for ever!
 	 */
 	    if (bb_status == BB_SHUTDOWN) {
-	        ret = list_wait_until_nonempty(waited);
+	        ret = gwlist_wait_until_nonempty(waited);
 	        if (ret == -1 || !timeout)
                     break;
                 else
@@ -911,7 +911,7 @@
 	    }
 
             /* block here if suspended */
-            list_consume(suspended);
+            gwlist_consume(suspended);
 
             ret = gwthread_pollfd(fd, POLLIN, 1.0);
 	    if (ret > 0) {
@@ -932,7 +932,7 @@
     int fd;
     int port;
 
-    list_add_producer(flow_threads);
+    gwlist_add_producer(flow_threads);
     gwthread_wakeup(MAIN_THREAD_ID);
     port = (int)arg;
     
@@ -951,16 +951,16 @@
 
     wait_for_connections(fd, run_smsbox, incoming_sms);
 
-    list_remove_producer(smsbox_list);
+    gwlist_remove_producer(smsbox_list);
 
     /* continue avalanche */
-    list_remove_producer(outgoing_sms);
+    gwlist_remove_producer(outgoing_sms);
 
     /* all connections do the same, so that all must remove() before it
      * is completely over
      */
 
-    while(list_wait_until_nonempty(smsbox_list) == 1)
+    while(gwlist_wait_until_nonempty(smsbox_list) == 1)
         gwthread_sleep(1.0);
 
     /* close listen socket */
@@ -969,7 +969,7 @@
     gwthread_wakeup(sms_dequeue_thread);
     gwthread_join(sms_dequeue_thread);
 
-    list_destroy(smsbox_list, NULL);
+    gwlist_destroy(smsbox_list, NULL);
     smsbox_list = NULL;
     gw_rwlock_destroy(smsbox_list_rwlock);
     smsbox_list_rwlock = NULL;
@@ -982,7 +982,7 @@
     dict_destroy(smsbox_by_receiver);
     smsbox_by_receiver = NULL;
     
-    list_remove_producer(flow_threads);
+    gwlist_remove_producer(flow_threads);
 }
 
 
@@ -990,7 +990,7 @@
 {
     int fd, port;
 
-    list_add_producer(flow_threads);
+    gwlist_add_producer(flow_threads);
     gwthread_wakeup(MAIN_THREAD_ID);
     port = (int)arg;
     
@@ -1005,26 +1005,26 @@
 
     /* continue avalanche */
 
-    list_remove_producer(outgoing_wdp);
+    gwlist_remove_producer(outgoing_wdp);
 
 
     /* wait for all connections to die and then remove list
      */
     
-    while(list_wait_until_nonempty(wapbox_list) == 1)
+    while(gwlist_wait_until_nonempty(wapbox_list) == 1)
         gwthread_sleep(1.0);
 
     /* wait for wdp_to_wapboxes to exit */
-    while(list_consume(wapbox_list)!=NULL)
+    while(gwlist_consume(wapbox_list)!=NULL)
 	;
     
     /* close listen socket */
     close(fd);   
  
-    list_destroy(wapbox_list, NULL);
+    gwlist_destroy(wapbox_list, NULL);
     wapbox_list = NULL;
     
-    list_remove_producer(flow_threads);
+    gwlist_remove_producer(flow_threads);
 }
 
 
@@ -1043,7 +1043,7 @@
     list = cfg_get_multi_group(cfg, octstr_imm("smsbox-route")); 
  
     /* loop multi-group "smsbox-route" */
-    while (list && (grp = list_extract_first(list)) != NULL) { 
+    while (list && (grp = gwlist_extract_first(list)) != NULL) { 
          
         if ((boxc_id = cfg_get(grp, octstr_imm("smsbox-id"))) == NULL) { 
             grp_dump(grp); 
@@ -1062,8 +1062,8 @@
         /* now parse the smsc-ids and shortcuts semicolon separated list */
         if (smsc_ids) {
             items = octstr_split(smsc_ids, octstr_imm(";"));
-            for (i = 0; i < list_len(items); i++) {
-                Octstr *item = list_get(items, i);
+            for (i = 0; i < gwlist_len(items); i++) {
+                Octstr *item = gwlist_get(items, i);
                 octstr_strip_blanks(item);
 
                 debug("bb.boxc",0,"Adding smsbox routing to id <%s> for smsc id <%s>",
@@ -1073,14 +1073,14 @@
                     panic(0, "Routing for smsc-id <%s> already exists!",
                           octstr_get_cstr(item));
             }
-            list_destroy(items, octstr_destroy_item);
+            gwlist_destroy(items, octstr_destroy_item);
             octstr_destroy(smsc_ids);
         }
 
         if (shortcuts) {
             items = octstr_split(shortcuts, octstr_imm(";"));
-            for (i = 0; i < list_len(items); i++) {
-                Octstr *item = list_get(items, i);
+            for (i = 0; i < gwlist_len(items); i++) {
+                Octstr *item = gwlist_get(items, i);
                 octstr_strip_blanks(item);
 
                 debug("bb.boxc",0,"Adding smsbox routing to id <%s> for receiver no <%s>",
@@ -1090,13 +1090,13 @@
                     panic(0, "Routing for receiver no <%s> already exists!",
                           octstr_get_cstr(item));
             }
-            list_destroy(items, octstr_destroy_item);
+            gwlist_destroy(items, octstr_destroy_item);
             octstr_destroy(shortcuts);
         }
         octstr_destroy(boxc_id);
     }
 
-    list_destroy(list, NULL);
+    gwlist_destroy(list, NULL);
 }
 
 
@@ -1131,7 +1131,7 @@
         info(0, "BOXC: 'smsbox-max-pending' not set, using default (%ld).", smsbox_max_pending);
     }
     
-    smsbox_list = list_create();	/* have a list of connections */
+    smsbox_list = gwlist_create();	/* have a list of connections */
     smsbox_list_rwlock = gw_rwlock_create();
     if (!boxid)
         boxid = counter_create();
@@ -1144,8 +1144,8 @@
     /* load the defined smsbox routing rules */
     init_smsbox_routes(cfg);
 
-    list_add_producer(outgoing_sms);
-    list_add_producer(smsbox_list);
+    gwlist_add_producer(outgoing_sms);
+    gwlist_add_producer(smsbox_list);
 
     smsbox_running = 1;
     
@@ -1199,8 +1199,8 @@
     if (box_allow_ip != NULL && box_deny_ip == NULL)
 	    info(0, "Box connection allowed IPs defined without any denied...");
     
-    wapbox_list = list_create();	/* have a list of connections */
-    list_add_producer(outgoing_wdp);
+    wapbox_list = gwlist_create();	/* have a list of connections */
+    gwlist_add_producer(outgoing_wdp);
     if (!boxid)
         boxid = counter_create();
 
@@ -1253,9 +1253,9 @@
     boxes = 0;
     
     if (wapbox_list) {
-	    list_lock(wapbox_list);
-	    for(i=0; i < list_len(wapbox_list); i++) {
-	        bi = list_get(wapbox_list, i);
+	    gwlist_lock(wapbox_list);
+	    for(i=0; i < gwlist_len(wapbox_list); i++) {
+	        bi = gwlist_get(wapbox_list, i);
 	        if (bi->alive == 0)
 		        continue;
 	        t = orig - bi->connect_time;
@@ -1285,12 +1285,12 @@
                 lb);
 	            boxes++;
 	       }
-	       list_unlock(wapbox_list);
+	       gwlist_unlock(wapbox_list);
         }
         if (smsbox_list) {
             gw_rwlock_rdlock(smsbox_list_rwlock);
-	    for(i=0; i < list_len(smsbox_list); i++) {
-	        bi = list_get(smsbox_list, i);
+	    for(i=0; i < gwlist_len(smsbox_list); i++) {
+	        bi = gwlist_get(smsbox_list, i);
 	        if (bi->alive == 0)
 		        continue;
 	        t = orig - bi->connect_time;
@@ -1302,7 +1302,7 @@
                     "\t\t<ssl>%s</ssl>\n\t</box>",
                     (bi->boxc_id ? octstr_get_cstr(bi->boxc_id) : ""),
 		            octstr_get_cstr(bi->client_ip),
-		            list_len(bi->incoming) + dict_key_count(bi->sent),
+		            gwlist_len(bi->incoming) + dict_key_count(bi->sent),
 		            t/3600/24, t/3600%24, t/60%60, t%60,
 #ifdef HAVE_LIBSSL
                     conn_get_ssl(bi->conn) != NULL ? "yes" : "no"
@@ -1313,7 +1313,7 @@
             else
                 octstr_format_append(tmp, "%ssmsbox:%s, IP %s (%ld queued), (on-line %ldd %ldh %ldm %lds) %s %s",
                     ws, (bi->boxc_id ? octstr_get_cstr(bi->boxc_id) : "(none)"), 
-                    octstr_get_cstr(bi->client_ip), list_len(bi->incoming) + dict_key_count(bi->sent),
+                    octstr_get_cstr(bi->client_ip), gwlist_len(bi->incoming) + dict_key_count(bi->sent),
 		            t/3600/24, t/3600%24, t/60%60, t%60, 
 #ifdef HAVE_LIBSSL
                     conn_get_ssl(bi->conn) != NULL ? "using SSL" : "",
@@ -1345,12 +1345,12 @@
     Boxc *boxc;
     
     if (wapbox_list) {
-	    list_lock(wapbox_list);
-	    for(i=0; i < list_len(wapbox_list); i++) {
-	        boxc = list_get(wapbox_list, i);
-	        q += list_len(boxc->incoming);
+	    gwlist_lock(wapbox_list);
+	    for(i=0; i < gwlist_len(wapbox_list); i++) {
+	        boxc = gwlist_get(wapbox_list, i);
+	        q += gwlist_len(boxc->incoming);
 	    }
-	    list_unlock(wapbox_list);
+	    gwlist_unlock(wapbox_list);
     }
     return q;
 }
@@ -1393,11 +1393,11 @@
      * Lookup the connection in the dictionary.
      */
     gw_rwlock_rdlock(smsbox_list_rwlock);
-    if (list_len(smsbox_list) == 0) {
+    if (gwlist_len(smsbox_list) == 0) {
         gw_rwlock_unlock(smsbox_list_rwlock);
     	warning(0, "smsbox_list empty!");
-        if (max_incoming_sms_qlength < 0 || max_incoming_sms_qlength > list_len(incoming_sms)) {
-            list_produce(incoming_sms, msg);
+        if (max_incoming_sms_qlength < 0 || max_incoming_sms_qlength > gwlist_len(incoming_sms)) {
+            gwlist_produce(incoming_sms, msg);
 	    return 0;
          }
          else
@@ -1428,8 +1428,8 @@
 
     /* check if we found our routing */
     if (bc != NULL) {
-        if (max_incoming_sms_qlength < 0 || max_incoming_sms_qlength > list_len(bc->incoming)) {
-            list_produce(bc->incoming, msg);
+        if (max_incoming_sms_qlength < 0 || max_incoming_sms_qlength > gwlist_len(bc->incoming)) {
+            gwlist_produce(bc->incoming, msg);
             gw_rwlock_unlock(smsbox_list_rwlock);
             return 1; /* we are done */
         }
@@ -1445,8 +1445,8 @@
          * put msg into global incoming queue and wait until smsbox with
          * such boxc_id connected.
          */
-        if (max_incoming_sms_qlength < 0 || max_incoming_sms_qlength > list_len(incoming_sms)) {
-            list_produce(incoming_sms, msg);
+        if (max_incoming_sms_qlength < 0 || max_incoming_sms_qlength > gwlist_len(incoming_sms)) {
+            gwlist_produce(incoming_sms, msg);
             return 0;
         }
         else
@@ -1462,17 +1462,17 @@
      * and select the one with lowest load level - if tied, the first
      * one
      */
-    len = list_len(smsbox_list);
+    len = gwlist_len(smsbox_list);
     b = gw_rand() % len;
 
-    for(i = 0; i < list_len(smsbox_list); i++) {
-	bc = list_get(smsbox_list, (i+b) % len);
+    for(i = 0; i < gwlist_len(smsbox_list); i++) {
+	bc = gwlist_get(smsbox_list, (i+b) % len);
 
         if (bc->boxc_id != NULL || bc->routable == 0)
             bc = NULL;
 
         if (bc != NULL && max_incoming_sms_qlength > 0 &&
-            list_len(bc->incoming) > max_incoming_sms_qlength) {
+            gwlist_len(bc->incoming) > max_incoming_sms_qlength) {
             full_found = 1;
             bc = NULL;
         }
@@ -1485,15 +1485,15 @@
 
     if (best != NULL) {
         best->load++;
-        list_produce(best->incoming, msg);
+        gwlist_produce(best->incoming, msg);
     }
 
     gw_rwlock_unlock(smsbox_list_rwlock);
 
     if (best == NULL && full_found == 0) {
 	warning(0, "smsbox_list empty!");
-        if (max_incoming_sms_qlength < 0 || max_incoming_sms_qlength > list_len(incoming_sms)) {
-            list_produce(incoming_sms, msg);
+        if (max_incoming_sms_qlength < 0 || max_incoming_sms_qlength > gwlist_len(incoming_sms)) {
+            gwlist_produce(incoming_sms, msg);
 	    return 0;
          }
          else
@@ -1512,7 +1512,7 @@
     int ret = -1;
     Boxc *boxc;
 
-    list_add_producer(flow_threads);
+    gwlist_add_producer(flow_threads);
 
     newmsg = startmsg = msg = NULL;
 
@@ -1520,23 +1520,23 @@
 
         if (newmsg == startmsg) {
             /* check if we are in shutdown phase */
-            if (list_producer_count(smsbox_list) == 0)
+            if (gwlist_producer_count(smsbox_list) == 0)
                 break;
 
             if (ret == 0 || ret == -1) {
                 /* debug("", 0, "time to sleep"); */
                 gwthread_sleep(60.0);
-                /* debug("", 0, "wake up list len %ld", list_len(incoming_sms)); */
+                /* debug("", 0, "wake up list len %ld", gwlist_len(incoming_sms)); */
                 /* shutdown ? */
-                if (list_producer_count(smsbox_list) == 0 && list_len(smsbox_list) == 0)
+                if (gwlist_producer_count(smsbox_list) == 0 && gwlist_len(smsbox_list) == 0)
                     break;
             }
-            startmsg = msg = list_consume(incoming_sms);
-            /* debug("", 0, "list_consume done 1"); */
+            startmsg = msg = gwlist_consume(incoming_sms);
+            /* debug("", 0, "gwlist_consume done 1"); */
             newmsg = NULL;
         }
         else {
-            newmsg = msg = list_consume(incoming_sms);
+            newmsg = msg = gwlist_consume(incoming_sms);
         }
 
         if (msg == NULL)
@@ -1551,17 +1551,17 @@
         if (ret == 1)
             startmsg = newmsg = NULL;
         else if (ret == -1) {
-            list_produce(incoming_sms, msg);
+            gwlist_produce(incoming_sms, msg);
         }
     }
 
     gw_rwlock_rdlock(smsbox_list_rwlock);
-    len = list_len(smsbox_list);
+    len = gwlist_len(smsbox_list);
     for (i=0; i < len; i++) {
-        boxc = list_get(smsbox_list, i);
-        list_remove_producer(boxc->incoming);
+        boxc = gwlist_get(smsbox_list, i);
+        gwlist_remove_producer(boxc->incoming);
     }
     gw_rwlock_unlock(smsbox_list_rwlock);
 
-    list_remove_producer(flow_threads);
+    gwlist_remove_producer(flow_threads);
 }
diff -ur kannel-1.4.0/gw/bb_http.c kannel-1.4.0.mod/gw/bb_http.c
--- kannel-1.4.0/gw/bb_http.c	2004-01-22 15:08:24.000000000 +0100
+++ kannel-1.4.0.mod/gw/bb_http.c	2006-03-24 16:50:55.000000000 +0100
@@ -405,7 +405,7 @@
     /* debug("bb.http", 0, "Result: '%s'", octstr_get_cstr(final_reply));
      */
     http_destroy_headers(headers);
-    headers = list_create();
+    headers = gwlist_create();
     http_header_add(headers, "Content-Type", content_type);
 
     http_send_reply(client, HTTP_OK, headers, final_reply);
diff -ur kannel-1.4.0/gw/bb_smscconn.c kannel-1.4.0.mod/gw/bb_smscconn.c
--- kannel-1.4.0/gw/bb_smscconn.c	2004-11-18 17:31:32.000000000 +0100
+++ kannel-1.4.0.mod/gw/bb_smscconn.c	2006-03-24 16:50:55.000000000 +0100
@@ -137,8 +137,8 @@
 
 void bb_smscconn_ready(SMSCConn *conn)
 {
-    list_add_producer(flow_threads);
-    list_add_producer(incoming_sms);
+    gwlist_add_producer(flow_threads);
+    gwlist_add_producer(incoming_sms);
 }
 
 
@@ -154,8 +154,8 @@
     /* NOTE: after status has been set to SMSCCONN_DEAD, bearerbox
      *   is free to release/delete 'conn'
      */
-    list_remove_producer(incoming_sms);
-    list_remove_producer(flow_threads);
+    gwlist_remove_producer(incoming_sms);
+    gwlist_remove_producer(flow_threads);
 }
 
 
@@ -257,7 +257,7 @@
 
     case SMSCCONN_FAILED_SHUTDOWN:
     case SMSCCONN_FAILED_TEMPORARILY:
-	list_produce(outgoing_sms, sms);
+	gwlist_produce(outgoing_sms, sms);
 	break;
     default:
 	/* write NACK to store file */
@@ -407,7 +407,7 @@
     Msg *msg, *newmsg, *startmsg;
     int ret;
     
-    list_add_producer(flow_threads);
+    gwlist_add_producer(flow_threads);
     gwthread_wakeup(MAIN_THREAD_ID);
 
     newmsg = startmsg = NULL;
@@ -419,14 +419,14 @@
 	    if (ret != 1) {
 		debug("bb.sms", 0, "sms_router: time to sleep"); 
 		gwthread_sleep(600.0);	/* hopefully someone wakes us up */
-		debug("bb.sms", 0, "sms_router: list_len = %ld",
-		      list_len(outgoing_sms));
+		debug("bb.sms", 0, "sms_router: gwlist_len = %ld",
+		      gwlist_len(outgoing_sms));
 	    }
-	    startmsg = list_consume(outgoing_sms);
+	    startmsg = gwlist_consume(outgoing_sms);
 	    newmsg = NULL;
 	    msg = startmsg;
 	} else {
-	    newmsg = list_consume(outgoing_sms);
+	    newmsg = gwlist_consume(outgoing_sms);
 	    msg = newmsg;
 	}
 	/* debug("bb.sms", 0, "sms_router: handling message (%p vs %p)",
@@ -450,7 +450,7 @@
 
     smsc_running = 0;
 
-    list_remove_producer(flow_threads);
+    gwlist_remove_producer(flow_threads);
 }
 
 
@@ -473,7 +473,7 @@
     /* create split sms counter */
     split_msg_counter = counter_create();
     
-    smsc_list = list_create();
+    smsc_list = gwlist_create();
     gw_rwlock_init_static(&smsc_list_lock);
 
     grp = cfg_get_single_group(cfg, octstr_imm("core"));
@@ -504,28 +504,28 @@
 
     smsc_groups = cfg_get_multi_group(cfg, octstr_imm("smsc"));
     /*
-    while(groups && (grp = list_extract_first(groups)) != NULL) {
+    while(groups && (grp = gwlist_extract_first(groups)) != NULL) {
         conn = smscconn_create(grp, 1); 
         if (conn == NULL)
             panic(0, "Cannot start with SMSC connection failing");
         
-        list_append(smsc_list, conn);
+        gwlist_append(smsc_list, conn);
     }
     */
-    list_add_producer(smsc_list);
-    for (i = 0; i < list_len(smsc_groups) && 
-        (grp = list_get(smsc_groups, i)) != NULL; i++) {
+    gwlist_add_producer(smsc_list);
+    for (i = 0; i < gwlist_len(smsc_groups) && 
+        (grp = gwlist_get(smsc_groups, i)) != NULL; i++) {
         conn = smscconn_create(grp, 1); 
         if (conn == NULL)
             panic(0, "Cannot start with SMSC connection failing");
-        list_append(smsc_list, conn);
+        gwlist_append(smsc_list, conn);
     }
-    list_remove_producer(smsc_list);
+    gwlist_remove_producer(smsc_list);
     
     if ((router_thread = gwthread_create(sms_router, NULL)) == -1)
 	panic(0, "Failed to start a new thread for SMS routing");
     
-    list_add_producer(incoming_sms);
+    gwlist_add_producer(incoming_sms);
     smsc_running = 1;
     return 0;
 }
@@ -539,16 +539,16 @@
     SMSCConn *conn = NULL;
     long i;
 
-    if (start > list_len(smsc_list) || start < 0)
+    if (start > gwlist_len(smsc_list) || start < 0)
         return -1;
 
-    for (i = start; i < list_len(smsc_list); i++) {
-        conn = list_get(smsc_list, i);
+    for (i = start; i < gwlist_len(smsc_list); i++) {
+        conn = gwlist_get(smsc_list, i);
         if (conn != NULL && octstr_compare(conn->id, id) == 0) {
             break;
         }
     }
-    if (i >= list_len(smsc_list))
+    if (i >= gwlist_len(smsc_list))
         i = -1;
     return i;
 }
@@ -564,7 +564,7 @@
     gw_rwlock_rdlock(&smsc_list_lock);
     /* find the specific smsc via id */
     while((i = smsc2_find(id, ++i)) != -1) {
-        conn = list_get(smsc_list, i);
+        conn = gwlist_get(smsc_list, i);
         if (conn != NULL && smscconn_status(conn) == SMSCCONN_DEAD) {
             info(0, "HTTP: Could not shutdown already dead smsc-id `%s'",
                 octstr_get_cstr(id));
@@ -594,7 +594,7 @@
         int hit;
         long group_index;
         /* check if smsc has online status already */
-        conn = list_get(smsc_list, i);
+        conn = gwlist_get(smsc_list, i);
         if (conn != NULL && smscconn_status(conn) != SMSCCONN_DEAD) {
             warning(0, "HTTP: Could not re-start already running smsc-id `%s'",
                 octstr_get_cstr(id));
@@ -603,8 +603,8 @@
         /* find the group with equal smsc id */
         hit = 0;
         grp = NULL;
-        for (group_index = 0; group_index < list_len(smsc_groups) && 
-             (grp = list_get(smsc_groups, group_index)) != NULL; group_index++) {
+        for (group_index = 0; group_index < gwlist_len(smsc_groups) && 
+             (grp = gwlist_get(smsc_groups, group_index)) != NULL; group_index++) {
             smscid = cfg_get(grp, octstr_imm("smsc-id"));
             if (smscid != NULL && octstr_compare(smscid, id) == 0) {
                 if (hit == num)
@@ -631,10 +631,10 @@
         }
         
         /* drop old connection from the active smsc list */
-        list_delete(smsc_list, i, 1);
+        gwlist_delete(smsc_list, i, 1);
         /* destroy the connection */
         smscconn_destroy(conn);
-        list_insert(smsc_list, i, new_conn);
+        gwlist_insert(smsc_list, i, new_conn);
         smscconn_start(new_conn);
         num++;
     }
@@ -656,8 +656,8 @@
         return;
 
     gw_rwlock_rdlock(&smsc_list_lock);
-    for (i = 0; i < list_len(smsc_list); i++) {
-        conn = list_get(smsc_list, i);
+    for (i = 0; i < gwlist_len(smsc_list); i++) {
+        conn = gwlist_get(smsc_list, i);
         smscconn_start(conn);
     }
     gw_rwlock_unlock(&smsc_list_lock);
@@ -676,8 +676,8 @@
         return;
 
     gw_rwlock_rdlock(&smsc_list_lock);
-    for (i = 0; i < list_len(smsc_list); i++) {
-        conn = list_get(smsc_list, i);
+    for (i = 0; i < gwlist_len(smsc_list); i++) {
+        conn = gwlist_get(smsc_list, i);
         smscconn_stop(conn);
     }
     gw_rwlock_unlock(&smsc_list_lock);
@@ -696,8 +696,8 @@
      * handle that they quit, by emptying queues and then dying off
      */
     gw_rwlock_rdlock(&smsc_list_lock);
-    for(i=0; i < list_len(smsc_list); i++) {
-        conn = list_get(smsc_list, i);
+    for(i=0; i < gwlist_len(smsc_list); i++) {
+        conn = gwlist_get(smsc_list, i);
 	smscconn_shutdown(conn, 1);
     }
     gw_rwlock_unlock(&smsc_list_lock);
@@ -710,7 +710,7 @@
      * receive thingies? Is this guaranteed by setting bb_status
      * to shutdown before calling these?
      */
-    list_remove_producer(incoming_sms);
+    gwlist_remove_producer(incoming_sms);
     return 0;
 }
 
@@ -726,14 +726,14 @@
     debug("smscconn", 0, "final clean-up for SMSCConn");
     
     gw_rwlock_wrlock(&smsc_list_lock);
-    for (i = 0; i < list_len(smsc_list); i++) {
-        conn = list_get(smsc_list, i);
+    for (i = 0; i < gwlist_len(smsc_list); i++) {
+        conn = gwlist_get(smsc_list, i);
         smscconn_destroy(conn);
     }
-    list_destroy(smsc_list, NULL);
+    gwlist_destroy(smsc_list, NULL);
     smsc_list = NULL;
     gw_rwlock_unlock(&smsc_list_lock);
-    list_destroy(smsc_groups, NULL);
+    gwlist_destroy(smsc_groups, NULL);
     octstr_destroy(unified_prefix);    
     numhash_destroy(white_list);
     numhash_destroy(black_list);
@@ -776,11 +776,11 @@
     if (status_type != BBSTATUS_XML)
         tmp = octstr_format("%sSMSC connections:%s", para ? "<p>" : "", lb);
     else
-        tmp = octstr_format("<smscs><count>%d</count>\n\t", list_len(smsc_list));
+        tmp = octstr_format("<smscs><count>%d</count>\n\t", gwlist_len(smsc_list));
 
     gw_rwlock_rdlock(&smsc_list_lock);
-    for (i = 0; i < list_len(smsc_list); i++) {
-        conn = list_get(smsc_list, i);
+    for (i = 0; i < gwlist_len(smsc_list); i++) {
+        conn = gwlist_get(smsc_list, i);
 
         if ((smscconn_info(conn, &info) == -1)) {
             /* 
@@ -890,19 +890,19 @@
      * start - from random SMSCConn, as they are all 'equal'
      */
     gw_rwlock_rdlock(&smsc_list_lock);
-    if (list_len(smsc_list) == 0) {
+    if (gwlist_len(smsc_list) == 0) {
 	warning(0, "No SMSCes to receive message");
         gw_rwlock_unlock(&smsc_list_lock);
 	return SMSCCONN_FAILED_DISCARDED;
     }
 
-    s = gw_rand() % list_len(smsc_list);
+    s = gw_rand() % gwlist_len(smsc_list);
     best_preferred = best_ok = NULL;
     bad_found = 0;
     
     conn = NULL;
-    for (i=0; i < list_len(smsc_list); i++) {
-	conn = list_get(smsc_list,  (i+s) % list_len(smsc_list));
+    for (i=0; i < gwlist_len(smsc_list); i++) {
+	conn = gwlist_get(smsc_list,  (i+s) % gwlist_len(smsc_list));
 
 	ret = smscconn_usable(conn,msg);
 	if (ret == -1)
@@ -937,7 +937,7 @@
 	ret = smscconn_send(best_ok, msg);
     else if (bad_found) {
 	if (bb_status != BB_SHUTDOWN)
-	    list_produce(outgoing_sms, msg);
+	    gwlist_produce(outgoing_sms, msg);
         gw_rwlock_unlock(&smsc_list_lock);
 	return 0;
     }
diff -ur kannel-1.4.0/gw/bb_store.c kannel-1.4.0.mod/gw/bb_store.c
--- kannel-1.4.0/gw/bb_store.c	2004-06-28 17:15:40.000000000 +0200
+++ kannel-1.4.0.mod/gw/bb_store.c	2006-03-24 16:50:55.000000000 +0100
@@ -155,12 +155,12 @@
     if (open_file(newfile)==-1)
 	return -1;
 
-    for (l=0; l < list_len(sms_store); l++) {
-	msg = list_get(sms_store, l);
+    for (l=0; l < gwlist_len(sms_store); l++) {
+	msg = gwlist_get(sms_store, l);
 	write_msg(msg);
     }
-    for (l=0; l < list_len(ack_store); l++) {
-	msg = list_get(ack_store, l);
+    for (l=0; l < gwlist_len(ack_store); l++) {
+	msg = gwlist_get(ack_store, l);
 	write_msg(msg);
     }
     fflush(file);
@@ -196,14 +196,14 @@
     long len;
     int cleanup = 0;
 
-    list_add_producer(flow_threads);
+    gwlist_add_producer(flow_threads);
     last = time(NULL);
 
-    while((ack = list_consume(ack_store)) != NULL) {
+    while((ack = gwlist_consume(ack_store)) != NULL) {
 
-        list_lock(sms_store);
-	match = list_extract_matching(sms_store, ack, cmp_msgs);
-        list_unlock(sms_store);
+        gwlist_lock(sms_store);
+	match = gwlist_extract_matching(sms_store, ack, cmp_msgs);
+        gwlist_unlock(sms_store);
 	msg_destroy(ack);
 
 	if (match == NULL) {
@@ -212,12 +212,12 @@
 	    continue;
 	}
 
-	if (list_len(match) > 1)
+	if (gwlist_len(match) > 1)
 	    warning(0, "bb-store cleanup: Found %ld matches!?",
-		    list_len(match));
-	list_destroy(match, msg_destroy_item);
+		    gwlist_len(match));
+	gwlist_destroy(match, msg_destroy_item);
 
-	len = list_len(ack_store);
+	len = gwlist_len(ack_store);
 	if (len > 100)
 	    cleanup = 1;
 	now = time(NULL);
@@ -240,14 +240,14 @@
     octstr_destroy(bakfile);
     mutex_destroy(file_mutex);
 
-    list_destroy(ack_store, msg_destroy_item);
-    list_destroy(sms_store, msg_destroy_item);
+    gwlist_destroy(ack_store, msg_destroy_item);
+    gwlist_destroy(sms_store, msg_destroy_item);
     /* set all vars to NULL */
     filename = newfile = bakfile = NULL;
     file_mutex = NULL;
     ack_store = sms_store = NULL;
 
-    list_remove_producer(flow_threads);
+    gwlist_remove_producer(flow_threads);
 }
 
 
@@ -279,9 +279,9 @@
     if (filename == NULL)
         goto finish;
 
-    list_lock(sms_store);
-    for (l = 0; l < list_len(sms_store); l++) {
-        msg = list_get(sms_store, l);
+    gwlist_lock(sms_store);
+    for (l = 0; l < gwlist_len(sms_store); l++) {
+        msg = gwlist_get(sms_store, l);
 
         if (msg_type(msg) == sms) {
 
@@ -341,7 +341,7 @@
                 octstr_hex_to_binary(msg->sms.msgdata);
         }
     }
-    list_unlock(sms_store);
+    gwlist_unlock(sms_store);
 
 finish:
     /* set the type based footer */
@@ -355,7 +355,7 @@
 
 long store_messages(void)
 {
-    return (sms_store ? list_len(sms_store) : -1);
+    return (sms_store ? gwlist_len(sms_store) : -1);
 }
 
 
@@ -375,11 +375,11 @@
 
     if (msg_type(msg) == sms) {
 	copy = msg_duplicate(msg);
-	list_produce(sms_store, copy);
+	gwlist_produce(sms_store, copy);
     }
     else if (msg_type(msg) == ack) {
 	copy = msg_duplicate(msg);
-	list_produce(ack_store, copy);
+	gwlist_produce(ack_store, copy);
     }
     else
 	return -1;
@@ -420,7 +420,7 @@
     write_msg(mack);
     mutex_unlock(file_mutex);
 
-    list_produce(ack_store, mack);
+    gwlist_produce(ack_store, mack);
 
     return 0;
 }
@@ -441,13 +441,13 @@
     if (filename == NULL)
 	return 0;
 
-    list_lock(ack_store);
-    list_lock(sms_store);
+    gwlist_lock(ack_store);
+    gwlist_lock(sms_store);
 
-    while((msg = list_extract_first(sms_store))!=NULL)
+    while((msg = gwlist_extract_first(sms_store))!=NULL)
 	msg_destroy(msg);
 
-    while((msg = list_extract_first(ack_store))!=NULL)
+    while((msg = gwlist_extract_first(ack_store))!=NULL)
 	msg_destroy(msg);
 
     mutex_lock(file_mutex);
@@ -470,8 +470,8 @@
 	    else {
 		info(0, "Cannot open any store file, starting new one");
 		retval = open_file(filename);
-		list_unlock(sms_store);
-		list_unlock(ack_store);
+		gwlist_unlock(sms_store);
+		gwlist_unlock(ack_store);
 		mutex_unlock(file_mutex);
 		return retval;
 	    }
@@ -538,7 +538,7 @@
      */
 
     keys = dict_keys(msg_hash);
-    while((key = list_extract_first(keys))!=NULL) {
+    while((key = gwlist_extract_first(keys))!=NULL) {
 	msg = dict_remove(msg_hash, key);
 	octstr_destroy(key);
 
@@ -549,23 +549,23 @@
 	    continue;
 	}
 	copy = msg_duplicate(msg);
-	list_produce(sms_store, copy);
+	gwlist_produce(sms_store, copy);
 
 	if (msg->sms.sms_type == mo ||
 	    msg->sms.sms_type == report_mo) {
-	    list_produce(incoming_sms, msg);
+	    gwlist_produce(incoming_sms, msg);
         }
 	else if (msg->sms.sms_type == mt_push ||
 	    msg->sms.sms_type == mt_reply ||
 	    msg->sms.sms_type == report_mt) {
-	    list_produce(outgoing_sms, msg);
+	    gwlist_produce(outgoing_sms, msg);
         }
 	else {
 	    msg_dump(msg,0);
             msg_destroy(msg);
 	}
     }
-    list_destroy(keys, NULL);
+    gwlist_destroy(keys, NULL);
 
     /* Finally, generate new store file out of left messages
      */
@@ -576,8 +576,8 @@
     /* destroy the hash */
     dict_destroy(msg_hash);
 
-    list_unlock(ack_store);
-    list_unlock(sms_store);
+    gwlist_unlock(ack_store);
+    gwlist_unlock(sms_store);
 
     return retval;
 }
@@ -588,10 +588,10 @@
 {
     int retval;
 
-    list_lock(ack_store);
-    list_lock(sms_store);
+    gwlist_lock(ack_store);
+    gwlist_lock(sms_store);
     debug("bb.store", 0, "Dumping %ld messages and %ld acks to store",
-	  list_len(sms_store), list_len(ack_store));
+	  gwlist_len(sms_store), gwlist_len(ack_store));
     mutex_lock(file_mutex);
     if (file != NULL) {
 	fclose(file);
@@ -599,8 +599,8 @@
     }
     retval = do_dump();
     mutex_unlock(file_mutex);
-    list_unlock(ack_store);
-    list_unlock(sms_store);
+    gwlist_unlock(ack_store);
+    gwlist_unlock(sms_store);
 
     return retval;
 }
@@ -619,11 +619,11 @@
     newfile = octstr_format("%s.new", octstr_get_cstr(filename));
     bakfile = octstr_format("%s.bak", octstr_get_cstr(filename));
 
-    sms_store = list_create();
-    ack_store = list_create();
+    sms_store = gwlist_create();
+    ack_store = gwlist_create();
 
     file_mutex = mutex_create();
-    list_add_producer(ack_store);
+    gwlist_add_producer(ack_store);
 
     if ((cleanup_thread = gwthread_create(store_cleanup, NULL))==-1)
 	panic(0, "Failed to create a cleanup thread!");
@@ -637,5 +637,5 @@
     if (filename == NULL)
 	return;
 
-    list_remove_producer(ack_store);
+    gwlist_remove_producer(ack_store);
 }
diff -ur kannel-1.4.0/gw/bb_udp.c kannel-1.4.0.mod/gw/bb_udp.c
--- kannel-1.4.0/gw/bb_udp.c	2004-05-15 10:16:01.000000000 +0200
+++ kannel-1.4.0.mod/gw/bb_udp.c	2006-03-24 16:50:55.000000000 +0100
@@ -128,14 +128,14 @@
     Udpc *conn = arg;
     Octstr *ip;
 
-    list_add_producer(incoming_wdp);
-    list_add_producer(flow_threads);
+    gwlist_add_producer(incoming_wdp);
+    gwlist_add_producer(flow_threads);
     gwthread_wakeup(MAIN_THREAD_ID);
     
     /* remove messages from socket until it is closed */
     while (bb_status != BB_DEAD && bb_status != BB_SHUTDOWN) {
 
-	list_consume(isolated);	/* block here if suspended/isolated */
+	gwlist_consume(isolated);	/* block here if suspended/isolated */
 
 	if (read_available(conn->fd, 100000) < 1)
 	    continue;
@@ -171,15 +171,15 @@
 	    msg->wdp_datagram.destination_port    = udp_get_port(conn->addr);
 	    msg->wdp_datagram.user_data = datagram;
     
-	    list_produce(incoming_wdp, msg);
+	    gwlist_produce(incoming_wdp, msg);
 	    counter_increase(incoming_wdp_counter);
 	}
 
 	octstr_destroy(cliaddr);
 	octstr_destroy(ip);
     }    
-    list_remove_producer(incoming_wdp);
-    list_remove_producer(flow_threads);
+    gwlist_remove_producer(incoming_wdp);
+    gwlist_remove_producer(flow_threads);
 }
 
 
@@ -207,12 +207,12 @@
     Msg *msg;
     Udpc *conn = arg;
 
-    list_add_producer(flow_threads);
+    gwlist_add_producer(flow_threads);
     while(bb_status != BB_DEAD) {
 
-	list_consume(suspended);	/* block here if suspended */
+	gwlist_consume(suspended);	/* block here if suspended */
 
-	if ((msg = list_consume(conn->outgoing_list)) == NULL)
+	if ((msg = gwlist_consume(conn->outgoing_list)) == NULL)
 	    break;
 
 	debug("bb.udp", 0, "udp: sending message");
@@ -231,7 +231,7 @@
     gwthread_join(conn->receiver);
 
     udpc_destroy(conn);
-    list_remove_producer(flow_threads);
+    gwlist_remove_producer(flow_threads);
 }
 
 /*---------------------------------------------------------------
@@ -268,7 +268,7 @@
 
     octstr_destroy(os);
     
-    udpc->outgoing_list = list_create();
+    udpc->outgoing_list = gwlist_create();
 
     return udpc;
 }    
@@ -282,8 +282,8 @@
     if (udpc->fd >= 0)
 	close(udpc->fd);
     octstr_destroy(udpc->addr);
-    gw_assert(list_len(udpc->outgoing_list) == 0);
-    list_destroy(udpc->outgoing_list, NULL);
+    gw_assert(gwlist_len(udpc->outgoing_list) == 0);
+    gwlist_destroy(udpc->outgoing_list, NULL);
 
     gw_free(udpc);
 }    
@@ -295,7 +295,7 @@
     
     if ((udpc = udpc_create(port, interface_name)) == NULL)
 	goto error;
-    list_add_producer(udpc->outgoing_list);
+    gwlist_add_producer(udpc->outgoing_list);
 
     udpc->receiver = gwthread_create(udp_receiver, udpc);
     if (udpc->receiver == -1)
@@ -304,7 +304,7 @@
     if (gwthread_create(udp_sender, udpc) == -1)
 	goto error;
 
-    list_append(udpc_list, udpc);
+    gwlist_append(udpc_list, udpc);
     return 0;
     
 error:    
@@ -345,12 +345,12 @@
     grp = cfg_get_single_group(cfg, octstr_imm("wtls"));
     allow_wtls = grp != NULL ? 1 : 0;
 
-    udpc_list = list_create();	/* have a list of running systems */
+    udpc_list = gwlist_create();	/* have a list of running systems */
 
     ifs = octstr_split(iface, octstr_imm(";"));
     octstr_destroy(iface);
-    while (list_len(ifs) > 0) {
-        iface = list_extract_first(ifs);
+    while (gwlist_len(ifs) > 0) {
+        iface = gwlist_extract_first(ifs);
 	info(0, "Adding interface %s", octstr_get_cstr(iface));
         add_service(9200, octstr_get_cstr(iface));   /* wsp 	*/
         add_service(9201, octstr_get_cstr(iface));   /* wsp/wtp	*/
@@ -370,9 +370,9 @@
     /* add_service(9207, octstr_get_cstr(interface_name));  * vcal/wtls	*/
         octstr_destroy(iface);
     }
-    list_destroy(ifs, NULL);
+    gwlist_destroy(ifs, NULL);
     
-    list_add_producer(incoming_wdp);
+    gwlist_add_producer(incoming_wdp);
     udp_running = 1;
     return 0;
 }
@@ -393,18 +393,18 @@
     assert(msg != NULL);
     assert(msg_type(msg) == wdp_datagram);
     
-    list_lock(udpc_list);
+    gwlist_lock(udpc_list);
     /* select in which list to add this */
-    for (i=0; i < list_len(udpc_list); i++) {
-		udpc = list_get(udpc_list, i);
+    for (i=0; i < gwlist_len(udpc_list); i++) {
+		udpc = gwlist_get(udpc_list, i);
 
 		if (msg->wdp_datagram.source_port == udp_get_port(udpc->addr)) {
                     def_udpc = udpc;
                     ip = udp_get_ip(udpc->addr);
 		    if (octstr_compare(msg->wdp_datagram.source_address, ip) == 0) {
                         octstr_destroy(ip);
-	    		list_produce(udpc->outgoing_list, msg);
-	    		list_unlock(udpc_list);
+	    		gwlist_produce(udpc->outgoing_list, msg);
+	    		gwlist_unlock(udpc_list);
 	    		return 0;
 		    }
                     octstr_destroy(ip);
@@ -412,12 +412,12 @@
     }
 
     if (NULL != def_udpc) {
-	list_produce(def_udpc->outgoing_list, msg);
-	list_unlock(udpc_list);
+	gwlist_produce(def_udpc->outgoing_list, msg);
+	gwlist_unlock(udpc_list);
 	return 0;
     }
 
-    list_unlock(udpc_list);
+    gwlist_unlock(udpc_list);
     return -1;
 }
 
@@ -426,7 +426,7 @@
     if (!udp_running) return -1;
 
     debug("bb.thread", 0, "udp_shutdown: Starting avalanche");
-    list_remove_producer(incoming_wdp);
+    gwlist_remove_producer(incoming_wdp);
     return 0;
 }
 
@@ -442,10 +442,10 @@
      */
     debug("bb.udp", 0, "udp_die: removing producers from udp-lists");
 
-    while((udpc = list_consume(udpc_list)) != NULL) {
-	list_remove_producer(udpc->outgoing_list);
+    while((udpc = gwlist_consume(udpc_list)) != NULL) {
+	gwlist_remove_producer(udpc->outgoing_list);
     }
-    list_destroy(udpc_list, NULL);
+    gwlist_destroy(udpc_list, NULL);
     udp_running = 0;
     
     octstr_destroy(allow_ip);
@@ -465,11 +465,11 @@
     if (!udp_running || udpc_list == NULL)
 	return 0;
 
-    list_lock(udpc_list);
-    for (i=0; i < list_len(udpc_list); i++) {
-	udpc = list_get(udpc_list, i);
-	q += list_len(udpc->outgoing_list);
+    gwlist_lock(udpc_list);
+    for (i=0; i < gwlist_len(udpc_list); i++) {
+	udpc = gwlist_get(udpc_list, i);
+	q += gwlist_len(udpc->outgoing_list);
     }
-    list_unlock(udpc_list);
+    gwlist_unlock(udpc_list);
     return q;
 }
diff -ur kannel-1.4.0/gw/bearerbox.c kannel-1.4.0.mod/gw/bearerbox.c
--- kannel-1.4.0/gw/bearerbox.c	2004-06-28 17:48:29.000000000 +0200
+++ kannel-1.4.0.mod/gw/bearerbox.c	2006-03-24 16:50:55.000000000 +0100
@@ -108,7 +108,7 @@
 
 /* and still more abuse; we use this list to put us into
  * 'suspend' state - if there are any producers (only core adds/removes them)
- * receiver/sender systems just sit, blocked in list_consume
+ * receiver/sender systems just sit, blocked in gwlist_consume
  */
 List *suspended;
 
@@ -144,9 +144,9 @@
     bb_status = BB_SHUTDOWN;
     
     if (old == BB_SUSPENDED)
-	list_remove_producer(suspended);
+	gwlist_remove_producer(suspended);
     if (old == BB_SUSPENDED || old == BB_ISOLATED)
-	list_remove_producer(isolated);
+	gwlist_remove_producer(isolated);
 }
 
 
@@ -236,11 +236,11 @@
 {
     Msg *msg;
 
-    list_add_producer(flow_threads);
+    gwlist_add_producer(flow_threads);
     
     while(bb_status != BB_DEAD) {
 
-	if ((msg = list_consume(outgoing_wdp)) == NULL)
+	if ((msg = gwlist_consume(outgoing_wdp)) == NULL)
 	    break;
 
 	gw_assert(msg_type(msg) == wdp_datagram);
@@ -256,7 +256,7 @@
     udp_die();
     /* smsc_endwdp(); */
 
-    list_remove_producer(flow_threads);
+    gwlist_remove_producer(flow_threads);
 }
 
 static int start_wap(Cfg *cfg)
@@ -424,10 +424,10 @@
 	
     /* if all seems to be OK by the first glimpse, real start-up */
     
-    outgoing_sms = list_create();
-    incoming_sms = list_create();
-    outgoing_wdp = list_create();
-    incoming_wdp = list_create();
+    outgoing_sms = gwlist_create();
+    incoming_sms = gwlist_create();
+    outgoing_wdp = gwlist_create();
+    incoming_wdp = gwlist_create();
 
     outgoing_sms_counter = counter_create();
     incoming_sms_counter = counter_create();
@@ -462,7 +462,7 @@
 	list = cfg_get_multi_group(cfg, octstr_imm("smsc"));
 	if (list != NULL) {
 	    start_smsc(cfg);
-	    list_destroy(list, NULL);
+	    gwlist_destroy(list, NULL);
 	}
     }
 #endif
@@ -488,22 +488,22 @@
 
 #ifndef NO_WAP
 
-    if (list_len(incoming_wdp) > 0 || list_len(outgoing_wdp) > 0)
+    if (gwlist_len(incoming_wdp) > 0 || gwlist_len(outgoing_wdp) > 0)
 	warning(0, "Remaining WDP: %ld incoming, %ld outgoing",
-	      list_len(incoming_wdp), list_len(outgoing_wdp));
+	      gwlist_len(incoming_wdp), gwlist_len(outgoing_wdp));
 
     info(0, "Total WDP messages: received %ld, sent %ld",
 	 counter_value(incoming_wdp_counter),
 	 counter_value(outgoing_wdp_counter));
 #endif
     
-    while((msg = list_extract_first(incoming_wdp))!=NULL)
+    while((msg = gwlist_extract_first(incoming_wdp))!=NULL)
 	msg_destroy(msg);
-    while((msg = list_extract_first(outgoing_wdp))!=NULL)
+    while((msg = gwlist_extract_first(outgoing_wdp))!=NULL)
 	msg_destroy(msg);
 
-    list_destroy(incoming_wdp, NULL);
-    list_destroy(outgoing_wdp, NULL);
+    gwlist_destroy(incoming_wdp, NULL);
+    gwlist_destroy(outgoing_wdp, NULL);
 
     counter_destroy(incoming_wdp_counter);
     counter_destroy(outgoing_wdp_counter);
@@ -513,9 +513,9 @@
 
     /* XXX we should record these so that they are not forever lost...
      */
-    if (list_len(incoming_sms) > 0 || list_len(outgoing_sms) > 0)
+    if (gwlist_len(incoming_sms) > 0 || gwlist_len(outgoing_sms) > 0)
 	debug("bb", 0, "Remaining SMS: %ld incoming, %ld outgoing",
-	      list_len(incoming_sms), list_len(outgoing_sms));
+	      gwlist_len(incoming_sms), gwlist_len(outgoing_sms));
 
     info(0, "Total SMS messages: received %ld, sent %ld",
 	 counter_value(incoming_sms_counter),
@@ -523,8 +523,8 @@
 
 #endif
 
-    list_destroy(incoming_sms, msg_destroy_item);
-    list_destroy(outgoing_sms, msg_destroy_item);
+    gwlist_destroy(incoming_sms, msg_destroy_item);
+    gwlist_destroy(outgoing_sms, msg_destroy_item);
     
     counter_destroy(incoming_sms_counter);
     counter_destroy(outgoing_sms_counter);
@@ -542,10 +542,10 @@
     gwlib_init();
     start_time = time(NULL);
 
-    suspended = list_create();
-    isolated = list_create();
-    list_add_producer(suspended);
-    list_add_producer(isolated);
+    suspended = gwlist_create();
+    isolated = gwlist_create();
+    gwlist_add_producer(suspended);
+    gwlist_add_producer(isolated);
 
     cf_index = get_and_set_debugs(argc, argv, check_args);
 
@@ -564,7 +564,7 @@
     
     report_versions("bearerbox");
 
-    flow_threads = list_create();
+    flow_threads = gwlist_create();
     
     init_bearerbox(cfg);
 
@@ -582,14 +582,14 @@
 	info(0, "Gateway is now SUSPENDED by startup arguments");
     } else if (bb_status == BB_ISOLATED) {
 	info(0, "Gateway is now ISOLATED by startup arguments");
-	list_remove_producer(suspended);
+	gwlist_remove_producer(suspended);
     } else {
 	smsc2_resume();
-	list_remove_producer(suspended);	
-	list_remove_producer(isolated);
+	gwlist_remove_producer(suspended);	
+	gwlist_remove_producer(isolated);
     }
 
-    while(bb_status != BB_SHUTDOWN && bb_status != BB_DEAD && list_producer_count(flow_threads) > 0) {
+    while(bb_status != BB_SHUTDOWN && bb_status != BB_DEAD && gwlist_producer_count(flow_threads) > 0) {
         /* debug("bb", 0, "Main Thread: going to sleep."); */
         /*
          * Not infinite sleep here, because we should notice
@@ -626,7 +626,7 @@
     bb_shutdown();
 
     /* wait until flow threads exit */
-    while(list_consume(flow_threads)!=NULL)
+    while(gwlist_consume(flow_threads)!=NULL)
 	;
 
     info(0, "All flow threads have died, killing core");
@@ -636,9 +636,9 @@
     boxc_cleanup();
     smsc2_cleanup();
     empty_msg_lists();
-    list_destroy(flow_threads, NULL);
-    list_destroy(suspended, NULL);
-    list_destroy(isolated, NULL);
+    gwlist_destroy(flow_threads, NULL);
+    gwlist_destroy(suspended, NULL);
+    gwlist_destroy(isolated, NULL);
     mutex_destroy(status_mutex);
 
     alog_close();		/* if we have any */
@@ -697,9 +697,9 @@
     }
     if (bb_status == BB_RUNNING) {
 	smsc2_suspend();
-	list_add_producer(isolated);
+	gwlist_add_producer(isolated);
     } else
-	list_remove_producer(suspended);
+	gwlist_remove_producer(suspended);
 
     bb_status = BB_ISOLATED;
     mutex_unlock(status_mutex);
@@ -715,10 +715,10 @@
     }
     if (bb_status != BB_ISOLATED) {
 	smsc2_suspend();
-	list_add_producer(isolated);
+	gwlist_add_producer(isolated);
     }
     bb_status = BB_SUSPENDED;
-    list_add_producer(suspended);
+    gwlist_add_producer(suspended);
     mutex_unlock(status_mutex);
     return 0;
 }
@@ -731,11 +731,11 @@
 	return -1;
     }
     if (bb_status == BB_SUSPENDED)
-	list_remove_producer(suspended);
+	gwlist_remove_producer(suspended);
 
     smsc2_resume();
     bb_status = BB_RUNNING;
-    list_remove_producer(isolated);
+    gwlist_remove_producer(isolated);
     mutex_unlock(status_mutex);
     return 0;
 }
@@ -844,13 +844,13 @@
 	    octstr_get_cstr(version),
 	    s, t/3600/24, t/3600%24, t/60%60, t%60,
 	    counter_value(incoming_wdp_counter),
-	    list_len(incoming_wdp) + boxc_incoming_wdp_queue(),
+	    gwlist_len(incoming_wdp) + boxc_incoming_wdp_queue(),
 	    counter_value(outgoing_wdp_counter),
-	    list_len(outgoing_wdp) + udp_outgoing_queue(),
+	    gwlist_len(outgoing_wdp) + udp_outgoing_queue(),
 	    counter_value(incoming_sms_counter),
-	    list_len(incoming_sms),
+	    gwlist_len(incoming_sms),
 	    counter_value(outgoing_sms_counter),
-	    list_len(outgoing_sms),
+	    gwlist_len(outgoing_sms),
 	    store_messages(),
         (float)counter_value(incoming_sms_counter)/t,
         (float)counter_value(outgoing_sms_counter)/t,
diff -ur kannel-1.4.0/gw/dlr_mem.c kannel-1.4.0.mod/gw/dlr_mem.c
--- kannel-1.4.0/gw/dlr_mem.c	2004-08-08 21:50:18.000000000 +0200
+++ kannel-1.4.0.mod/gw/dlr_mem.c	2006-03-24 16:50:55.000000000 +0100
@@ -81,7 +81,7 @@
 static void dlr_mem_shutdown()
 {
     gw_rwlock_wrlock(&rwlock);
-    list_destroy(dlr_waiting_list, (list_item_destructor_t *)dlr_entry_destroy);
+    gwlist_destroy(dlr_waiting_list, (gwlist_item_destructor_t *)dlr_entry_destroy);
     gw_rwlock_unlock(&rwlock);
     gw_rwlock_destroy(&rwlock);
 }
@@ -91,7 +91,7 @@
  */
 static long dlr_mem_messages(void)
 {
-    return list_len(dlr_waiting_list);
+    return gwlist_len(dlr_waiting_list);
 }
 
 static void dlr_mem_flush(void)
@@ -100,9 +100,9 @@
     long len;
 
     gw_rwlock_wrlock(&rwlock);
-    len = list_len(dlr_waiting_list);
+    len = gwlist_len(dlr_waiting_list);
     for (i=0; i < len; i++)
-        list_delete(dlr_waiting_list, i, 1);
+        gwlist_delete(dlr_waiting_list, i, 1);
     gw_rwlock_unlock(&rwlock);
 }
 
@@ -112,7 +112,7 @@
 static void dlr_mem_add(struct dlr_entry *dlr)
 {
     gw_rwlock_wrlock(&rwlock);
-    list_append(dlr_waiting_list,dlr);
+    gwlist_append(dlr_waiting_list,dlr);
     gw_rwlock_unlock(&rwlock);
 }
 
@@ -141,9 +141,9 @@
     struct dlr_entry *dlr = NULL, *ret = NULL;
 
     gw_rwlock_rdlock(&rwlock);
-    len = list_len(dlr_waiting_list);
+    len = gwlist_len(dlr_waiting_list);
     for (i=0; i < len; i++) {
-        dlr = list_get(dlr_waiting_list, i);
+        dlr = gwlist_get(dlr_waiting_list, i);
 
         if (dlr_mem_entry_match(dlr, smsc, ts, dst) == 0) {
             ret = dlr_entry_duplicate(dlr);
@@ -166,12 +166,12 @@
     struct dlr_entry *dlr = NULL;
 
     gw_rwlock_wrlock(&rwlock);
-    len = list_len(dlr_waiting_list);
+    len = gwlist_len(dlr_waiting_list);
     for (i=0; i < len; i++) {
-        dlr = list_get(dlr_waiting_list, i);
+        dlr = gwlist_get(dlr_waiting_list, i);
 
         if (dlr_mem_entry_match(dlr, smsc, ts, dst) == 0) {
-            list_delete(dlr_waiting_list, i, 1);
+            gwlist_delete(dlr_waiting_list, i, 1);
             dlr_entry_destroy(dlr);
             break;
         }
@@ -194,7 +194,7 @@
  */
 struct dlr_storage *dlr_init_mem(Cfg *cfg)
 {
-    dlr_waiting_list = list_create();
+    dlr_waiting_list = gwlist_create();
     gw_rwlock_init_static(&rwlock);
 
     return &handles;
diff -ur kannel-1.4.0/gw/dlr_mysql.c kannel-1.4.0.mod/gw/dlr_mysql.c
--- kannel-1.4.0/gw/dlr_mysql.c	2004-01-22 15:08:24.000000000 +0100
+++ kannel-1.4.0.mod/gw/dlr_mysql.c	2006-03-24 16:50:55.000000000 +0100
@@ -330,7 +330,7 @@
      */
 
      grplist = cfg_get_multi_group(cfg, octstr_imm("mysql-connection"));
-     while (grplist && (grp = list_extract_first(grplist)) != NULL) {
+     while (grplist && (grp = gwlist_extract_first(grplist)) != NULL) {
         p = cfg_get(grp, octstr_imm("id"));
         if (p != NULL && octstr_compare(p, mysql_id) == 0) {
             goto found;
@@ -342,7 +342,7 @@
 
 found:
     octstr_destroy(p);
-    list_destroy(grplist, NULL);
+    gwlist_destroy(grplist, NULL);
 
     if (cfg_get_integer(&pool_size, grp, octstr_imm("max-connections")) == -1 || pool_size == 0)
         pool_size = 1;
diff -ur kannel-1.4.0/gw/dlr_oracle.c kannel-1.4.0.mod/gw/dlr_oracle.c
--- kannel-1.4.0/gw/dlr_oracle.c	2004-03-20 20:48:22.000000000 +0100
+++ kannel-1.4.0.mod/gw/dlr_oracle.c	2006-03-24 16:50:55.000000000 +0100
@@ -106,12 +106,12 @@
     dbpool_conn_produce(conn);
     octstr_destroy(sql);
 
-    if (list_len(result) > 0) {
-        row = list_extract_first(result);
-        msgs = strtol(octstr_get_cstr(list_get(row,0)), NULL, 10);
-        list_destroy(row, octstr_destroy_item);
+    if (gwlist_len(result) > 0) {
+        row = gwlist_extract_first(result);
+        msgs = strtol(octstr_get_cstr(gwlist_get(row,0)), NULL, 10);
+        gwlist_destroy(row, octstr_destroy_item);
     }
-    list_destroy(result, NULL);
+    gwlist_destroy(result, NULL);
 
     return msgs;
 }
@@ -126,7 +126,7 @@
 {
     Octstr *sql, *os_mask;
     DBPoolConn *pconn;
-    List *binds = list_create();
+    List *binds = gwlist_create();
     debug("dlr.oracle", 0, "adding DLR entry into database");
 
     pconn = dbpool_conn_consume(pool);
@@ -144,14 +144,14 @@
                         fields->field_status);
     os_mask = octstr_format("%d", entry->mask);
     
-    list_append(binds, entry->smsc);         /* :1 */
-    list_append(binds, entry->timestamp);    /* :2 */
-    list_append(binds, entry->source);       /* :3 */
-    list_append(binds, entry->destination);  /* :4 */
-    list_append(binds, entry->service);      /* :5 */
-    list_append(binds, entry->url);          /* :6 */
-    list_append(binds, os_mask);             /* :7 */
-    list_append(binds, entry->boxc_id);      /* :8 */
+    gwlist_append(binds, entry->smsc);         /* :1 */
+    gwlist_append(binds, entry->timestamp);    /* :2 */
+    gwlist_append(binds, entry->source);       /* :3 */
+    gwlist_append(binds, entry->destination);  /* :4 */
+    gwlist_append(binds, entry->service);      /* :5 */
+    gwlist_append(binds, entry->url);          /* :6 */
+    gwlist_append(binds, os_mask);             /* :7 */
+    gwlist_append(binds, entry->boxc_id);      /* :8 */
 #if defined(DLR_TRACE)
     debug("dlr.oracle", 0, "sql: %s", octstr_get_cstr(sql));
 #endif
@@ -160,7 +160,7 @@
 
     dbpool_conn_produce(pconn);
     octstr_destroy(sql);
-    list_destroy(binds, NULL);
+    gwlist_destroy(binds, NULL);
     octstr_destroy(os_mask);
     dlr_entry_destroy(entry);
 }
@@ -169,7 +169,7 @@
 {
     Octstr *sql;
     DBPoolConn *pconn;
-    List *binds = list_create();
+    List *binds = gwlist_create();
 
     debug("dlr.oracle", 0, "removing DLR from database");
 
@@ -182,9 +182,9 @@
                         fields->table, fields->field_smsc,
                         fields->field_ts, fields->field_dst);
 
-    list_append(binds, (Octstr *)smsc);      /* :1 */
-    list_append(binds, (Octstr *)ts);        /* :2 */
-    list_append(binds, (Octstr *)dst);       /* :3 */
+    gwlist_append(binds, (Octstr *)smsc);      /* :1 */
+    gwlist_append(binds, (Octstr *)ts);        /* :2 */
+    gwlist_append(binds, (Octstr *)dst);       /* :3 */
 
 #if defined(DLR_TRACE)
     debug("dlr.oracle", 0, "sql: %s", octstr_get_cstr(sql));
@@ -194,7 +194,7 @@
         error(0, "DLR: ORACLE: Error while removing dlr entry for DST<%s>", octstr_get_cstr(dst));
 
     dbpool_conn_produce(pconn);
-    list_destroy(binds, NULL);
+    gwlist_destroy(binds, NULL);
     octstr_destroy(sql);
 }
 
@@ -204,7 +204,7 @@
     DBPoolConn *pconn;
     List *result = NULL, *row;
     struct dlr_entry *res = NULL;
-    List *binds = list_create();
+    List *binds = gwlist_create();
 
     pconn = dbpool_conn_consume(pool);
     if (pconn == NULL) /* should not happens, but sure is sure */
@@ -217,9 +217,9 @@
                         fields->table, fields->field_smsc,
                         fields->field_ts, fields->field_dst);
 
-    list_append(binds, (Octstr *)smsc);      /* :1 */
-    list_append(binds, (Octstr *)ts);        /* :2 */
-    list_append(binds, (Octstr *)dst);       /* :3 */
+    gwlist_append(binds, (Octstr *)smsc);      /* :1 */
+    gwlist_append(binds, (Octstr *)ts);        /* :2 */
+    gwlist_append(binds, (Octstr *)dst);       /* :3 */
 
 #if defined(DLR_TRACE)
     debug("dlr.oracle", 0, "sql: %s", octstr_get_cstr(sql));
@@ -230,13 +230,13 @@
         return NULL;
     }
     octstr_destroy(sql);
-    list_destroy(binds, NULL);
+    gwlist_destroy(binds, NULL);
     dbpool_conn_produce(pconn);
 
-#define LO2CSTR(r, i) octstr_get_cstr(list_get(r, i))
+#define LO2CSTR(r, i) octstr_get_cstr(gwlist_get(r, i))
 
-    if (list_len(result) > 0) {
-        row = list_extract_first(result);
+    if (gwlist_len(result) > 0) {
+        row = gwlist_extract_first(result);
         res = dlr_entry_create();
         gw_assert(res != NULL);
         res->mask = atoi(LO2CSTR(row,0));
@@ -245,10 +245,10 @@
         res->source = octstr_create(LO2CSTR(row, 3));
         res->destination = octstr_create(LO2CSTR(row, 4));
         res->boxc_id = octstr_create(LO2CSTR(row, 5));
-        list_destroy(row, octstr_destroy_item);
+        gwlist_destroy(row, octstr_destroy_item);
         res->smsc = octstr_duplicate(smsc);
     }
-    list_destroy(result, NULL);
+    gwlist_destroy(result, NULL);
 
 #undef LO2CSTR
 
@@ -259,7 +259,7 @@
 {
     Octstr *sql, *os_status;
     DBPoolConn *pconn;
-    List *binds = list_create();
+    List *binds = gwlist_create();
 
     debug("dlr.oracle", 0, "updating DLR status in database");
 
@@ -273,10 +273,10 @@
                         fields->field_smsc, fields->field_ts, fields->field_dst);
 
     os_status = octstr_format("%d", status);
-    list_append(binds, (Octstr *)os_status); /* :1 */
-    list_append(binds, (Octstr *)smsc);      /* :2 */
-    list_append(binds, (Octstr *)ts);        /* :3 */
-    list_append(binds, (Octstr *)dst);       /* :4 */
+    gwlist_append(binds, (Octstr *)os_status); /* :1 */
+    gwlist_append(binds, (Octstr *)smsc);      /* :2 */
+    gwlist_append(binds, (Octstr *)ts);        /* :3 */
+    gwlist_append(binds, (Octstr *)dst);       /* :4 */
 #if defined(DLR_TRACE)
     debug("dlr.oracle", 0, "sql: %s", octstr_get_cstr(sql));
 #endif
@@ -284,7 +284,7 @@
         error(0, "DLR: ORACLE: Error while updating dlr entry for DST<%s>", octstr_get_cstr(dst));
 
     dbpool_conn_produce(pconn);
-    list_destroy(binds, NULL);
+    gwlist_destroy(binds, NULL);
     octstr_destroy(os_status);
     octstr_destroy(sql);
 }
@@ -345,7 +345,7 @@
 
     grplist = cfg_get_multi_group(cfg, octstr_imm("oracle-connection"));
     found = 0;
-    while (grplist && (grp = list_extract_first(grplist)) != NULL) {
+    while (grplist && (grp = gwlist_extract_first(grplist)) != NULL) {
         Octstr *p = cfg_get(grp, octstr_imm("id"));
         if (p != NULL && octstr_compare(p, id) == 0) {
             found = 1;
@@ -353,7 +353,7 @@
         if (p != NULL) octstr_destroy(p);
         if (found == 1) break;
     }
-    list_destroy(grplist, NULL);
+    gwlist_destroy(grplist, NULL);
 
     if (found == 0)
         panic(0, "DLR: ORACLE: connection settings for id '%s' are not specified!",
diff -ur kannel-1.4.0/gw/dlr_pgsql.c kannel-1.4.0.mod/gw/dlr_pgsql.c
--- kannel-1.4.0/gw/dlr_pgsql.c	2004-06-09 12:06:33.000000000 +0200
+++ kannel-1.4.0.mod/gw/dlr_pgsql.c	2006-03-24 16:50:55.000000000 +0100
@@ -174,38 +174,38 @@
     result = pgsql_select(sql);
     octstr_destroy(sql);
 
-    if (result == NULL || list_len(result) < 1) {
+    if (result == NULL || gwlist_len(result) < 1) {
         debug("dlr.pgsql", 0, "no rows found");
-        while((row = list_extract_first(result)))
-            list_destroy(row, octstr_destroy_item);
-        list_destroy(result, NULL);
+        while((row = gwlist_extract_first(result)))
+            gwlist_destroy(row, octstr_destroy_item);
+        gwlist_destroy(result, NULL);
         return NULL;
     }
     
-    row = list_get(result, 0);
+    row = gwlist_get(result, 0);
 
     debug("dlr.pgsql", 0, "Found entry, col1=%s, col2=%s, col3=%s, col4=%s, col5=%s col6=%s",
-		    octstr_get_cstr(list_get(row, 0)),
-		    octstr_get_cstr(list_get(row, 1)),
-		    octstr_get_cstr(list_get(row, 2)),
-		    octstr_get_cstr(list_get(row, 3)),
-		    octstr_get_cstr(list_get(row, 4)),
-		    octstr_get_cstr(list_get(row, 5))
+		    octstr_get_cstr(gwlist_get(row, 0)),
+		    octstr_get_cstr(gwlist_get(row, 1)),
+		    octstr_get_cstr(gwlist_get(row, 2)),
+		    octstr_get_cstr(gwlist_get(row, 3)),
+		    octstr_get_cstr(gwlist_get(row, 4)),
+		    octstr_get_cstr(gwlist_get(row, 5))
 	 );
 
     res = dlr_entry_create();
     gw_assert(res != NULL);
-    res->mask        = atoi(octstr_get_cstr(list_get(row, 0)));
-    res->service     = octstr_duplicate(list_get(row, 1));
-    res->url         = octstr_duplicate(list_get(row, 2));
-    res->source      = octstr_duplicate(list_get(row, 3));
-    res->destination = octstr_duplicate(list_get(row, 4));
-    res->boxc_id     = octstr_duplicate(list_get(row, 5));
+    res->mask        = atoi(octstr_get_cstr(gwlist_get(row, 0)));
+    res->service     = octstr_duplicate(gwlist_get(row, 1));
+    res->url         = octstr_duplicate(gwlist_get(row, 2));
+    res->source      = octstr_duplicate(gwlist_get(row, 3));
+    res->destination = octstr_duplicate(gwlist_get(row, 4));
+    res->boxc_id     = octstr_duplicate(gwlist_get(row, 5));
     res->smsc        = octstr_duplicate(smsc);
 
-    while((row = list_extract_first(result)))
-        list_destroy(row, octstr_destroy_item);
-    list_destroy(result, NULL);
+    while((row = gwlist_extract_first(result)))
+        gwlist_destroy(row, octstr_destroy_item);
+    gwlist_destroy(result, NULL);
     
     return res;
 }
@@ -250,15 +250,15 @@
     res = pgsql_select(sql);
     octstr_destroy(sql);
 
-    if (res == NULL || list_len(res) < 1) {
+    if (res == NULL || gwlist_len(res) < 1) {
         error(0, "PGSQL: Could not get count of DLR table");
         ret = -1;
     } else {
-        ret = atol(octstr_get_cstr(list_get(list_get(res, 0), 0)));
+        ret = atol(octstr_get_cstr(gwlist_get(gwlist_get(res, 0), 0)));
     }
 
-    list_destroy(list_extract_first(res), octstr_destroy_item);
-    list_destroy(res, NULL);
+    gwlist_destroy(gwlist_extract_first(res), octstr_destroy_item);
+    gwlist_destroy(res, NULL);
         
     return ret;
 }
@@ -315,7 +315,7 @@
      */
 
      grplist = cfg_get_multi_group(cfg, octstr_imm("pgsql-connection"));
-     while (grplist && (grp = list_extract_first(grplist)) != NULL) {
+     while (grplist && (grp = gwlist_extract_first(grplist)) != NULL) {
         p = cfg_get(grp, octstr_imm("id"));
         if (p != NULL && octstr_compare(p, pgsql_id) == 0) {
             goto found;
@@ -327,7 +327,7 @@
 
 found:
     octstr_destroy(p);
-    list_destroy(grplist, NULL);
+    gwlist_destroy(grplist, NULL);
 
     if (cfg_get_integer(&pool_size, grp, octstr_imm("max-connections")) == -1 || pool_size == 0)
         pool_size = 1;
diff -ur kannel-1.4.0/gw/dlr_sdb.c kannel-1.4.0.mod/gw/dlr_sdb.c
--- kannel-1.4.0/gw/dlr_sdb.c	2004-05-18 15:04:20.000000000 +0200
+++ kannel-1.4.0.mod/gw/dlr_sdb.c	2006-03-24 16:50:55.000000000 +0100
@@ -391,7 +391,7 @@
      */
 
      grplist = cfg_get_multi_group(cfg, octstr_imm("sdb-connection"));
-     while (grplist && (grp = list_extract_first(grplist)) != NULL) {
+     while (grplist && (grp = gwlist_extract_first(grplist)) != NULL) {
         p = cfg_get(grp, octstr_imm("id"));
         if (p != NULL && octstr_compare(p, sdb_id) == 0) {
             goto found;
@@ -403,7 +403,7 @@
 
 found:
     octstr_destroy(p);
-    list_destroy(grplist, NULL);
+    gwlist_destroy(grplist, NULL);
 
     if (cfg_get_integer(&pool_size, grp, octstr_imm("max-connections")) == -1 || pool_size == 0)
         pool_size = 1;
diff -ur kannel-1.4.0/gw/heartbeat.c kannel-1.4.0.mod/gw/heartbeat.c
--- kannel-1.4.0/gw/heartbeat.c	2004-01-22 15:08:24.000000000 +0100
+++ kannel-1.4.0.mod/gw/heartbeat.c	2006-03-24 16:50:55.000000000 +0100
@@ -140,8 +140,8 @@
     info->thread = gwthread_create(heartbeat_thread, info);
     if (info->thread >= 0) {
 	if (heartbeats == NULL)
-	    heartbeats = list_create();
-	list_append(heartbeats, info);
+	    heartbeats = gwlist_create();
+	gwlist_append(heartbeats, info);
         return info->thread;
     } else {
         gw_free(info);
@@ -163,7 +163,7 @@
     struct hb_info *info;
 
     if (hb_thread == ALL_HEARTBEATS) {
-        while (NULL != (info = list_extract_first(heartbeats))) {
+        while (NULL != (info = gwlist_extract_first(heartbeats))) {
             gw_assert(info);
             info->running = 0;
             gwthread_wakeup(info->thread);
@@ -171,22 +171,22 @@
             gw_free(info);
         }
     } else {
-        matching_info = list_extract_matching(heartbeats, &hb_thread, find_hb);
+        matching_info = gwlist_extract_matching(heartbeats, &hb_thread, find_hb);
         if (matching_info == NULL) {
             warning(0, "Could not stop heartbeat %ld: not found.", hb_thread);
 	    return;
         }
-        gw_assert(list_len(matching_info) == 1);
-        info = list_extract_first(matching_info);
-        list_destroy(matching_info, NULL);
+        gw_assert(gwlist_len(matching_info) == 1);
+        info = gwlist_extract_first(matching_info);
+        gwlist_destroy(matching_info, NULL);
      
         info->running = 0;
         gwthread_wakeup(hb_thread);
         gwthread_join(hb_thread);
         gw_free(info);
     }
-    if (list_len(heartbeats) == 0) {
-        list_destroy(heartbeats, NULL);
+    if (gwlist_len(heartbeats) == 0) {
+        gwlist_destroy(heartbeats, NULL);
         heartbeats = NULL;
     }
 }
diff -ur kannel-1.4.0/gw/mime_decompiler.c kannel-1.4.0.mod/gw/mime_decompiler.c
--- kannel-1.4.0/gw/mime_decompiler.c	2004-01-22 15:08:24.000000000 +0100
+++ kannel-1.4.0.mod/gw/mime_decompiler.c	2006-03-24 16:50:55.000000000 +0100
@@ -121,7 +121,7 @@
 
     while(parse_octets_left(context) > 0) {
         Octstr *headers, *data;
-        List *list_headers;
+        List *gwlist_headers;
         i++;
     
         octstr_append(*mime, octstr_imm("--"));
@@ -134,9 +134,9 @@
                          "data length <0x%02lx>", i, headers_len, data_len);
 
         if((headers = parse_get_octets(context, headers_len)) != NULL) {
-            list_headers = wsp_headers_unpack(headers, 1);
-            for(j=0; j<list_len(list_headers);j++) {
-                octstr_append(*mime, list_get(list_headers, j));
+            gwlist_headers = wsp_headers_unpack(headers, 1);
+            for(j=0; j<gwlist_len(gwlist_headers);j++) {
+                octstr_append(*mime, gwlist_get(gwlist_headers, j));
                 octstr_append(*mime, octstr_imm("\n"));
             }
         } else {
diff -ur kannel-1.4.0/gw/msg.h kannel-1.4.0.mod/gw/msg.h
--- kannel-1.4.0/gw/msg.h	2004-08-28 20:09:19.000000000 +0200
+++ kannel-1.4.0.mod/gw/msg.h	2006-03-24 16:50:55.000000000 +0100
@@ -151,7 +151,7 @@
 
 /*
  * Destroy an Msg object. Wrapper around msg_destroy to make it suitable for
- * list_destroy.
+ * gwlist_destroy.
  */
 void msg_destroy_item(void *msg);
 
diff -ur kannel-1.4.0/gw/numhash.c kannel-1.4.0.mod/gw/numhash.c
--- kannel-1.4.0/gw/numhash.c	2004-01-22 15:08:24.000000000 +0100
+++ kannel-1.4.0.mod/gw/numhash.c	2006-03-24 16:50:55.000000000 +0100
@@ -316,12 +316,12 @@
     Numhash	*table;
 
     url = octstr_create(seek_url);
-    request_headers = list_create();
+    request_headers = gwlist_create();
     status = http_get_real(HTTP_METHOD_GET, url, request_headers, &final_url,
 			    &reply_headers, &reply_body);
     octstr_destroy(url);
     octstr_destroy(final_url);
-    list_destroy(request_headers, NULL);
+    gwlist_destroy(request_headers, NULL);
 
     if (status != HTTP_OK) {
 	http_destroy_headers(reply_headers);
diff -ur kannel-1.4.0/gw/sms.c kannel-1.4.0.mod/gw/sms.c
--- kannel-1.4.0/gw/sms.c	2004-09-08 12:54:06.000000000 +0200
+++ kannel-1.4.0.mod/gw/sms.c	2006-03-24 16:50:55.000000000 +0100
@@ -334,7 +334,7 @@
 
     temp = msg_duplicate(orig);
     msgno = 0;
-    list = list_create();
+    list = gwlist_create();
 
     do {
         msgno++;
@@ -369,14 +369,14 @@
             octstr_append(part->sms.msgdata, footer);
         if (!last && nonlast_suffix)
             octstr_append(part->sms.msgdata, nonlast_suffix);
-        list_append(list, part);
+        gwlist_append(list, part);
     } while (!last);
 
     total_messages = msgno;
     msg_destroy(temp);
     if (catenate && total_messages > 1) {
         for (msgno = 1; msgno <= total_messages; msgno++) {
-            part = list_get(list, msgno - 1);
+            part = gwlist_get(list, msgno - 1);
             prepend_catenation_udh(part, msgno, total_messages, msg_sequence);
         }
     }
diff -ur kannel-1.4.0/gw/smsbox.c kannel-1.4.0.mod/gw/smsbox.c
--- kannel-1.4.0/gw/smsbox.c	2004-09-03 14:42:33.000000000 +0200
+++ kannel-1.4.0.mod/gw/smsbox.c	2006-03-24 17:05:23.000000000 +0100
@@ -187,7 +187,7 @@
 	    if (total == 0)
 		start = time(NULL);
 	    total++;
-	    list_produce(smsbox_requests, msg);
+	    gwlist_produce(smsbox_requests, msg);
 	} else if (msg_type(msg) == ack) {
 	    /*
 	     * do nothing for now. Later we will handle this
@@ -290,7 +290,7 @@
 
     list = sms_split(msg, header, footer, suffix, split_chars, catenate,
     	    	     msg_sequence, max_msgs, sms_max_length);
-    msg_count = list_len(list);
+    msg_count = gwlist_len(list);
     
     debug("sms", 0, "message length %ld, sending %ld messages",
           octstr_len(msg->sms.msgdata), msg_count);
@@ -304,18 +304,18 @@
     if (catenate) {
         Msg *new_msg = msg_duplicate(msg);
         octstr_delete(new_msg->sms.msgdata, 0, octstr_len(new_msg->sms.msgdata));
-        while((part = list_extract_first(list)) != NULL) {
+        while((part = gwlist_extract_first(list)) != NULL) {
             octstr_append(new_msg->sms.msgdata, part->sms.msgdata);
             msg_destroy(part);
         }
         write_to_bearerbox(new_msg);
     } else {
         /* msgs are the independed parts so sent those as is */
-        while ((part = list_extract_first(list)) != NULL)
+        while ((part = gwlist_extract_first(list)) != NULL)
             write_to_bearerbox(part);
     }
     
-    list_destroy(list, NULL);
+    gwlist_destroy(list, NULL);
 
     return msg_count;
 }
@@ -445,7 +445,7 @@
     Octstr *name, *val;
     long l;
 
-    for(l=0; l<list_len(headers); l++) {
+    for(l=0; l<gwlist_len(headers); l++) {
 	http_header_get(headers, l, &name, &val);
 
 	if (octstr_case_compare(name, octstr_imm("X-Kannel-From")) == 0) {
@@ -620,11 +620,11 @@
 
     if(requesttype == mt_push) {
 	/* to (da/number) Multiple tags */ 
-	*tolist = list_create();
+	*tolist = gwlist_create();
 	where = get_tag(*body, octstr_imm("da"), &tmp, 0, 0);
 	if(tmp) {
 	    get_tag(tmp, octstr_imm("number"), to, 0, 0);
-	    list_append(*tolist, octstr_duplicate(*to));
+	    gwlist_append(*tolist, octstr_duplicate(*to));
 	    O_DESTROY(*to);
 
 	    while(tmp && where != -1) {
@@ -633,7 +633,7 @@
 		if(tmp) {
 		    get_tag(tmp, octstr_imm("number"), &tmp2, 0, 0);
 		    if(tmp2 != NULL) {
-			list_append(*tolist, octstr_duplicate(tmp2));
+			gwlist_append(*tolist, octstr_duplicate(tmp2));
 			O_DESTROY(tmp2);
 		    }
 		}
@@ -979,7 +979,7 @@
     unsigned long retries;
     int method;
 
-    while ((id = list_consume(smsbox_http_requests)) != NULL) {
+    while ((id = gwlist_consume(smsbox_http_requests)) != NULL) {
         /*
          * Sleep for a while in order not to block other operting requests.
          * Defaults to 10 sec. if not given via http-queue-delay directive in
@@ -989,7 +989,7 @@
             gwthread_sleep(http_queue_delay);
 
         debug("sms.http",0,"HTTP: Queue contains %ld outstanding requests",
-              list_len(smsbox_http_requests));
+              gwlist_len(smsbox_http_requests));
 
         /*
          * Get all required HTTP request data from the queue and reconstruct
@@ -1112,7 +1112,7 @@
             octstr_destroy(type);
         } else if (max_http_retries > retries) {
             id = remember_receiver(msg, trans, method, req_url, req_headers, req_body, retries);
-            list_produce(smsbox_http_requests, id);
+            gwlist_produce(smsbox_http_requests, id);
             queued++;
             goto requeued;
         } else
@@ -1583,7 +1583,7 @@
     Octstr *p;
     int ret, dreport=0;
 
-    while ((msg = list_consume(smsbox_requests)) != NULL) {
+    while ((msg = gwlist_consume(smsbox_requests)) != NULL) {
 	if (msg->sms.sms_type == report_mo)
 	    dreport = 1;
 	else
@@ -1900,7 +1900,7 @@
     if(receiver == NULL) {
         receiver = octstr_split_words(to);
     }
-    no_recv = list_len(receiver);
+    no_recv = gwlist_len(receiver);
 
     /*
      * check if UDH length is legal, or otherwise discard the
@@ -1923,11 +1923,11 @@
      * least all allowed receiver messages. This is a constrain
      * walk through all disallowing rules within the lists.
      */
-    allowed = list_create();
-    denied = list_create();
+    allowed = gwlist_create();
+    denied = gwlist_create();
 
     for (i = 0; i < no_recv; i++) {
-        receiv = list_get(receiver, i); 
+        receiv = gwlist_get(receiver, i); 
             
 	/*
 	 * Check if there are any illegal characters in the 'to' scheme
@@ -1935,7 +1935,7 @@
 	if (strspn(octstr_get_cstr(receiv), sendsms_number_chars) < octstr_len(receiv)) {
 	    info(0,"Illegal characters in 'to' string ('%s') vs '%s'",
 		octstr_get_cstr(receiv), sendsms_number_chars);
-            list_append_unique(denied, receiv, octstr_item_match);
+            gwlist_append_unique(denied, receiv, octstr_item_match);
 	}
 
         /*
@@ -1946,36 +1946,36 @@
             numhash_find_number(urltrans_white_list(t), receiv) < 1) {
             info(0, "Number <%s> is not in white-list, message discarded",
                  octstr_get_cstr(receiv));
-            list_append_unique(denied, receiv, octstr_item_match);
+            gwlist_append_unique(denied, receiv, octstr_item_match);
         } else {
-            list_append_unique(allowed, receiv, octstr_item_match);
+            gwlist_append_unique(allowed, receiv, octstr_item_match);
         }
 
         if (urltrans_white_list_regex(t) &&
                 gw_regex_matches(urltrans_white_list_regex(t), receiv) == NO_MATCH) {
             info(0, "Number <%s> is not in white-list-regex, message discarded",
                  octstr_get_cstr(receiv));
-            list_append_unique(denied, receiv, octstr_item_match);
+            gwlist_append_unique(denied, receiv, octstr_item_match);
         } else {
-            list_append_unique(allowed, receiv, octstr_item_match);
+            gwlist_append_unique(allowed, receiv, octstr_item_match);
         }
         
         if (urltrans_black_list(t) &&
             numhash_find_number(urltrans_black_list(t), receiv) == 1) {
             info(0, "Number <%s> is in black-list, message discarded",
                  octstr_get_cstr(receiv));
-            list_append_unique(denied, receiv, octstr_item_match);
+            gwlist_append_unique(denied, receiv, octstr_item_match);
         } else {
-            list_append_unique(allowed, receiv, octstr_item_match);
+            gwlist_append_unique(allowed, receiv, octstr_item_match);
         }
 
         if (urltrans_black_list_regex(t) &&
                 gw_regex_matches(urltrans_black_list_regex(t), receiv) == MATCH) {
             info(0, "Number <%s> is in black-list-regex, message discarded",
                  octstr_get_cstr(receiv));
-            list_append_unique(denied, receiv, octstr_item_match);
+            gwlist_append_unique(denied, receiv, octstr_item_match);
         } else {
-            list_append_unique(allowed, receiv, octstr_item_match);
+            gwlist_append_unique(allowed, receiv, octstr_item_match);
         }
         
 
@@ -1983,36 +1983,36 @@
             numhash_find_number(white_list, receiv) < 1) {
             info(0, "Number <%s> is not in global white-list, message discarded",
                  octstr_get_cstr(receiv));
-            list_append_unique(denied, receiv, octstr_item_match);
+            gwlist_append_unique(denied, receiv, octstr_item_match);
         } else {
-            list_append_unique(allowed, receiv, octstr_item_match);
+            gwlist_append_unique(allowed, receiv, octstr_item_match);
         }
 
         if (white_list_regex &&
             gw_regex_matches(white_list_regex, receiv) == NO_MATCH) {
             info(0, "Number <%s> is not in global white-list-regex, message discarded",
                  octstr_get_cstr(receiv));
-            list_append_unique(denied, receiv, octstr_item_match);
+            gwlist_append_unique(denied, receiv, octstr_item_match);
         } else {
-            list_append_unique(allowed, receiv, octstr_item_match);
+            gwlist_append_unique(allowed, receiv, octstr_item_match);
         }
 
         if (black_list &&
             numhash_find_number(black_list, receiv) == 1) {
             info(0, "Number <%s> is in global black-list, message discarded",
                  octstr_get_cstr(receiv));
-            list_append_unique(denied, receiv, octstr_item_match);
+            gwlist_append_unique(denied, receiv, octstr_item_match);
         } else {
-            list_append_unique(allowed, receiv, octstr_item_match);
+            gwlist_append_unique(allowed, receiv, octstr_item_match);
         }
 
         if (black_list_regex &&
             gw_regex_matches(black_list_regex, receiv) == MATCH) {
             info(0, "Number <%s> is in global black-list-regex, message discarded",
                  octstr_get_cstr(receiv));
-            list_append_unique(denied, receiv, octstr_item_match);
+            gwlist_append_unique(denied, receiv, octstr_item_match);
         } else {
-            list_append_unique(allowed, receiv, octstr_item_match);
+            gwlist_append_unique(allowed, receiv, octstr_item_match);
         }
     }
     
@@ -2021,9 +2021,9 @@
      * the 'denied' list and check if items are also present in 'allowed',
      * then we will discard them from 'allowed'.
      */
-    for (i = 0; i < list_len(denied); i++) {
-        receiv = list_get(denied, i);
-        del = list_delete_matching(allowed, receiv, octstr_item_match);
+    for (i = 0; i < gwlist_len(denied); i++) {
+        receiv = gwlist_get(denied, i);
+        del = gwlist_delete_matching(allowed, receiv, octstr_item_match);
     }
 
     if (urltrans_faked_sender(t) != NULL) {
@@ -2208,9 +2208,9 @@
      * number of receivers within 'to'. If the message fails append
      * it to 'failed_id'.
      */
-    failed_id = list_create();
+    failed_id = gwlist_create();
 
-    while ((receiv = list_extract_first(allowed)) != NULL) {
+    while ((receiv = gwlist_extract_first(allowed)) != NULL) {
 
 	O_DESTROY(msg->sms.receiver);
         msg->sms.receiver = octstr_duplicate(receiv);
@@ -2221,7 +2221,7 @@
 
         if (ret == -1) {
             /* add the receiver to the failed list */
-            list_append(failed_id, receiv);
+            gwlist_append(failed_id, receiv);
         } else {
             /* log the sending as successful for this particular message */
             alog("send-SMS request added - sender:%s:%s %s target:%s request: '%s'",
@@ -2232,19 +2232,19 @@
         }
     }
     msg_destroy(msg);
-    list_destroy(receiver, octstr_destroy_item);
-    list_destroy(allowed, octstr_destroy_item);
+    gwlist_destroy(receiver, octstr_destroy_item);
+    gwlist_destroy(allowed, octstr_destroy_item);
 
     /* have all receivers been denied by list rules?! */
-    if (no_recv == list_len(denied)) {
+    if (no_recv == gwlist_len(denied)) {
         returnerror = octstr_create("Number(s) has/have been denied by white- and/or black-lists.");
         goto fielderror2;
     }
 
-    if (list_len(failed_id) > 0)
+    if (gwlist_len(failed_id) > 0)
 	goto error;
     
-    list_destroy(failed_id, octstr_destroy_item);
+    gwlist_destroy(failed_id, octstr_destroy_item);
     octstr_destroy(newfrom);
     *status = HTTP_ACCEPTED;
     returnerror = octstr_create("Sent.");
@@ -2253,13 +2253,13 @@
      * Append all denied receivers to the returned body in case this is
      * a multi-cast send request
      */
-    if (list_len(denied) > 0) {
+    if (gwlist_len(denied) > 0) {
         octstr_format_append(returnerror, " Denied receivers are:");
-        while ((receiv = list_extract_first(denied)) != NULL) {
+        while ((receiv = gwlist_extract_first(denied)) != NULL) {
             octstr_format_append(returnerror, " %s", octstr_get_cstr(receiv));
         }
     }               
-    list_destroy(denied, octstr_destroy_item);  
+    gwlist_destroy(denied, octstr_destroy_item);  
 
     /*
      * Append number of splits to returned body. 
@@ -2294,14 +2294,14 @@
      */
     if (no_recv > 1) {
         octstr_format_append(returnerror, " Failed receivers are:");
-        while ((receiv = list_extract_first(failed_id)) != NULL) {
+        while ((receiv = gwlist_extract_first(failed_id)) != NULL) {
             octstr_format_append(returnerror, " %s", octstr_get_cstr(receiv));
         }
     }
 
     octstr_destroy(receiv); 
-    list_destroy(failed_id, octstr_destroy_item);
-    list_destroy(denied, octstr_destroy_item);
+    gwlist_destroy(failed_id, octstr_destroy_item);
+    gwlist_destroy(denied, octstr_destroy_item);
     return returnerror;
 }
 
@@ -2778,7 +2778,7 @@
         id = http_cgi_variable(list, "otaid");
     
         grplist = cfg_get_multi_group(cfg, octstr_imm("ota-setting"));
-        while (grplist && (grp = list_extract_first(grplist)) != NULL) {
+        while (grplist && (grp = gwlist_extract_first(grplist)) != NULL) {
             p = cfg_get(grp, octstr_imm("ota-id"));
             if (id == NULL || (p != NULL && octstr_compare(p, id) == 0)) {
                 ota_type = 1;
@@ -2786,10 +2786,10 @@
             }
             octstr_destroy(p);
         }
-        list_destroy(grplist, NULL);
+        gwlist_destroy(grplist, NULL);
         
         grplist = cfg_get_multi_group(cfg, octstr_imm("ota-bookmark"));
-        while (grplist && (grp = list_extract_first(grplist)) != NULL) {
+        while (grplist && (grp = gwlist_extract_first(grplist)) != NULL) {
             p = cfg_get(grp, octstr_imm("ota-id"));
             if (id == NULL || (p != NULL && octstr_compare(p, id) == 0)) {
                 ota_type = 0;             
@@ -2797,7 +2797,7 @@
             }
             octstr_destroy(p);
         }
-        list_destroy(grplist, NULL);
+        gwlist_destroy(grplist, NULL);
         
         if (id != NULL)
             error(0, "%s can't find any ota-setting or ota-bookmark group with ota-id '%s'.", 
@@ -2811,7 +2811,7 @@
     
 found:
     octstr_destroy(p);
-    list_destroy(grplist, NULL);
+    gwlist_destroy(grplist, NULL);
 
     /* tokenize the OTA settings or bookmarks group and return the message */
     if (ota_type)
@@ -2882,7 +2882,7 @@
     /* 
      * process all special HTTP headers 
      */
-    for (l = 0; l < list_len(headers); l++) {
+    for (l = 0; l < gwlist_len(headers); l++) {
     http_header_get(headers, l, &name, &val);
 
 	if (octstr_case_compare(name, octstr_imm("X-Kannel-OTA-ID")) == 0) {
@@ -3355,7 +3355,7 @@
     octstr_destroy(http_proxy_host);
     octstr_destroy(http_proxy_username);
     octstr_destroy(http_proxy_password);
-    list_destroy(http_proxy_exceptions, octstr_destroy_item);
+    gwlist_destroy(http_proxy_exceptions, octstr_destroy_item);
 
     return cfg;
 }
@@ -3412,10 +3412,10 @@
 	panic(0, "urltrans_add_cfg failed");
 
     caller = http_caller_create();
-    smsbox_requests = list_create();
-    smsbox_http_requests = list_create();
-    list_add_producer(smsbox_requests);
-    list_add_producer(smsbox_http_requests);
+    smsbox_requests = gwlist_create();
+    smsbox_http_requests = gwlist_create();
+    gwlist_add_producer(smsbox_requests);
+    gwlist_add_producer(smsbox_http_requests);
     num_outstanding_requests = counter_create();
     catenated_sms_counter = counter_create();
     gwthread_create(obey_request_thread, NULL);
@@ -3438,8 +3438,8 @@
     heartbeat_stop(ALL_HEARTBEATS);
     http_close_all_ports();
     gwthread_join_every(sendsms_thread);
-    list_remove_producer(smsbox_requests);
-    list_remove_producer(smsbox_http_requests);
+    gwlist_remove_producer(smsbox_requests);
+    gwlist_remove_producer(smsbox_http_requests);
     gwthread_join_every(obey_request_thread);
     http_caller_signal_shutdown(caller);
     gwthread_join_every(url_result_thread);
@@ -3448,10 +3448,10 @@
     close_connection_to_bearerbox();
     alog_close();
     urltrans_destroy(translations);
-    gw_assert(list_len(smsbox_requests) == 0);
-    gw_assert(list_len(smsbox_http_requests) == 0);
-    list_destroy(smsbox_requests, NULL);
-    list_destroy(smsbox_http_requests, NULL);
+    gw_assert(gwlist_len(smsbox_requests) == 0);
+    gw_assert(gwlist_len(smsbox_http_requests) == 0);
+    gwlist_destroy(smsbox_requests, NULL);
+    gwlist_destroy(smsbox_http_requests, NULL);
     http_caller_destroy(caller);
     counter_destroy(num_outstanding_requests);
     counter_destroy(catenated_sms_counter);
diff -ur kannel-1.4.0/gw/smsc/smsc_at.c kannel-1.4.0.mod/gw/smsc/smsc_at.c
--- kannel-1.4.0/gw/smsc/smsc_at.c	2004-09-18 00:20:50.000000000 +0200
+++ kannel-1.4.0.mod/gw/smsc/smsc_at.c	2006-03-24 16:50:55.000000000 +0100
@@ -530,10 +530,10 @@
         }
         vals = octstr_split(ts, octstr_imm(","));
         octstr_destroy(ts);
-        ts = list_search(vals, octstr_imm("1"), (void*) octstr_item_match);
+        ts = gwlist_search(vals, octstr_imm("1"), (void*) octstr_item_match);
         if (ts)
             privdata->phase2plus = 1;
-        list_destroy(vals, octstr_destroy_item);
+        gwlist_destroy(vals, octstr_destroy_item);
     }
     if (privdata->phase2plus) {
         info(0, "AT2[%s]: Phase 2+ is supported", octstr_get_cstr(privdata->name));
@@ -628,7 +628,7 @@
 		   put it in the pending_incoming_messages queue for later retrieval
 		*/
                 debug("bb.smsc.at2", 0, "AT2[%s]: +CMTI incoming SMS indication: %s", octstr_get_cstr(privdata->name), octstr_get_cstr(line));
-                list_append(privdata->pending_incoming_messages, line);
+                gwlist_append(privdata->pending_incoming_messages, line);
                 line = NULL;
                 continue;
             }
@@ -765,12 +765,12 @@
     if (privdata->modem->message_storage) {
 	    current_storage = octstr_duplicate(privdata->modem->message_storage);
     }
-    while (list_len(privdata->pending_incoming_messages) > 0) {
+    while (gwlist_len(privdata->pending_incoming_messages) > 0) {
         int pos;
         long location;
         Octstr *cmti_storage = NULL, *line = NULL;
         
-        line = list_extract_first(privdata->pending_incoming_messages);
+        line = gwlist_extract_first(privdata->pending_incoming_messages);
 	/* message memory starts after the first quote in the string */
         if ((pos = octstr_search_char(line, '"', 0)) != -1) {
             /* grab memory storage name */
@@ -885,7 +885,7 @@
 
 	    /* if (meanwhile) there are pending CMTI notifications, process these first
 	     * to not let CMTI and sim buffering sit in each others way */
-	    while (list_len(privdata->pending_incoming_messages) > 0) {
+	    while (gwlist_len(privdata->pending_incoming_messages) > 0) {
 		    at2_read_pending_incoming_messages(privdata);
 	    }
 	    /* read the message and delete it */
@@ -1121,7 +1121,7 @@
         } else
             at2_wait_modem_command(privdata, 1, 0, NULL);
 
-	while (list_len(privdata->pending_incoming_messages) > 0) {
+	while (gwlist_len(privdata->pending_incoming_messages) > 0) {
 		at2_read_pending_incoming_messages(privdata);
 	}
 
@@ -1162,7 +1162,7 @@
     octstr_destroy(privdata->name);
     octstr_destroy(privdata->configfile);
     gw_prioqueue_destroy(privdata->outgoing_queue, NULL);
-    list_destroy(privdata->pending_incoming_messages, octstr_destroy_item);
+    gwlist_destroy(privdata->pending_incoming_messages, octstr_destroy_item);
     gw_free(conn->data);
     conn->data = NULL;
     mutex_lock(conn->flow_mutex);
@@ -1251,7 +1251,7 @@
 
     privdata = gw_malloc(sizeof(PrivAT2data));
     privdata->outgoing_queue = gw_prioqueue_create(sms_priority_compare);
-    privdata->pending_incoming_messages = list_create();
+    privdata->pending_incoming_messages = gwlist_create();
 
     privdata->configfile = cfg_get_configfile(cfg);
 
@@ -2275,10 +2275,10 @@
         }
         vals = octstr_split(ts, octstr_imm(","));
         octstr_destroy(ts);
-        ts = list_search(vals, octstr_imm("1"), (void*) octstr_item_match);
+        ts = gwlist_search(vals, octstr_imm("1"), (void*) octstr_item_match);
         if (ts)
             privdata->phase2plus = 1;
-        list_destroy(vals, octstr_destroy_item);
+        gwlist_destroy(vals, octstr_destroy_item);
     }
     if (privdata->phase2plus)
         info(0, "AT2[%s]: Phase 2+ is supported", octstr_get_cstr(privdata->name));
@@ -2314,13 +2314,13 @@
     grplist = cfg_get_multi_group(cfg, octstr_imm("modems"));
     if (idnumber == 0)
         debug("bb.smsc.at2", 0, "AT2[%s]: Found <%ld> modems in config", 
-              octstr_get_cstr(privdata->name), list_len(grplist));
+              octstr_get_cstr(privdata->name), gwlist_len(grplist));
 
     if (grplist == NULL)
         panic(0, "Where are the modem definitions ?!?!");
 
     grp = NULL;
-    while (grplist && (grp = list_extract_first(grplist)) != NULL) {
+    while (grplist && (grp = gwlist_extract_first(grplist)) != NULL) {
         p = cfg_get(grp, octstr_imm("id"));
         if (p == NULL) {
             info(0, "Modems group without id, bad");
@@ -2341,7 +2341,7 @@
         grp = NULL;
     }
     if (grplist != NULL)
-        list_destroy(grplist, NULL);
+        gwlist_destroy(grplist, NULL);
 
     if (grp != NULL) {
         modem = gw_malloc(sizeof(ModemDef));
diff -ur kannel-1.4.0/gw/smsc/smsc_cgw.c kannel-1.4.0.mod/gw/smsc/smsc_cgw.c
--- kannel-1.4.0/gw/smsc/smsc_cgw.c	2004-02-16 20:41:26.000000000 +0100
+++ kannel-1.4.0.mod/gw/smsc/smsc_cgw.c	2006-03-24 16:50:55.000000000 +0100
@@ -436,7 +436,7 @@
     int i;
 
     privdata = gw_malloc(sizeof(PrivData));
-    privdata->outgoing_queue = list_create();
+    privdata->outgoing_queue = gwlist_create();
     privdata->listening_socket = -1;
 
     if (cfg_get_integer(&portno, cfg, octstr_imm("port")) == -1)
@@ -526,7 +526,7 @@
 error:
     error(0, "Failed to create CGW smsc connection");
     if (privdata != NULL)
-        list_destroy(privdata->outgoing_queue, NULL);
+        gwlist_destroy(privdata->outgoing_queue, NULL);
 
     gw_free(privdata);
     octstr_destroy(host);
@@ -552,7 +552,7 @@
     Msg *copy;
 
     copy = msg_duplicate(sms);
-    list_produce(privdata->outgoing_queue, copy);
+    gwlist_produce(privdata->outgoing_queue, copy);
     gwthread_wakeup(privdata->sender_thread);
 
     return 0;
@@ -574,7 +574,7 @@
 
     if (finish_sending == 0) {
         Msg *msg;
-        while ((msg = list_extract_first(privdata->outgoing_queue)) != NULL) {
+        while ((msg = gwlist_extract_first(privdata->outgoing_queue)) != NULL) {
             bb_smscconn_send_failed(conn, msg, SMSCCONN_FAILED_SHUTDOWN, NULL);
         }
     }
@@ -599,7 +599,7 @@
 static long cgw_queued_cb(SMSCConn *conn)
 {
     PrivData *privdata = conn->data;
-    long ret = list_len(privdata->outgoing_queue);
+    long ret = gwlist_len(privdata->outgoing_queue);
 
     /* use internal queue as load, maybe something else later */
 
@@ -641,7 +641,7 @@
             bb_smscconn_connected(conn);
         } else {
 	    ret = 0;
-            l = list_len(privdata->outgoing_queue);
+            l = gwlist_len(privdata->outgoing_queue);
             if (l > 0)
                ret = cgw_send_loop(conn, server);     /* send any messages in queue */
 
@@ -658,13 +658,13 @@
 
     conn_destroy(server);
 
-    while ((msg = list_extract_first(privdata->outgoing_queue)) != NULL)
+    while ((msg = gwlist_extract_first(privdata->outgoing_queue)) != NULL)
         bb_smscconn_send_failed(conn, msg, SMSCCONN_FAILED_SHUTDOWN, NULL);
     mutex_lock(conn->flow_mutex);
 
     conn->status = SMSCCONN_DEAD;
 
-    list_destroy(privdata->outgoing_queue, NULL);
+    gwlist_destroy(privdata->outgoing_queue, NULL);
     octstr_destroy(privdata->host);
     octstr_destroy(privdata->allow_ip);
     octstr_destroy(privdata->deny_ip);
@@ -698,7 +698,7 @@
                 conn->status = SMSCCONN_RECONNECTING;
                 mutex_unlock(conn->flow_mutex);
             }
-            while ((msg = list_extract_first(privdata->outgoing_queue)))
+            while ((msg = gwlist_extract_first(privdata->outgoing_queue)))
                 bb_smscconn_send_failed(conn, msg, SMSCCONN_FAILED_TEMPORARILY, NULL);
             info(0, "smsc_cgw: waiting for %d minutes before trying to connect again", wait);
             gwthread_sleep(wait * 60);
@@ -744,7 +744,7 @@
     int firsttrn;
 
     /* Send messages in queue */
-    while ((msg = list_extract_first(privdata->outgoing_queue)) != NULL) {
+    while ((msg = gwlist_extract_first(privdata->outgoing_queue)) != NULL) {
         firsttrn = privdata->nexttrn;
         while (privdata->sendtime[privdata->nexttrn] != 0) { 
             if (++privdata->nexttrn >= CGW_TRN_MAX) privdata->nexttrn = 0;    
@@ -753,7 +753,7 @@
 		 * haven't been acked. In this case, increase size of 
                  * CGW_TRN_MAX */
                 info(0, "cgw: Saturated, increase size of CGW_TRN_MAX!");
-                list_produce(privdata->outgoing_queue, msg);
+                gwlist_produce(privdata->outgoing_queue, msg);
                 return 1;     /* re-insert, and go check for acks */
             }
         }
@@ -798,7 +798,7 @@
                 privdata->unacked--;
                 warning(0, "smsc_cgw: received neither OK nor ERR for message %d "
                         "in %d seconds, resending message", i, privdata->waitack);
-                list_produce(privdata->outgoing_queue, privdata->sendmsg[i]);
+                gwlist_produce(privdata->outgoing_queue, privdata->sendmsg[i]);
             }
     }
 }
diff -ur kannel-1.4.0/gw/smsc/smsc_cimd2.c kannel-1.4.0.mod/gw/smsc/smsc_cimd2.c
--- kannel-1.4.0/gw/smsc/smsc_cimd2.c	2004-06-21 23:16:06.000000000 +0200
+++ kannel-1.4.0.mod/gw/smsc/smsc_cimd2.c	2006-03-24 16:50:55.000000000 +0100
@@ -1689,12 +1689,12 @@
         if (request->operation == DELIVER_STATUS_REPORT) {
             message = cimd2_accept_delivery_report_message(request, conn);
             if (message)
-                list_append(pdata->received, message);
+                gwlist_append(pdata->received, message);
         }
         else if (request->operation == DELIVER_MESSAGE) {
             message = cimd2_accept_message(request,conn);
             if (message)
-                list_append(pdata->received, message);
+                gwlist_append(pdata->received, message);
         }
     }
 
@@ -1939,15 +1939,15 @@
     octstr_destroy(pdata->inbuffer);
     octstr_destroy(pdata->my_number);
 
-    discarded = list_len(pdata->received);
+    discarded = gwlist_len(pdata->received);
     if (discarded > 0)
         warning(0, "CIMD2[%s]: discarded %d received messages",
                 octstr_get_cstr(pdata->conn->id), 
                 discarded);
 
-    list_destroy(pdata->received, msg_destroy_item);
-    list_destroy(pdata->outgoing_queue, NULL);
-    list_destroy(pdata->stopped, NULL);
+    gwlist_destroy(pdata->received, msg_destroy_item);
+    gwlist_destroy(pdata->outgoing_queue, NULL);
+    gwlist_destroy(pdata->stopped, NULL);
 
     gw_free(pdata);
 }
@@ -2007,8 +2007,8 @@
 
     gw_assert(pdata != NULL);
 
-    if (list_len(pdata->received) > 0) {
-        *msg = list_consume(pdata->received);
+    if (gwlist_len(pdata->received) > 0) {
+        *msg = gwlist_consume(pdata->received);
         return 1;
     }
 
@@ -2072,8 +2072,8 @@
         packet_destroy(packet);
     }
 
-    if (list_len(pdata->received) > 0) {
-	*msg = list_consume(pdata->received);
+    if (gwlist_len(pdata->received) > 0) {
+	*msg = gwlist_consume(pdata->received);
         return 1;
     }
     return 0;
@@ -2172,7 +2172,7 @@
     /* remove messages from SMSC until we are killed */
     while (!pdata->quitting) {
     
-        list_consume(pdata->stopped); /* block here if suspended/isolated */
+        gwlist_consume(pdata->stopped); /* block here if suspended/isolated */
       
         /* check that connection is active */
         if (conn->status != SMSCCONN_ACTIVE) {
@@ -2206,7 +2206,7 @@
  
         /* send messages */
         do {
-            msg = list_extract_first(pdata->outgoing_queue);
+            msg = gwlist_extract_first(pdata->outgoing_queue);
             if (msg) {
                 sleep = 0;
                 if (cimd2_submit_msg(conn,msg) != 0) break;
@@ -2240,7 +2240,7 @@
     Msg *copy;
 
     copy = msg_duplicate(sms);
-    list_produce(pdata->outgoing_queue, copy);
+    gwlist_produce(pdata->outgoing_queue, copy);
     gwthread_wakeup(pdata->io_thread);
 
     return 0;
@@ -2263,14 +2263,14 @@
 
     if (finish_sending == 0) {
         Msg *msg;
-        while ((msg = list_extract_first(pdata->outgoing_queue)) != NULL) {
+        while ((msg = gwlist_extract_first(pdata->outgoing_queue)) != NULL) {
             bb_smscconn_send_failed(conn, msg, SMSCCONN_FAILED_SHUTDOWN, NULL);
         }
     }
 
     cimd2_logout(conn);
     if (conn->is_stopped) {
-        list_remove_producer(pdata->stopped);
+        gwlist_remove_producer(pdata->stopped);
         conn->is_stopped = 0;
     }
 
@@ -2293,7 +2293,7 @@
 {
     PrivData *pdata = conn->data;
 
-    list_remove_producer(pdata->stopped);
+    gwlist_remove_producer(pdata->stopped);
     /* in case there are messages in the buffer already */
     gwthread_wakeup(pdata->io_thread);
     debug("bb.sms", 0, "SMSCConn CIMD2 %s, start called",
@@ -2303,7 +2303,7 @@
 static void cimd2_stop_cb (SMSCConn *conn)
 {
     PrivData *pdata = conn->data;
-    list_add_producer(pdata->stopped);
+    gwlist_add_producer(pdata->stopped);
     debug("bb.sms", 0, "SMSCConn CIMD2 %s, stop called",
           octstr_get_cstr(conn->id));
 }
@@ -2312,7 +2312,7 @@
 {
     PrivData *pdata = conn->data;
     conn->load = (pdata ? (conn->status != SMSCCONN_DEAD ? 
-                  list_len(pdata->outgoing_queue) : 0) : 0);
+                  gwlist_len(pdata->outgoing_queue) : 0) : 0);
     return conn->load; 
 }
 
@@ -2329,16 +2329,16 @@
     pdata->no_dlr = 0;
     pdata->quitting = 0;
     pdata->socket = -1;
-    pdata->received = list_create();
+    pdata->received = gwlist_create();
     pdata->inbuffer = octstr_create("");
     pdata->send_seq = 1;
     pdata->receive_seq = 0;
-    pdata->outgoing_queue = list_create();
-    pdata->stopped = list_create();
-    list_add_producer(pdata->outgoing_queue);
+    pdata->outgoing_queue = gwlist_create();
+    pdata->stopped = gwlist_create();
+    gwlist_add_producer(pdata->outgoing_queue);
 
     if (conn->is_stopped)
-      list_add_producer(pdata->stopped);
+      gwlist_add_producer(pdata->stopped);
 
     pdata->host = cfg_get(grp, octstr_imm("host"));
     if (cfg_get_integer(&(pdata->port), grp, octstr_imm("port")) == -1)
diff -ur kannel-1.4.0/gw/smsc/smsc_fake.c kannel-1.4.0.mod/gw/smsc/smsc_fake.c
--- kannel-1.4.0/gw/smsc/smsc_fake.c	2004-02-16 20:41:26.000000000 +0100
+++ kannel-1.4.0.mod/gw/smsc/smsc_fake.c	2006-03-24 16:50:55.000000000 +0100
@@ -256,7 +256,7 @@
         if (conn_eof(client))
             goto eof;
 
-        while ((msg = list_extract_first(privdata->outgoing_queue)) != NULL) {
+        while ((msg = gwlist_extract_first(privdata->outgoing_queue)) != NULL) {
             if (sms_to_client(client, msg) == 1) {
 
                 /* 
@@ -391,7 +391,7 @@
         mutex_lock(conn->flow_mutex);
         conn->status = SMSCCONN_RECONNECTING;
         mutex_unlock(conn->flow_mutex);
-        while ((msg = list_extract_first(privdata->outgoing_queue)) != NULL) {
+        while ((msg = gwlist_extract_first(privdata->outgoing_queue)) != NULL) {
             bb_smscconn_send_failed(conn, msg, SMSCCONN_FAILED_TEMPORARILY, NULL);
         }
     }
@@ -401,10 +401,10 @@
 
     conn->status = SMSCCONN_DEAD;
 
-    while ((msg = list_extract_first(privdata->outgoing_queue)) != NULL) {
+    while ((msg = gwlist_extract_first(privdata->outgoing_queue)) != NULL) {
         bb_smscconn_send_failed(conn, msg, SMSCCONN_FAILED_SHUTDOWN, NULL);
     }
-    list_destroy(privdata->outgoing_queue, NULL);
+    gwlist_destroy(privdata->outgoing_queue, NULL);
     octstr_destroy(privdata->allow_ip);
     octstr_destroy(privdata->deny_ip);
     gw_free(privdata);
@@ -422,7 +422,7 @@
     Msg *copy;
 
     copy = msg_duplicate(sms);
-    list_produce(privdata->outgoing_queue, copy);
+    gwlist_produce(privdata->outgoing_queue, copy);
 
     /*  
      * Send DLR if desired, which means first add the DLR entry 
@@ -463,7 +463,7 @@
 
     if (finish_sending == 0) {
         Msg *msg;
-        while((msg = list_extract_first(privdata->outgoing_queue)) != NULL) {
+        while((msg = gwlist_extract_first(privdata->outgoing_queue)) != NULL) {
             bb_smscconn_send_failed(conn, msg, SMSCCONN_FAILED_SHUTDOWN, NULL);
         }
     }
@@ -488,7 +488,7 @@
     PrivData *privdata = conn->data;
     long ret;
     
-    ret = (privdata ? list_len(privdata->outgoing_queue) : 0);
+    ret = (privdata ? gwlist_len(privdata->outgoing_queue) : 0);
 
     /* use internal queue as load, maybe something else later */
 
@@ -532,7 +532,7 @@
 
     conn->name = octstr_format("FAKE:%d", privdata->port);
 
-    privdata->outgoing_queue = list_create();
+    privdata->outgoing_queue = gwlist_create();
     privdata->shutdown = 0;
 
     conn->status = SMSCCONN_CONNECTING;
@@ -551,7 +551,7 @@
 error:
     error(0, "Failed to create fake smsc connection");
     if (privdata != NULL) {
-        list_destroy(privdata->outgoing_queue, NULL);
+        gwlist_destroy(privdata->outgoing_queue, NULL);
         if (close(privdata->listening_socket == -1)) {
             error(errno, "smsc_fake: closing listening socket port %d failed",
                   privdata->listening_socket);
diff -ur kannel-1.4.0/gw/smsc/smsc_http.c kannel-1.4.0.mod/gw/smsc/smsc_http.c
--- kannel-1.4.0/gw/smsc/smsc_http.c	2004-09-28 16:47:01.000000000 +0200
+++ kannel-1.4.0.mod/gw/smsc/smsc_http.c	2006-03-24 16:50:55.000000000 +0100
@@ -370,7 +370,7 @@
     if (sms->sms.dlr_mask != DLR_UNDEFINED && sms->sms.dlr_mask != DLR_NOTHING)
         octstr_format_append(url, "&dlr-mask=%d", sms->sms.dlr_mask);
 
-    headers = list_create();
+    headers = gwlist_create();
     debug("smsc.http.kannel", 0, "HTTP[%s]: Start request",
           octstr_get_cstr(conn->id));
     http_start_request(conndata->http_ref, HTTP_METHOD_GET, url, headers, 
@@ -498,7 +498,7 @@
 	else
 	    retmsg = octstr_create("Sent.");
     }
-    reply_headers = list_create();
+    reply_headers = gwlist_create();
     http_header_add(reply_headers, "Content-Type", "text/plain");
     debug("smsc.http.kannel", 0, "HTTP[%s]: Sending reply",
           octstr_get_cstr(conn->id));
@@ -629,20 +629,20 @@
     Octstr *word;
 
     words = octstr_split_words(body);
-    if ((len = list_len(words)) > 0) {
+    if ((len = gwlist_len(words)) > 0) {
         param = dict_create(4, NULL);
-        while ((word = list_extract_first(words)) != NULL) {
+        while ((word = gwlist_extract_first(words)) != NULL) {
             List *l = octstr_split(word, octstr_imm("="));
-            Octstr *key = list_extract_first(l);
-            Octstr *value = list_extract_first(l);
+            Octstr *key = gwlist_extract_first(l);
+            Octstr *value = gwlist_extract_first(l);
             if (octstr_len(key))
                 dict_put(param, key, value);
             octstr_destroy(key);
             octstr_destroy(word);
-            list_destroy(l, (void(*)(void *)) octstr_destroy);
+            gwlist_destroy(l, (void(*)(void *)) octstr_destroy);
         }
     }
-    list_destroy(words, (void(*)(void *)) octstr_destroy);
+    gwlist_destroy(words, (void(*)(void *)) octstr_destroy);
 
     return param;
 }
@@ -743,7 +743,7 @@
             retmsg = octstr_create("Status=0");
     }
 
-    reply_headers = list_create();
+    reply_headers = gwlist_create();
     http_header_add(reply_headers, "Content-Type", "text/plain");
     debug("smsc.http.brunet", 0, "HTTP[%s]: Sending reply `%s'.",
           octstr_get_cstr(conn->id), octstr_get_cstr(retmsg));
@@ -811,7 +811,7 @@
         octstr_format_append(url, "&%s", octstr_get_cstr(sms->sms.account));
     }
 
-    headers = list_create();
+    headers = gwlist_create();
     debug("smsc.http.xidris", 0, "HTTP[%s]: Sending request <%s>",
           octstr_get_cstr(conn->id), octstr_get_cstr(url));
 
@@ -945,7 +945,7 @@
         status = (ret == 0 ? HTTP_OK : HTTP_FORBIDDEN);
     }
 
-    reply_headers = list_create();
+    reply_headers = gwlist_create();
     debug("smsc.http.xidris", 0, "HTTP[%s]: Sending reply with HTTP status <%d>.",
           octstr_get_cstr(conn->id), status);
 
@@ -974,7 +974,7 @@
                         sms->sms.msgdata, sms->sms.sender, sms->sms.receiver,
                         sms->sms.smsc_id);
 
-    headers = list_create();
+    headers = gwlist_create();
     debug("smsc.http.wapme", 0, "HTTP[%s]: Start request",
           octstr_get_cstr(conn->id));
     http_start_request(conndata->http_ref, HTTP_METHOD_GET, url, headers, 
diff -ur kannel-1.4.0/gw/smsc/smsc_oisd.c kannel-1.4.0.mod/gw/smsc/smsc_oisd.c
--- kannel-1.4.0/gw/smsc/smsc_oisd.c	2004-06-15 20:04:34.000000000 +0200
+++ kannel-1.4.0.mod/gw/smsc/smsc_oisd.c	2006-03-24 16:50:55.000000000 +0100
@@ -915,11 +915,11 @@
     if (request->operation == STATUS_REPORT) {
         msg = oisd_accept_delivery_report_message(request, conn);
         if (msg)
-            list_append(pdata->received, msg);
+            gwlist_append(pdata->received, msg);
     } else if (request->operation == DELIVER_SM) {
         msg = oisd_accept_message(request, conn);
         if (msg)
-            list_append(pdata->received, msg);
+            gwlist_append(pdata->received, msg);
     }
 
     oisd_send_response(request, pdata);
@@ -1135,15 +1135,15 @@
     octstr_destroy(pdata->inbuffer);
     octstr_destroy(pdata->my_number);
 
-    discarded = list_len(pdata->received);
+    discarded = gwlist_len(pdata->received);
     if (discarded > 0)
         warning(0, "OISD[%s]: discarded %d received messages",
                 octstr_get_cstr(pdata->conn->id),
                 discarded);
 
-    list_destroy(pdata->received, msg_destroy_item);
-    list_destroy(pdata->outgoing_queue, NULL);
-    list_destroy(pdata->stopped, NULL);
+    gwlist_destroy(pdata->received, msg_destroy_item);
+    gwlist_destroy(pdata->outgoing_queue, NULL);
+    gwlist_destroy(pdata->stopped, NULL);
 
     gw_free(pdata);
 }
@@ -1202,8 +1202,8 @@
 
     gw_assert(pdata != NULL);
 
-    if (list_len(pdata->received) > 0) {
-        *msg = list_consume(pdata->received);
+    if (gwlist_len(pdata->received) > 0) {
+        *msg = gwlist_consume(pdata->received);
         return 1;
     }
 
@@ -1266,8 +1266,8 @@
         packet_destroy(packet);
     }
 
-    if (list_len(pdata->received) > 0) {
-        *msg = list_consume(pdata->received);
+    if (gwlist_len(pdata->received) > 0) {
+        *msg = gwlist_consume(pdata->received);
         return 1;
     }
     return 0;
@@ -1353,7 +1353,7 @@
     /* remove messages from SMSC until we are killed */
     while (!pdata->quitting) {
 
-        list_consume(pdata->stopped); /* block here if suspended/isolated */
+        gwlist_consume(pdata->stopped); /* block here if suspended/isolated */
 
         /* check that connection is active */
         if (conn->status != SMSCCONN_ACTIVE) {
@@ -1387,7 +1387,7 @@
 
         /* send messages */
         do {
-            msg = list_extract_first(pdata->outgoing_queue);
+            msg = gwlist_extract_first(pdata->outgoing_queue);
             if (msg) {
                 sleep = 0;
                 if (oisd_submit_msg(conn, msg) != 0) break;
@@ -1420,7 +1420,7 @@
     Msg *copy;
 
     copy = msg_duplicate(sms);
-    list_produce(pdata->outgoing_queue, copy);
+    gwlist_produce(pdata->outgoing_queue, copy);
     gwthread_wakeup(pdata->io_thread);
 
     return 0;
@@ -1442,13 +1442,13 @@
 
     if (finish_sending == 0) {
         Msg *msg;
-        while ((msg = list_extract_first(pdata->outgoing_queue)) != NULL) {
+        while ((msg = gwlist_extract_first(pdata->outgoing_queue)) != NULL) {
             bb_smscconn_send_failed(conn, msg, SMSCCONN_FAILED_SHUTDOWN, NULL);
         }
     }
 
     if (conn->is_stopped) {
-        list_remove_producer(pdata->stopped);
+        gwlist_remove_producer(pdata->stopped);
         conn->is_stopped = 0;
     }
 
@@ -1471,7 +1471,7 @@
 {
     PrivData *pdata = conn->data;
 
-    list_remove_producer(pdata->stopped);
+    gwlist_remove_producer(pdata->stopped);
     /* in case there are messages in the buffer already */
     gwthread_wakeup(pdata->io_thread);
     debug("bb.sms", 0, "SMSCConn OISD %s, start called",
@@ -1481,7 +1481,7 @@
 static void oisd_stop_cb (SMSCConn *conn)
 {
     PrivData *pdata = conn->data;
-    list_add_producer(pdata->stopped);
+    gwlist_add_producer(pdata->stopped);
     debug("bb.sms", 0, "SMSCConn OISD %s, stop called",
           octstr_get_cstr(conn->id));
 }
@@ -1490,7 +1490,7 @@
 {
     PrivData *pdata = conn->data;
     conn->load = (pdata ? (conn->status != SMSCCONN_DEAD ?
-                  list_len(pdata->outgoing_queue) : 0) : 0);
+                  gwlist_len(pdata->outgoing_queue) : 0) : 0);
     return conn->load;
 }
 
@@ -1506,15 +1506,15 @@
     pdata->no_dlr = 0;
     pdata->quitting = 0;
     pdata->socket = -1;
-    pdata->received = list_create();
+    pdata->received = gwlist_create();
     pdata->inbuffer = octstr_create("");
     pdata->send_seq = 1;
-    pdata->outgoing_queue = list_create();
-    pdata->stopped = list_create();
-    list_add_producer(pdata->outgoing_queue);
+    pdata->outgoing_queue = gwlist_create();
+    pdata->stopped = gwlist_create();
+    gwlist_add_producer(pdata->outgoing_queue);
 
     if (conn->is_stopped)
-        list_add_producer(pdata->stopped);
+        gwlist_add_producer(pdata->stopped);
 
     pdata->host = cfg_get(grp, octstr_imm("host"));
     if (cfg_get_integer(&(pdata->port), grp, octstr_imm("port")) == -1)
diff -ur kannel-1.4.0/gw/smsc/smsc_smasi.c kannel-1.4.0.mod/gw/smsc/smsc_smasi.c
--- kannel-1.4.0/gw/smsc/smsc_smasi.c	2004-08-11 18:41:29.000000000 +0200
+++ kannel-1.4.0.mod/gw/smsc/smsc_smasi.c	2006-03-24 16:50:55.000000000 +0100
@@ -164,9 +164,9 @@
     smasi->conn = conn;
 
     smasi->thread_handle = -1;
-    smasi->msgs_to_send = list_create();
+    smasi->msgs_to_send = gwlist_create();
     smasi->sent_msgs = dict_create(16, NULL);
-    smasi->received_msgs = list_create();
+    smasi->received_msgs = gwlist_create();
     smasi->message_id_counter = counter_create();
     smasi->host = NULL;
     smasi->username = NULL;
@@ -183,7 +183,7 @@
     smasi->throttling_err_time = 0;
     smasi->enquire_link_interval = 30;
 
-    list_add_producer(smasi->msgs_to_send);
+    gwlist_add_producer(smasi->msgs_to_send);
 
     return smasi;
 } 
@@ -193,9 +193,9 @@
 {
     if (smasi == NULL) return;
 
-    list_destroy(smasi->msgs_to_send, msg_destroy_item);
+    gwlist_destroy(smasi->msgs_to_send, msg_destroy_item);
     dict_destroy(smasi->sent_msgs);
-    list_destroy(smasi->received_msgs, msg_destroy_item);
+    gwlist_destroy(smasi->received_msgs, msg_destroy_item);
     counter_destroy(smasi->message_id_counter);
     octstr_destroy(smasi->host);
     octstr_destroy(smasi->username);
@@ -879,7 +879,7 @@
     while (*pending_submits < MAX_PENDING_SUBMITS) {
         SMASI_PDU *pdu = NULL;
         /* Get next message, quit if none to be sent. */
-        Msg *msg = list_extract_first(smasi->msgs_to_send);
+        Msg *msg = gwlist_extract_first(smasi->msgs_to_send);
 
         if (msg == NULL) break;
 
@@ -1016,7 +1016,7 @@
     SMASI *smasi = conn->data;
 
     conn->load = (smasi ? (conn->status != SMSCCONN_DEAD ? 
-                    list_len(smasi->msgs_to_send) : 0) : 0);
+                    gwlist_len(smasi->msgs_to_send) : 0) : 0);
 
     return conn->load;
 } 
@@ -1026,7 +1026,7 @@
 {
     SMASI *smasi = conn->data;
 
-    list_produce(smasi->msgs_to_send, msg_duplicate(msg));
+    gwlist_produce(smasi->msgs_to_send, msg_duplicate(msg));
     gwthread_wakeup(smasi->thread_handle);
 
     return 0;
diff -ur kannel-1.4.0/gw/smsc/smsc_smpp.c kannel-1.4.0.mod/gw/smsc/smsc_smpp.c
--- kannel-1.4.0/gw/smsc/smsc_smpp.c	2004-10-21 14:33:40.000000000 +0200
+++ kannel-1.4.0.mod/gw/smsc/smsc_smpp.c	2006-03-24 16:50:55.000000000 +0100
@@ -220,10 +220,10 @@
     smpp = gw_malloc(sizeof(*smpp)); 
     smpp->transmitter = -1; 
     smpp->receiver = -1; 
-    smpp->msgs_to_send = list_create(); 
+    smpp->msgs_to_send = gwlist_create(); 
     smpp->sent_msgs = dict_create(max_pending_submits, NULL); 
-    list_add_producer(smpp->msgs_to_send); 
-    smpp->received_msgs = list_create(); 
+    gwlist_add_producer(smpp->msgs_to_send); 
+    smpp->received_msgs = gwlist_create(); 
     smpp->message_id_counter = counter_create(); 
     counter_increase(smpp->message_id_counter);
     smpp->host = octstr_duplicate(host); 
@@ -260,9 +260,9 @@
 static void smpp_destroy(SMPP *smpp) 
 { 
     if (smpp != NULL) { 
-        list_destroy(smpp->msgs_to_send, msg_destroy_item); 
+        gwlist_destroy(smpp->msgs_to_send, msg_destroy_item); 
         dict_destroy(smpp->sent_msgs); 
-        list_destroy(smpp->received_msgs, msg_destroy_item); 
+        gwlist_destroy(smpp->received_msgs, msg_destroy_item); 
         counter_destroy(smpp->message_id_counter); 
         octstr_destroy(smpp->host); 
         octstr_destroy(smpp->username); 
@@ -807,7 +807,7 @@
 
     while (*pending_submits < smpp->max_pending_submits) {
     	/* Get next message, quit if none to be sent */
-    	msg = list_extract_first(smpp->msgs_to_send);
+    	msg = gwlist_extract_first(smpp->msgs_to_send);
         if (msg == NULL)
             break;
 
@@ -1443,7 +1443,7 @@
     if (keys == NULL)
         return 0;
                                             
-    while ((key = list_extract_first(keys)) != NULL) {
+    while ((key = gwlist_extract_first(keys)) != NULL) {
         smpp_msg = dict_get(smpp->sent_msgs, key);
         if (smpp_msg != NULL && difftime(now, smpp_msg->sent_time) > smpp->wait_ack) {
             switch(action) {
@@ -1452,7 +1452,7 @@
                     warning(0, "SMPP[%s]: Not ACKED message found, reconnecting.",
                                    octstr_get_cstr(smpp->conn->id));
                     octstr_destroy(key);
-                    list_destroy(keys, octstr_destroy_item);
+                    gwlist_destroy(keys, octstr_destroy_item);
                     return 1; /* io_thread will reconnect */
                 case SMPP_WAITACK_REQUEUE: /* requeue */
                     smpp_msg = dict_remove(smpp->sent_msgs, key);
@@ -1471,13 +1471,13 @@
                     error(0, "SMPP[%s] Unknown clenup action defined %xd.",
                              octstr_get_cstr(smpp->conn->id), action);
                     octstr_destroy(key);
-                    list_destroy(keys, octstr_destroy_item);
+                    gwlist_destroy(keys, octstr_destroy_item);
                     return 0;
             }
         }
         octstr_destroy(key);
     }
-    list_destroy(keys, octstr_destroy_item);
+    gwlist_destroy(keys, octstr_destroy_item);
 
     return 0;
 }
@@ -1627,11 +1627,11 @@
 
             long reason = (smpp->quitting?SMSCCONN_FAILED_SHUTDOWN:SMSCCONN_FAILED_TEMPORARILY);
 
-            while((msg = list_extract_first(smpp->msgs_to_send)) != NULL)
+            while((msg = gwlist_extract_first(smpp->msgs_to_send)) != NULL)
                 bb_smscconn_send_failed(smpp->conn, msg, reason, NULL);
 
             noresp = dict_keys(smpp->sent_msgs);
-            while((key = list_extract_first(noresp)) != NULL) {
+            while((key = gwlist_extract_first(noresp)) != NULL) {
                 smpp_msg = dict_remove(smpp->sent_msgs, key);
                 if (smpp_msg != NULL && smpp_msg->msg) {
                     bb_smscconn_send_failed(smpp->conn, smpp_msg->msg, reason, NULL);
@@ -1639,7 +1639,7 @@
                 }
                 octstr_destroy(key);
             }
-            list_destroy(noresp, NULL);
+            gwlist_destroy(noresp, NULL);
         }
         /*
          * Reconnect if that was a connection problem.
@@ -1667,7 +1667,7 @@
 
     smpp = conn->data;
     conn->load = (smpp ? (conn->status != SMSCCONN_DEAD ?
-                  list_len(smpp->msgs_to_send) : 0) : 0);
+                  gwlist_len(smpp->msgs_to_send) : 0) : 0);
     return conn->load;
 }
 
@@ -1677,7 +1677,7 @@
     SMPP *smpp;
 
     smpp = conn->data;
-    list_produce(smpp->msgs_to_send, msg_duplicate(msg));
+    gwlist_produce(smpp->msgs_to_send, msg_duplicate(msg));
     gwthread_wakeup(smpp->transmitter);
     return 0;
 }
diff -ur kannel-1.4.0/gw/smsc/smsc_soap.c kannel-1.4.0.mod/gw/smsc/smsc_soap.c
--- kannel-1.4.0/gw/smsc/smsc_soap.c	2004-08-28 20:09:19.000000000 +0200
+++ kannel-1.4.0.mod/gw/smsc/smsc_soap.c	2006-03-24 16:50:55.000000000 +0100
@@ -360,8 +360,8 @@
 
     /* allocate and init internat data structure */
     privdata = gw_malloc(sizeof(PrivData));
-    privdata->outgoing_queue = list_create();
-    /* privdata->pending_ack_queue = list_create(); */
+    privdata->outgoing_queue = gwlist_create();
+    /* privdata->pending_ack_queue = gwlist_create(); */
 
     privdata->shutdown = 0;
     privdata->soap_client = NULL;
@@ -414,66 +414,66 @@
     filenames = octstr_split(temp = cfg_get(cfg,octstr_imm("xml-files")), 
                              octstr_imm(";"));
     octstr_destroy(temp);
-    if (list_len(filenames) < 3) {
+    if (gwlist_len(filenames) < 3) {
         error(0,"SOAP: Not enough template files for XML generation, you need 3 - aborting"); 
         goto error;
     }
     if ( !(privdata->mt_xml_file = octstr_read_file(
-            octstr_get_cstr(temp = list_extract_first(filenames))))) {
+            octstr_get_cstr(temp = gwlist_extract_first(filenames))))) {
         error(0,"SOAP: Can't load XML template for MT - aborting"); 
         goto error;
 
     }
     octstr_destroy(temp);
     if ( !(privdata->mo_xml_file = octstr_read_file(
-            octstr_get_cstr(temp = list_extract_first(filenames))))) {
+            octstr_get_cstr(temp = gwlist_extract_first(filenames))))) {
         error(0,"SOAP: Can't load XML template for MO - aborting"); 
         goto error;
     }
     octstr_destroy(temp);
     if ( !(privdata->dlr_xml_file = octstr_read_file(
-            octstr_get_cstr(temp = list_extract_first(filenames))))) {
+            octstr_get_cstr(temp = gwlist_extract_first(filenames))))) {
 
         error(0,"SOAP: Can't load XML template for DLR - aborting"); 
         goto error;
     }
     octstr_destroy(temp);
-    list_destroy(filenames, octstr_destroy_item);
+    gwlist_destroy(filenames, octstr_destroy_item);
 
     filenames = octstr_split(temp = cfg_get(cfg,octstr_imm("xmlspec-files")), 
                              octstr_imm(";"));
     octstr_destroy(temp);
-    if (list_len(filenames) < 4) {
+    if (gwlist_len(filenames) < 4) {
         error(0,"Not enough spec files for XML parsing, you need 4 - aborting"); 
         goto error;
     }
     if ( !(privdata->mt_spec_file = octstr_read_file(
-            octstr_get_cstr(temp = list_extract_first(filenames))))) {
+            octstr_get_cstr(temp = gwlist_extract_first(filenames))))) {
         error(0,"Can't load spec for MT parsing - aborting"); 
         goto error;
     }
     octstr_destroy(temp);
     if ( !(privdata->mo_spec_file = octstr_read_file(
-            octstr_get_cstr(temp = list_extract_first(filenames))))) {
+            octstr_get_cstr(temp = gwlist_extract_first(filenames))))) {
         error(0,"SOAP: Can't load spec for MO parsing - aborting"); 
         goto error;
     }
     octstr_destroy(temp);
     if ( !(privdata->dlr_spec_file = octstr_read_file(
-            octstr_get_cstr(temp = list_extract_first(filenames))))) {
+            octstr_get_cstr(temp = gwlist_extract_first(filenames))))) {
         error(0,"SOAP: Can't load spec for DLR parsing - aborting"); 
         goto error;
     }
     octstr_destroy(temp);
 
     if ( !(privdata->mo_deps_file = octstr_read_file(
-            octstr_get_cstr(temp = list_extract_first(filenames))))) {
+            octstr_get_cstr(temp = gwlist_extract_first(filenames))))) {
         error(0,"SOAP: Can't load 'deps' file for MO processing - aborting"); 
         goto error;
     }
     octstr_destroy(temp);
 
-    list_destroy(filenames, octstr_destroy_item);
+    gwlist_destroy(filenames, octstr_destroy_item);
 
     debug("bb.soap.create",0,"Connecting to %s",
           octstr_get_cstr(privdata->uri));
@@ -520,8 +520,8 @@
 
     /* release stuff */
     if (privdata != NULL) {
-        list_destroy(privdata->outgoing_queue, NULL);
-        /* list_destroy(privdata->pending_ack_queue, NULL); */
+        gwlist_destroy(privdata->outgoing_queue, NULL);
+        /* gwlist_destroy(privdata->pending_ack_queue, NULL); */
 
         O_DESTROY(privdata->uri);
         O_DESTROY(privdata->allow_ip);
@@ -539,7 +539,7 @@
     }
     gw_free(privdata);
     octstr_destroy(temp);
-    list_destroy(filenames, octstr_destroy_item);
+    gwlist_destroy(filenames, octstr_destroy_item);
 
     /* notify bearerbox */
     conn->why_killed = SMSCCONN_KILLED_CANNOT_CONNECT;
@@ -572,11 +572,11 @@
         return -1;
 
     copy = msg_duplicate(sms); /* copy the message */
-    list_append(privdata->outgoing_queue, copy); /* put it in the queue */
+    gwlist_append(privdata->outgoing_queue, copy); /* put it in the queue */
 
     debug("bb.soap.add_msg",0,"SOAP[%s]: got a new MT from %s, list has now %ld MTs", 
           octstr_get_cstr(privdata->name), octstr_get_cstr(sms->sms.sender), 
-          list_len(privdata->outgoing_queue));
+          gwlist_len(privdata->outgoing_queue));
 
     gwthread_wakeup(privdata->listener_thread);
 
@@ -613,7 +613,7 @@
 
     if (finish_sending == 0) {
         Msg *msg;
-        while ((msg = list_extract_first(privdata->outgoing_queue)) != NULL)
+        while ((msg = gwlist_extract_first(privdata->outgoing_queue)) != NULL)
             bb_smscconn_send_failed(conn, msg, SMSCCONN_FAILED_SHUTDOWN, NULL);
     }
 
@@ -695,8 +695,8 @@
     if (conn->status == SMSCCONN_DEAD)
         return -1;
 
-    ret = list_len(privdata->outgoing_queue); 
-    /* + list_len(privdata->pending_ack_queue); */
+    ret = gwlist_len(privdata->outgoing_queue); 
+    /* + gwlist_len(privdata->pending_ack_queue); */
 
     /* use internal queue as load, maybe something else later */
     conn->load = ret;
@@ -762,7 +762,7 @@
                 }
 
                 /* run the normal send/receive loop */
-                if (list_len(privdata->outgoing_queue) > 0) { /* we have messages to send */
+                if (gwlist_len(privdata->outgoing_queue) > 0) { /* we have messages to send */
                     soap_send_loop(conn); /* send any messages in queue */
                 }
                 break;
@@ -790,7 +790,7 @@
     debug("bb.soap.connection",0,"SOAP[%s]: sending messages back to bearerbox", 
           octstr_get_cstr(privdata->name));
 
-    while ((msg = list_extract_first(privdata->outgoing_queue)) != NULL)
+    while ((msg = gwlist_extract_first(privdata->outgoing_queue)) != NULL)
         bb_smscconn_send_failed(conn, msg, SMSCCONN_FAILED_SHUTDOWN, NULL);
 
     /* lock module public state data */
@@ -804,14 +804,14 @@
     debug("bb.soap.connection",0,"SOAP[%s]: don't need the queue anymore", 
           octstr_get_cstr(privdata->name));
 
-    list_destroy(privdata->outgoing_queue, NULL);
-    /* list_destroy(privdata->pending_ack_queue, NULL); */
+    gwlist_destroy(privdata->outgoing_queue, NULL);
+    /* gwlist_destroy(privdata->pending_ack_queue, NULL); */
 
     /* clear the soap client collection */
     debug("bb.soap.connection",0,"SOAP[%s]: tell caller to stop", 
           octstr_get_cstr(privdata->name));
     if (privdata->soap_client)
-        list_destroy(privdata->soap_client, soap_destroy_client_data);
+        gwlist_destroy(privdata->soap_client, soap_destroy_client_data);
 
     /* destroy private data stores */
     debug("bb.soap.connection",0,"SOAP[%s]: done with privdata", 
@@ -940,7 +940,7 @@
             O_DESTROY(client_ip);
 
             http_destroy_headers(request_headers);
-            list_destroy(cgivars, NULL);
+            gwlist_destroy(cgivars, NULL);
         }
 
         gwthread_sleep(SOAP_SLEEP_TIME);
@@ -972,7 +972,7 @@
           octstr_get_cstr(privdata->name));
 
     while ((counter < SOAP_MAX_MESSAGE_PER_ROUND) && 
-            (msg = list_extract_first(privdata->outgoing_queue))) { 
+            (msg = gwlist_extract_first(privdata->outgoing_queue))) { 
         /* as long as we have some messages */
         ++counter;
 
@@ -998,7 +998,7 @@
         soap_send(privdata, xmldata, msg);
 
         /* store in the second queue so that soap_read_response will know what to do */
-        /* list_append(privdata->pending_ack_queue,msg); */
+        /* gwlist_append(privdata->pending_ack_queue,msg); */
 
         /* don't need this anymore */
         O_DESTROY(xmldata);
@@ -1128,7 +1128,7 @@
 
     /* don't get in here unless I have some callers */
     /* (I shouldn't have one before I start sending messages) */
-    if (!list_len(privdata->soap_client))
+    if (!gwlist_len(privdata->soap_client))
         return;
 
 
@@ -1151,7 +1151,7 @@
         bb_smscconn_send_failed(conn, msg,
 	            SMSCCONN_FAILED_MALFORMED, octstr_create("MALFORMED"));
         /*    bb_smscconn_send_failed(conn, msg, SMSCCONN_FAILED_TEMPORARILY); */
-        /*      list_append(privdata->outgoing_queue, msg); */
+        /*      gwlist_append(privdata->outgoing_queue, msg); */
         return;
     }
 
@@ -1199,8 +1199,8 @@
  * Input: Connection session data, Octstr xml buffer
  * Returns: message ID parsed or -1 if parsing failed (for example - a NACK received)
  *
- * Possible bug : I use list_get() liberaly here, after checking that I have enough items,
- *                but if list_get() returns NULL for an empty item, things might break - and
+ * Possible bug : I use gwlist_get() liberaly here, after checking that I have enough items,
+ *                but if gwlist_get() returns NULL for an empty item, things might break - and
  *                not in a nice way.
  **/
 static int64 soap_parse_response(PrivData* privdata, Octstr* xmlResponse)
@@ -1242,7 +1242,7 @@
               octstr_get_cstr(privdata->name));
     }
 
-    list_destroy(maps, soap_destroy_map);
+    gwlist_destroy(maps, soap_destroy_map);
 
     /* done with the document */
     xmlFreeDoc(responseDoc);
@@ -1339,7 +1339,7 @@
 
 
     /* run the map and the xml through the parser */
-    if (soap_map_xml_data(root, maps) < list_len(maps)) {
+    if (soap_map_xml_data(root, maps) < gwlist_len(maps)) {
         error(0,"SOAP[%s]: parse_mo failed to map all the arguments from the XML data",
               octstr_get_cstr(privdata->name));
     }
@@ -1393,7 +1393,7 @@
         if ((res = soap_release_dependences(privdata->mo_deps_file, maps, msg, privdata))!=0)
             error(0,"SOAP: parse_mo - failed to release all dependences");
     }
-    list_destroy(maps, soap_destroy_map);
+    gwlist_destroy(maps, soap_destroy_map);
 
     /* fill in the date */
     if (strlen(date)) {
@@ -1582,7 +1582,7 @@
               octstr_get_cstr(privdata->name));
     }
 
-    list_destroy(maps, soap_destroy_map);
+    gwlist_destroy(maps, soap_destroy_map);
 
     /* done with the document */
     xmlFreeDoc(requestDoc);
@@ -1939,14 +1939,14 @@
 
     /* no list yet, generate one */
     if (!privdata->soap_client)
-        privdata->soap_client = list_create();
+        privdata->soap_client = gwlist_create();
 
     /* I'm going to change the list, so lock it */
-    list_lock(privdata->soap_client);
+    gwlist_lock(privdata->soap_client);
 
     /* find the next live caller */
-    for (index = list_len(privdata->soap_client) - 1 ; index >= 0; --index) {
-        cur_client = list_get(privdata->soap_client, index);
+    for (index = gwlist_len(privdata->soap_client) - 1 ; index >= 0; --index) {
+        cur_client = gwlist_get(privdata->soap_client, index);
         if (
             cur_client->last_access + CLIENT_BUSY_TIME < time(NULL)
             &&
@@ -1955,18 +1955,18 @@
             debug("bb.soap.init_query",0,"SOAP[%s]: init_query getting a client",octstr_get_cstr(privdata->name));
 
             /* client is not busy - get it */
-            list_delete(privdata->soap_client, index, 1);
+            gwlist_delete(privdata->soap_client, index, 1);
             break;
         }
         cur_client = NULL;
     }
 
     if (!cur_client) {
-        if (list_len(privdata->soap_client) > MAX_SOAP_CLIENTS) {
+        if (gwlist_len(privdata->soap_client) > MAX_SOAP_CLIENTS) {
             debug("bb.soap.init_query",0,"SOAP[%s]: init_query all clients are busy, getting the first client",octstr_get_cstr(privdata->name));
             /* query not dispatched, and we have the max number of callers -
                grab the first caller (least used) from the list */
-            cur_client = list_extract_first(privdata->soap_client);
+            cur_client = gwlist_extract_first(privdata->soap_client);
         } else {
             /* query not dispatched, and we don't have enough callers -
                start a new one */
@@ -1979,8 +1979,8 @@
     http_start_request(cur_client->caller, HTTP_METHOD_POST, privdata->uri, headers, data, 1, msg, NULL);
     cur_client->requests++;
     cur_client->last_access = time(NULL);
-    list_append(privdata->soap_client, cur_client);
-    list_unlock(privdata->soap_client);
+    gwlist_append(privdata->soap_client, cur_client);
+    gwlist_unlock(privdata->soap_client);
 }
 
 
@@ -2016,18 +2016,18 @@
         return NULL;
 
     /* lock the list so nobody removes or adds clients while I'm looping on the list */
-    list_lock(client_list);
+    gwlist_lock(client_list);
 
-    for (index = list_len(client_list) - 1; index >= 0; --index) {
-        cd = list_get(client_list,index);
-        if (list_len(cd->caller)) {
+    for (index = gwlist_len(client_list) - 1; index >= 0; --index) {
+        cd = gwlist_get(client_list,index);
+        if (gwlist_len(cd->caller)) {
 
-            list_unlock(client_list);
-            return list_get(client_list, index);
+            gwlist_unlock(client_list);
+            return gwlist_get(client_list, index);
         }
     }
 
-    list_unlock(client_list);
+    gwlist_unlock(client_list);
     return NULL;
 }
 
@@ -2090,55 +2090,55 @@
 {
     List *parse_items, *out;
 
-    out = list_create();
+    out = gwlist_create();
 
     /* read the list of items from the spec file */
     parse_items = octstr_split(spec, octstr_imm("\n"));
 
-    while (list_len(parse_items)) {
+    while (gwlist_len(parse_items)) {
         ArgumentMap* map;
         int index;
-        Octstr* temp = list_extract_first(parse_items);
+        Octstr* temp = gwlist_extract_first(parse_items);
         List* item = octstr_split_words(temp);
 
 
         /* make sure we have at least two things in the item : a keyword and a path */
-        if (list_len(item) < 2) {
+        if (gwlist_len(item) < 2) {
             debug("bb.soap.parse_create_map",0,"SOAP: broken spec file line <%s> in soap_create_map",
                   octstr_get_cstr(temp));
             octstr_destroy(temp);
-            list_destroy(item, octstr_destroy_item);
+            gwlist_destroy(item, octstr_destroy_item);
             continue;
         }
 
         /* check that the keyword matches something in the list of keywords */
         for (index = 0; index < count; ++index) {
-            if (!octstr_str_compare(list_get(item,0), keywords[index])) {
+            if (!octstr_str_compare(gwlist_get(item,0), keywords[index])) {
                 /* allocate the structure */
                 map = gw_malloc(sizeof(ArgumentMap));
-                map->name = list_extract_first(item);
-                map->path = list_extract_first(item);
-                map->attribute = list_extract_first(item); /* could be NULL, but that is ok */
+                map->name = gwlist_extract_first(item);
+                map->path = gwlist_extract_first(item);
+                map->attribute = gwlist_extract_first(item); /* could be NULL, but that is ok */
                 map->sscan_type = octstr_create(types[index]);
                 map->store = storage[index];
-                list_append(out, map);
+                gwlist_append(out, map);
                 break;
             }
         }
 
         /* destroy temporary variables; */
-        list_destroy(item, octstr_destroy_item);
+        gwlist_destroy(item, octstr_destroy_item);
         octstr_destroy(temp);
     }
 
-    list_destroy(parse_items, octstr_destroy_item);
+    gwlist_destroy(parse_items, octstr_destroy_item);
 
     return out;
 }
 
 /*
  * function soap_destroy_map()
- *	destroy a map structure. used in list_destroy(calls);
+ *	destroy a map structure. used in gwlist_destroy(calls);
  * Input: pointer to a map structure;
  **/
 void soap_destroy_map(void *item)
@@ -2181,10 +2181,10 @@
 
     /* split into XML path and attribute name */
     path_elements = octstr_split(path, octstr_imm(","));
-    xml_path = list_get(path_elements,0);
-    if (list_len(path_elements) > 1) /* case (b), we have an attribute */
-        attr_name = list_get(path_elements,1);
-    list_destroy(path_elements, NULL);
+    xml_path = gwlist_get(path_elements,0);
+    if (gwlist_len(path_elements) > 1) /* case (b), we have an attribute */
+        attr_name = gwlist_get(path_elements,1);
+    gwlist_destroy(path_elements, NULL);
 
     /* split path into parts */
     path_elements = octstr_split(xml_path, octstr_imm("/"));
@@ -2193,14 +2193,14 @@
     parent = NULL;
     node = xml;
     index = 0;
-    while (index < list_len(path_elements)) {
+    while (index < gwlist_len(path_elements)) {
         int found = 0;
         /* get the next path element */
-        temp = list_get(path_elements, index);
+        temp = gwlist_get(path_elements, index);
         do {
             if (!octstr_str_compare(temp,node->name)) {
                 /* found what we're looking for */
-                if (!(node->xmlChildrenNode) && index < (list_len(path_elements)-1)) {
+                if (!(node->xmlChildrenNode) && index < (gwlist_len(path_elements)-1)) {
                     /* while this is indeed the item we are looking for, it's not the end
                      * of the path, and this item has no children */
                     debug("bb.soap.fetch_xml_data",0,"SOAP: fetch_xml - error parsing XML, "
@@ -2236,11 +2236,11 @@
     /* coming here there are two options:
      * 1) we looped over all the tree, but did not succeed in traveling the
      *    requested path - index not pointing past the list of path elements - */
-    if (index < list_len(path_elements)) {
+    if (index < gwlist_len(path_elements)) {
         /* didn't find the full path */
         debug("bb.soap.map_xml_data",0,"SOAP: fetch_xml - path <%s> cannot be traveled in input XML",
               octstr_get_cstr(xml_path));
-        list_destroy(path_elements, octstr_destroy_item);
+        gwlist_destroy(path_elements, octstr_destroy_item);
         octstr_destroy(xml_path);
         octstr_destroy(attr_name);
         return NULL;
@@ -2267,7 +2267,7 @@
         xmlFree(content);
     }
 
-    list_destroy(path_elements, octstr_destroy_item);
+    gwlist_destroy(path_elements, octstr_destroy_item);
     octstr_destroy(xml_path);
     octstr_destroy(attr_name);
 
@@ -2286,26 +2286,26 @@
     xmlNodePtr node, parent;
 
     /* step through the items on the map */
-    while (mapindex < list_len(maps)) {
+    while (mapindex < gwlist_len(maps)) {
 
         Octstr* temp;
 
         int index = 0;
-        ArgumentMap* map = list_get(maps,mapindex);
+        ArgumentMap* map = gwlist_get(maps,mapindex);
         /* split the path elements */
         List* path_elements = octstr_split(map->path, octstr_imm("/"));
 
         /* walk the message tree down the path */
         parent = NULL;
         node = xml;
-        while (index < list_len(path_elements)) {
+        while (index < gwlist_len(path_elements)) {
             int found = 0;
             /* get the next path element */
-            temp = list_get(path_elements, index);
+            temp = gwlist_get(path_elements, index);
             do {
                 if (!octstr_str_compare(temp,node->name)) {
                     /* found what we're looking for */
-                    if (!(node->xmlChildrenNode) && index < (list_len(path_elements)-1)) {
+                    if (!(node->xmlChildrenNode) && index < (gwlist_len(path_elements)-1)) {
                         /* while this is indeed the item we are looking for, it's not the end
                            of the path, and this item has no children */
                         debug("bb.soap.map_xml_data",0,"SOAP: error parsing XML, looking for <%s>, but element <%s> has no children",
@@ -2339,11 +2339,11 @@
         }
 
 
-        if (index < list_len(path_elements)) {
+        if (index < gwlist_len(path_elements)) {
             /* didn't find the full path */
             debug("bb.soap.map_xml_data",0,"SOAP: didn't find element for keyword <%s> in XML data",
                   octstr_get_cstr(map->name));
-            list_destroy(path_elements, octstr_destroy_item);
+            gwlist_destroy(path_elements, octstr_destroy_item);
             ++mapindex;
             continue;
         }
@@ -2390,7 +2390,7 @@
 
         /* done for this item */
         octstr_destroy(temp);
-        list_destroy(path_elements, octstr_destroy_item);
+        gwlist_destroy(path_elements, octstr_destroy_item);
         ++mapindex;
     }
     return args;
@@ -2436,71 +2436,71 @@
 
     issues = octstr_split(file_deps, octstr_imm(";"));					/* get paragraphs */
 
-    if (list_len(issues) == 0) {
+    if (gwlist_len(issues) == 0) {
         error(0, "SOAP: soap_release_dependences, empty or broken 'deps' file");
         return -1;
     }
 
-    for (i=0; i<list_len(issues); ++i)						            /* loop paragraphs */
+    for (i=0; i<gwlist_len(issues); ++i)						            /* loop paragraphs */
     {
-        block = list_get(issues, i);
+        block = gwlist_get(issues, i);
         octstr_strip_crlfs(block);
         octstr_strip_blanks(block);
 
         issue_items = octstr_split(block, octstr_imm("\n"));
-        if (list_len(issue_items) < 2) {
+        if (gwlist_len(issue_items) < 2) {
             error(0, "SOAP: soap_release_dependences, broken file 'deps' can't find any definition for <key>");
-            list_destroy(issue_items, octstr_destroy_item);
-            list_destroy(issues, octstr_destroy_item);
+            gwlist_destroy(issue_items, octstr_destroy_item);
+            gwlist_destroy(issues, octstr_destroy_item);
             return -1;
         }
 
 
-        header = list_extract_first(issue_items);
+        header = gwlist_extract_first(issue_items);
         header_item = octstr_split_words(header);				/* header content */
         O_DESTROY(header);
 
-        if (list_len(header_item) < 2) {
+        if (gwlist_len(header_item) < 2) {
             error(0, "SOAP: soap_release_dependences, broken 'deps' file in <key> <key_deps> part");
-            list_destroy(header_item, octstr_destroy_item);
-            list_destroy(issue_items, octstr_destroy_item);
-            list_destroy(issues, octstr_destroy_item);
+            gwlist_destroy(header_item, octstr_destroy_item);
+            gwlist_destroy(issue_items, octstr_destroy_item);
+            gwlist_destroy(issues, octstr_destroy_item);
             return -1;
         }
 
-        key      = list_get(header_item, 0);
-        key_deps = list_get(header_item, 1);
+        key      = gwlist_get(header_item, 0);
+        key_deps = gwlist_get(header_item, 1);
         key_index      = soap_get_index(lstmaps, key, 0);      /* search key_index */
         key_deps_index = soap_get_index(lstmaps, key_deps, 0); /* search key_deps_index, from what depends */
 
         if (key_index == -1 || key_deps_index == -1) {
-            list_destroy(header_item, octstr_destroy_item);
-            list_destroy(issue_items, octstr_destroy_item);
-            list_destroy(issues, octstr_destroy_item);
+            gwlist_destroy(header_item, octstr_destroy_item);
+            gwlist_destroy(issue_items, octstr_destroy_item);
+            gwlist_destroy(issues, octstr_destroy_item);
             return -1;
         }
 
         map_index = soap_get_index(lstmaps, key_deps, 1); /* get index for map->name==key_deps */
-        map = list_get(lstmaps, map_index);
+        map = gwlist_get(lstmaps, map_index);
 
         /* search <function_identifier> and if not found try to set default */
-        for (j=0; j < list_len(issue_items); ++j) {
+        for (j=0; j < gwlist_len(issue_items); ++j) {
 
-            Octstr *tmp = list_get(issue_items, j);
+            Octstr *tmp = gwlist_get(issue_items, j);
             List *row = octstr_split_words(tmp);
 
-            if (!octstr_str_compare(list_get(row, 0), map->store)) {
-                func_alias = octstr_duplicate(list_get(row, 1));
-                list_destroy(row, octstr_destroy_item);
+            if (!octstr_str_compare(gwlist_get(row, 0), map->store)) {
+                func_alias = octstr_duplicate(gwlist_get(row, 1));
+                gwlist_destroy(row, octstr_destroy_item);
                 break;
             }
 
-            if (j==list_len(issue_items)-1) {
+            if (j==gwlist_len(issue_items)-1) {
                 error(0, "SOAP: soap_release_dependences, \
                       can't find function_alias for <%s> in 'deps' file, set default", (char*)map->store);
                 func_alias = octstr_create(SPEC_DEFAULT);
             }
-            list_destroy(row, octstr_destroy_item);
+            gwlist_destroy(row, octstr_destroy_item);
         }
 
         key_func_index = -1;
@@ -2517,14 +2517,14 @@
 
         O_DESTROY(func_alias);
 
-        list_destroy(header_item, octstr_destroy_item);
-        list_destroy(issue_items, octstr_destroy_item);
+        gwlist_destroy(header_item, octstr_destroy_item);
+        gwlist_destroy(issue_items, octstr_destroy_item);
 
         /* which field has deps, which func need be called, msg need be changed */
         if ((res=soap_process_deps(key_index, key_func_index, msg, privdata)) < 0)
             error(0, "SOAP: soap_release_dependences, error processing dependent value");
     }
-    list_destroy(issues, octstr_destroy_item);
+    gwlist_destroy(issues, octstr_destroy_item);
 
 
     return 0; /* OK */
@@ -2902,8 +2902,8 @@
                              "msgtype", "msgdata"
                          };
 
-    for (i=0; i < list_len(where); ++i) {
-        map = list_get(where, i);
+    for (i=0; i < gwlist_len(where); ++i) {
+        map = gwlist_get(where, i);
         if (!octstr_compare(map->name, key)) {
             if (map_index==1) /* return index from the list where found name */
                 return i;
diff -ur kannel-1.4.0/gw/smsc/smsc_wrapper.c kannel-1.4.0.mod/gw/smsc/smsc_wrapper.c
--- kannel-1.4.0/gw/smsc/smsc_wrapper.c	2004-08-11 18:41:29.000000000 +0200
+++ kannel-1.4.0.mod/gw/smsc/smsc_wrapper.c	2006-03-24 16:50:55.000000000 +0100
@@ -85,8 +85,8 @@
 {
     if (wrap == NULL)
 	return;
-    list_destroy(wrap->outgoing_queue, NULL);
-    list_destroy(wrap->stopped, NULL);
+    gwlist_destroy(wrap->outgoing_queue, NULL);
+    gwlist_destroy(wrap->stopped, NULL);
     mutex_destroy(wrap->reconnect_mutex);
     if (wrap->smsc != NULL)
 	smsc_close(wrap->smsc);
@@ -118,7 +118,7 @@
     debug("bb.sms", 0, "smsc_wrapper <%s>: reconnect started",
 	  octstr_get_cstr(conn->name));
 
-    while((msg = list_extract_first(wrap->outgoing_queue))!=NULL) {
+    while((msg = gwlist_extract_first(wrap->outgoing_queue))!=NULL) {
 	bb_smscconn_send_failed(conn, msg, SMSCCONN_FAILED_TEMPORARILY, NULL);
     }
     conn->status = SMSCCONN_RECONNECTING;
@@ -202,7 +202,7 @@
     /* remove messages from SMSC until we are killed */
     while(conn->why_killed == SMSCCONN_ALIVE) {
 
-        list_consume(wrap->stopped); /* block here if suspended/isolated */
+        gwlist_consume(wrap->stopped); /* block here if suspended/isolated */
 
 	msg = sms_receive(conn);
 	if (msg) {
@@ -268,7 +268,7 @@
      * no producer anymore (we are set to shutdown) */
     while(conn->status != SMSCCONN_DEAD) {
 
-	if ((msg = list_consume(wrap->outgoing_queue)) == NULL)
+	if ((msg = gwlist_consume(wrap->outgoing_queue)) == NULL)
             break;
 
         if (octstr_search_char(msg->sms.receiver, ' ', 0) != -1) {
@@ -285,15 +285,15 @@
 
 	    debug("bb.sms", 0, "Handling multi-receiver message");
 
-            for(i=0; i < list_len(nlist); i++) {
+            for(i=0; i < gwlist_len(nlist); i++) {
 
 		newmsg = msg_duplicate(msg);
                 octstr_destroy(newmsg->sms.receiver);
 
-                newmsg->sms.receiver = list_get(nlist, i);
+                newmsg->sms.receiver = gwlist_get(nlist, i);
                 sms_send(conn, newmsg);
             }
-            list_destroy(nlist, NULL);
+            gwlist_destroy(nlist, NULL);
             msg_destroy(msg);
         }
         else
@@ -308,7 +308,7 @@
     conn->why_killed = SMSCCONN_KILLED_SHUTDOWN;
 
     if (conn->is_stopped) {
-	list_remove_producer(wrap->stopped);
+	gwlist_remove_producer(wrap->stopped);
 	conn->is_stopped = 0;
     }
 
@@ -321,7 +321,7 @@
 
     conn->status = SMSCCONN_DEAD;
 
-    while((msg = list_extract_first(wrap->outgoing_queue))!=NULL) {
+    while((msg = gwlist_extract_first(wrap->outgoing_queue))!=NULL) {
 	bb_smscconn_send_failed(conn, msg, SMSCCONN_FAILED_SHUTDOWN, NULL);
     }
     smscwrapper_destroy(wrap);
@@ -340,7 +340,7 @@
     Msg *copy;
 
     copy = msg_duplicate(sms);
-    list_produce(wrap->outgoing_queue, copy);
+    gwlist_produce(wrap->outgoing_queue, copy);
 
     return 0;
 }
@@ -355,11 +355,11 @@
     
     if (finish_sending == 0) {
 	Msg *msg; 
-	while((msg = list_extract_first(wrap->outgoing_queue))!=NULL) {
+	while((msg = gwlist_extract_first(wrap->outgoing_queue))!=NULL) {
 	    bb_smscconn_send_failed(conn, msg, SMSCCONN_FAILED_SHUTDOWN, NULL);
 	}
     }
-    list_remove_producer(wrap->outgoing_queue);
+    gwlist_remove_producer(wrap->outgoing_queue);
     gwthread_wakeup(wrap->sender_thread);
     gwthread_wakeup(wrap->receiver_thread);
     return 0;
@@ -370,7 +370,7 @@
     SmscWrapper *wrap = conn->data;
 
     debug("smscconn", 0, "Stopping wrapper");
-    list_add_producer(wrap->stopped);
+    gwlist_add_producer(wrap->stopped);
 
 }
 
@@ -379,14 +379,14 @@
     SmscWrapper *wrap = conn->data;
 
     debug("smscconn", 0, "Starting wrapper");
-    list_remove_producer(wrap->stopped);
+    gwlist_remove_producer(wrap->stopped);
 }
 
 
 static long wrapper_queued(SMSCConn *conn)
 {
     SmscWrapper *wrap = conn->data;
-    long ret = list_len(wrap->outgoing_queue);
+    long ret = gwlist_len(wrap->outgoing_queue);
 
     /* use internal queue as load, maybe something else later */
     
@@ -411,10 +411,10 @@
     conn->send_msg = wrapper_add_msg;
     
     
-    wrap->outgoing_queue = list_create();
-    wrap->stopped = list_create();
+    wrap->outgoing_queue = gwlist_create();
+    wrap->stopped = gwlist_create();
     wrap->reconnect_mutex = mutex_create();
-    list_add_producer(wrap->outgoing_queue);
+    gwlist_add_producer(wrap->outgoing_queue);
     
     if ((wrap->smsc = smsc_open(cfg)) == NULL)
 	goto error;
@@ -424,7 +424,7 @@
     conn->connect_time = time(NULL);
 
     if (conn->is_stopped)
-	list_add_producer(wrap->stopped);
+	gwlist_add_producer(wrap->stopped);
 	
 
     /* XXX here we could fail things... specially if the second one
diff -ur kannel-1.4.0/gw/smscconn.c kannel-1.4.0.mod/gw/smscconn.c
--- kannel-1.4.0/gw/smscconn.c	2004-08-28 20:09:19.000000000 +0200
+++ kannel-1.4.0.mod/gw/smscconn.c	2006-03-24 16:50:55.000000000 +0100
@@ -113,18 +113,18 @@
         conn->reroute_by_receiver = dict_create(100, (void(*)(void *)) octstr_destroy);
 
         routes = octstr_split(rule, octstr_imm(";"));
-        for (i = 0; i < list_len(routes); i++) {
-            Octstr *item = list_get(routes, i);
+        for (i = 0; i < gwlist_len(routes); i++) {
+            Octstr *item = gwlist_get(routes, i);
             Octstr *smsc, *receiver;
             List *receivers;
 
             /* first word is the smsc-id, all other are the receivers */
             receivers = octstr_split(item, octstr_imm(","));
-            smsc = list_extract_first(receivers);
+            smsc = gwlist_extract_first(receivers);
             if (smsc)
                 octstr_strip_blanks(smsc);
 
-            while((receiver = list_extract_first(receivers))) {
+            while((receiver = gwlist_extract_first(receivers))) {
                 octstr_strip_blanks(receiver);
                 debug("smscconn",0,"Adding internal routing for smsc id <%s>: "
                           "receiver <%s> to smsc id <%s>",
@@ -138,10 +138,10 @@
                 octstr_destroy(receiver);
             }
             octstr_destroy(smsc);
-            list_destroy(receivers, octstr_destroy_item);
+            gwlist_destroy(receivers, octstr_destroy_item);
         }
         octstr_destroy(rule);
-        list_destroy(routes, octstr_destroy_item);
+        gwlist_destroy(routes, octstr_destroy_item);
     }
 }
 
@@ -328,9 +328,9 @@
 
     octstr_destroy(conn->name);
     octstr_destroy(conn->id);
-    list_destroy(conn->allowed_smsc_id, octstr_destroy_item);
-    list_destroy(conn->denied_smsc_id, octstr_destroy_item);
-    list_destroy(conn->preferred_smsc_id, octstr_destroy_item);
+    gwlist_destroy(conn->allowed_smsc_id, octstr_destroy_item);
+    gwlist_destroy(conn->denied_smsc_id, octstr_destroy_item);
+    gwlist_destroy(conn->preferred_smsc_id, octstr_destroy_item);
     octstr_destroy(conn->denied_prefix);
     octstr_destroy(conn->allowed_prefix);
     octstr_destroy(conn->preferred_prefix);
@@ -417,13 +417,13 @@
      * smsc-id matches any of its allowed SMSCes
      */
     if (conn->allowed_smsc_id && (msg->sms.smsc_id == NULL ||
-         list_search(conn->allowed_smsc_id, msg->sms.smsc_id, octstr_item_match) == NULL)) {
+         gwlist_search(conn->allowed_smsc_id, msg->sms.smsc_id, octstr_item_match) == NULL)) {
         return -1;
     }
     /* ..if no allowed-smsc-id set but denied-smsc-id and message smsc-id
      * is set, deny message if smsc-ids match */
     else if (conn->denied_smsc_id && msg->sms.smsc_id != NULL &&
-                 list_search(conn->denied_smsc_id, msg->sms.smsc_id, octstr_item_match) != NULL) {
+                 gwlist_search(conn->denied_smsc_id, msg->sms.smsc_id, octstr_item_match) != NULL) {
         return -1;
     }
 
@@ -473,7 +473,7 @@
     
     /* then see if it is preferred one */
     if (conn->preferred_smsc_id && msg->sms.smsc_id != NULL &&
-         list_search(conn->preferred_smsc_id, msg->sms.smsc_id, octstr_item_match) != NULL) {
+         gwlist_search(conn->preferred_smsc_id, msg->sms.smsc_id, octstr_item_match) != NULL) {
         return 1;
     }
 
@@ -511,9 +511,9 @@
         /* split msg */
         parts = sms_split(msg, NULL, NULL, NULL, NULL, 1, 
             counter_increase(split_msg_counter) & 0xff, 0xff, MAX_SMS_OCTETS);
-        if (list_len(parts) == 1) {
+        if (gwlist_len(parts) == 1) {
             /* don't create split_parts of sms fit into one */
-            list_destroy(parts, msg_destroy_item);
+            gwlist_destroy(parts, msg_destroy_item);
             parts = NULL;
         }
     }
@@ -521,7 +521,7 @@
     if (parts == NULL)
         ret = conn->send_msg(conn, msg);
     else {
-        long i, parts_len = list_len(parts);
+        long i, parts_len = gwlist_len(parts);
         struct split_parts *split = gw_malloc(sizeof(*split));
          /* must duplicate, because smsc2_route will destroy this msg */
         split->orig = msg_duplicate(msg);
@@ -530,13 +530,13 @@
         counter_set(split->parts_left, parts_len);
         debug("bb.sms.splits", 0, "new split_parts created %p", split);
         for (i = 0; i < parts_len; i++) {
-            msg = list_get(parts, i);
+            msg = gwlist_get(parts, i);
             msg->sms.split_parts = split;
             ret = conn->send_msg(conn, msg);
             if (ret < 0) {
                 if (i == 0) {
                     counter_destroy(split->parts_left);
-                    list_destroy(parts, msg_destroy_item);
+                    gwlist_destroy(parts, msg_destroy_item);
                     gw_free(split);
                     mutex_unlock(conn->flow_mutex);
                     return ret;
@@ -547,14 +547,14 @@
                  */
                 split->status = SMSCCONN_FAILED_REJECTED;
                 while (++i < parts_len) {
-                    msg_destroy(list_get(parts, i));
+                    msg_destroy(gwlist_get(parts, i));
                     counter_decrease(split->parts_left);
                 }
                 warning(0, "Could not send all parts of a split message");
                 break;
             }
         }
-        list_destroy(parts, NULL);
+        gwlist_destroy(parts, NULL);
     }
     mutex_unlock(conn->flow_mutex);
     return ret;
diff -ur kannel-1.4.0/gw/urltrans.c kannel-1.4.0.mod/gw/urltrans.c
--- kannel-1.4.0/gw/urltrans.c	2004-09-28 16:47:01.000000000 +0200
+++ kannel-1.4.0.mod/gw/urltrans.c	2006-03-24 16:50:55.000000000 +0100
@@ -175,7 +175,7 @@
 
 static void destroy_keyword_list(void *list)
 {
-    list_destroy(list, NULL);
+    gwlist_destroy(list, NULL);
 }
 
 
@@ -184,7 +184,7 @@
     URLTranslationList *trans;
     
     trans = gw_malloc(sizeof(URLTranslationList));
-    trans->list = list_create();
+    trans->list = gwlist_create();
     trans->dict = dict_create(1024, destroy_keyword_list);
     trans->names = dict_create(1024, destroy_keyword_list);
     return trans;
@@ -193,7 +193,7 @@
 
 void urltrans_destroy(URLTranslationList *trans) 
 {
-    list_destroy(trans->list, destroy_onetrans);
+    gwlist_destroy(trans->list, destroy_onetrans);
     dict_destroy(trans->names);
     dict_destroy(trans->dict);
     gw_free(trans);
@@ -211,33 +211,33 @@
     if (ot == NULL)
 	return -1;
 		
-    list_append(trans->list, ot);
+    gwlist_append(trans->list, ot);
     
     list2 = dict_get(trans->names, ot->name);
     if (list2 == NULL) {
-    	list2 = list_create();
+    	list2 = gwlist_create();
 	dict_put(trans->names, ot->name, list2);
     }
-    list_append(list2, ot);
+    gwlist_append(list2, ot);
 
     if (ot->keyword == NULL || ot->type == TRANSTYPE_SENDSMS)
     	return 0;
 
     list = dict_get(trans->dict, ot->keyword);
     if (list == NULL) {
-    	list = list_create();
+    	list = gwlist_create();
 	dict_put(trans->dict, ot->keyword, list);
     }
-    list_append(list, ot);
+    gwlist_append(list, ot);
 
-    for (i = 0; i < list_len(ot->aliases); ++i) {
-	alias = list_get(ot->aliases, i);
+    for (i = 0; i < gwlist_len(ot->aliases); ++i) {
+	alias = gwlist_get(ot->aliases, i);
 	list = dict_get(trans->dict, alias);
 	if (list == NULL) {
-	    list = list_create();
+	    list = gwlist_create();
 	    dict_put(trans->dict, alias, list);
 	}
-	list_append(list, ot);
+	gwlist_append(list, ot);
     }
 
 
@@ -251,22 +251,22 @@
     List *list;
     
     list = cfg_get_multi_group(cfg, octstr_imm("sms-service"));
-    while (list && (grp = list_extract_first(list)) != NULL) {
+    while (list && (grp = gwlist_extract_first(list)) != NULL) {
 	if (urltrans_add_one(trans, grp) == -1) {
-	    list_destroy(list, NULL);
+	    gwlist_destroy(list, NULL);
 	    return -1;
 	}
     }
-    list_destroy(list, NULL);
+    gwlist_destroy(list, NULL);
     
     list = cfg_get_multi_group(cfg, octstr_imm("sendsms-user"));
-    while (list && (grp = list_extract_first(list)) != NULL) {
+    while (list && (grp = gwlist_extract_first(list)) != NULL) {
 	if (urltrans_add_one(trans, grp) == -1) {
-	    list_destroy(list, NULL);
+	    gwlist_destroy(list, NULL);
 	    return -1;
 	}
     }
-    list_destroy(list, NULL);
+    gwlist_destroy(list, NULL);
 
     return 0;
 }
@@ -283,7 +283,7 @@
     if (text != NULL) {
         words = octstr_split_words(text);
         t = find_translation(trans, words, smsc, sender, receiver, &reject);
-        list_destroy(words, octstr_destroy_item);
+        gwlist_destroy(words, octstr_destroy_item);
     }
     
     if (reject)
@@ -304,7 +304,7 @@
     
     list = dict_get(trans->names, msg->sms.service);
     if (list != NULL) {
-       t = list_get(list, 0);
+       t = gwlist_get(list, 0);
     } else  {
        t = NULL;
     }
@@ -320,8 +320,8 @@
     int i;
 
     gw_assert(name != NULL);
-    for (i = 0; i < list_len(trans->list); ++i) {
-	t = list_get(trans->list, i);
+    for (i = 0; i < gwlist_len(trans->list); ++i) {
+	t = gwlist_get(trans->list, i);
 	if (t->type == TRANSTYPE_SENDSMS) {
 	    if (octstr_compare(name, t->username) == 0)
 		return t;
@@ -379,9 +379,9 @@
 
     if (request->sms.msgdata) {
         word_list = octstr_split_words(request->sms.msgdata);
-        num_words = list_len(word_list);
+        num_words = gwlist_len(word_list);
     } else {
-    	word_list = list_create();
+    	word_list = gwlist_create();
         num_words = 0;
     }
 
@@ -401,7 +401,7 @@
             if (t && octstr_len(t->dlr_url)) {
                 pattern = t->dlr_url;
             } else {
-                list_destroy(word_list, octstr_destroy_item);
+                gwlist_destroy(word_list, octstr_destroy_item);
                 return octstr_create("");
             }
         }
@@ -426,7 +426,7 @@
 	case 'k':
 	    if (num_words <= 0)
 		break;
-	    enc = octstr_duplicate(list_get(word_list, 0));
+	    enc = octstr_duplicate(gwlist_get(word_list, 0));
 	    octstr_url_encode(enc);
 	    octstr_append(result, enc);
 	    octstr_destroy(enc);
@@ -435,7 +435,7 @@
 	case 's':
 	    if (nextarg >= num_words)
 		break;
-	    enc = octstr_duplicate(list_get(word_list, nextarg));
+	    enc = octstr_duplicate(gwlist_get(word_list, nextarg));
 	    octstr_url_encode(enc);
 	    octstr_append(result, enc);
 	    octstr_destroy(enc);
@@ -445,7 +445,7 @@
 	case 'S':
 	    if (nextarg >= num_words)
 		break;
-	    temp = list_get(word_list, nextarg);
+	    temp = gwlist_get(word_list, nextarg);
 	    for (i = 0; i < octstr_len(temp); ++i) {
 		if (octstr_get_char(temp, i) == '*')
 		    octstr_append_char(result, '~');
@@ -457,7 +457,7 @@
 
 	case 'r':
 	    for (j = nextarg; j < num_words; ++j) {
-		enc = octstr_duplicate(list_get(word_list, j));
+		enc = octstr_duplicate(gwlist_get(word_list, j));
 		octstr_url_encode(enc);
 		if (j != nextarg)
 		    octstr_append_char(result, '+');
@@ -516,7 +516,7 @@
 
 	case 'a':
 	    for (j = 0; j < num_words; ++j) {
-		enc = octstr_duplicate(list_get(word_list, j));
+		enc = octstr_duplicate(gwlist_get(word_list, j));
 		octstr_url_encode(enc);
 		if (j > 0)
 		    octstr_append_char(result, '+');
@@ -676,7 +676,7 @@
     octstr_destroy(url);
     octstr_destroy(reply);
 
-    list_destroy(word_list, octstr_destroy_item);
+    gwlist_destroy(word_list, octstr_destroy_item);
     return result;
 }
 
@@ -977,15 +977,15 @@
 
 	aliases = cfg_get(grp, octstr_imm("aliases"));
 	if (aliases == NULL)
-	    ot->aliases = list_create();
+	    ot->aliases = gwlist_create();
 	else {
 	    long i;
 	    Octstr *os;
 
 	    ot->aliases = octstr_split(aliases, octstr_imm(";"));
 	    octstr_destroy(aliases);
-	    for (i = 0; i < list_len(ot->aliases); ++i) {
-		os = list_get(ot->aliases, i);
+	    for (i = 0; i < gwlist_len(ot->aliases); ++i) {
+		os = gwlist_get(ot->aliases, i);
 	    	octstr_convert_range(os, 0, octstr_len(os), tolower);
 	    }
 	}
@@ -1151,7 +1151,7 @@
     ot = p;
     if (ot != NULL) {
         octstr_destroy(ot->keyword);
-	list_destroy(ot->aliases, octstr_destroy_item);
+	gwlist_destroy(ot->aliases, octstr_destroy_item);
 	octstr_destroy(ot->dlr_url);
 	octstr_destroy(ot->pattern);
 	octstr_destroy(ot->prefix);
@@ -1162,7 +1162,7 @@
 	octstr_destroy(ot->split_suffix);
 	octstr_destroy(ot->header);
 	octstr_destroy(ot->footer);
-	list_destroy(ot->accepted_smsc, octstr_destroy_item);
+	gwlist_destroy(ot->accepted_smsc, octstr_destroy_item);
 	octstr_destroy(ot->name);
 	octstr_destroy(ot->username);
 	octstr_destroy(ot->password);
@@ -1200,7 +1200,7 @@
     int n;
 
     
-    n = list_len(words);
+    n = gwlist_len(words);
     /* check number of arguments */
     if (t->catch_all)
         return IS_OKAY;
@@ -1229,7 +1229,7 @@
 	 * translation only if smsc id is in accept string
 	 */
 	if (smsc && t->accepted_smsc) {
-        if (!list_search(t->accepted_smsc, smsc, octstr_item_match))              
+        if (!gwlist_search(t->accepted_smsc, smsc, octstr_item_match))              
             return NOT_ALLOWED;
     };
     if (smsc && t->accepted_smsc_regex)
@@ -1332,19 +1332,19 @@
 
     gw_assert(trans != NULL && word != NULL);
 
-    list = list_create();
-    for (i = 0; i < list_len(trans->list); ++i) {
-        t = list_get(trans->list, i);
+    list = gwlist_create();
+    for (i = 0; i < gwlist_len(trans->list); ++i) {
+        t = gwlist_get(trans->list, i);
         if (t->keyword == NULL) 
 	    continue;
 
         /* if regex feature is used try to match */
         if ((t->keyword_regex != NULL) && (gw_regex_exec(t->keyword_regex, word, n_match, p_match, 0) == 0))
-            list_append(list, t);
+            gwlist_append(list, t);
 
         /* otherwise look for exact match */
         if (octstr_compare(t->keyword, word) == 0) 
-            list_append(list, t);
+            gwlist_append(list, t);
 	}
     return list;
 }
@@ -1360,12 +1360,12 @@
     URLTranslation *t;
     List *list;
 
-    n = list_len(words);
+    n = gwlist_len(words);
     if (n == 0)
         return NULL;
     n = 1;
 
-    keyword = list_get(words, 0);
+    keyword = gwlist_get(words, 0);
     keyword = octstr_duplicate(keyword);
     octstr_convert_range(keyword, 0, octstr_len(keyword), tolower);
 
@@ -1375,8 +1375,8 @@
       pattern defined by the tranlsation's keyword
     */
     t = NULL;
-    for (i = 0; i < list_len(list); ++i) {
-        t = list_get(list, i);
+    for (i = 0; i < gwlist_len(list); ++i) {
+        t = gwlist_get(list, i);
 
         if (check_allowed_translation(t, smsc, sender, receiver, reject) == 0
             && check_num_args(t, words) == 0)
@@ -1390,7 +1390,7 @@
 	*reject = 0;
 
     octstr_destroy(keyword);    
-    list_destroy(list, NULL);
+    gwlist_destroy(list, NULL);
     return t;
 }
 
@@ -1407,8 +1407,8 @@
 
     list = dict_get(trans->dict, octstr_imm("default"));
     t = NULL;
-    for (i = 0; i < list_len(list); ++i) {
-	t = list_get(list, i);
+    for (i = 0; i < gwlist_len(list); ++i) {
+	t = gwlist_get(list, i);
 
     if (check_allowed_translation(t, smsc, sender, receiver, reject) == 0)
         break;
@@ -1431,10 +1431,10 @@
 
     list = dict_get(trans->dict, octstr_imm("black-list"));
     t = NULL;
-    for (i = 0; i < list_len(list); ++i) {
-	t = list_get(list, i);
+    for (i = 0; i < gwlist_len(list); ++i) {
+	t = gwlist_get(list, i);
 	if (smsc && t->accepted_smsc) {
-	    if (!list_search(t->accepted_smsc, smsc, octstr_item_match)) {
+	    if (!gwlist_search(t->accepted_smsc, smsc, octstr_item_match)) {
 		t = NULL;
 		continue;
 	    }
diff -ur kannel-1.4.0/gw/wap-appl.c kannel-1.4.0.mod/gw/wap-appl.c
--- kannel-1.4.0/gw/wap-appl.c	2004-08-26 01:51:54.000000000 +0200
+++ kannel-1.4.0.mod/gw/wap-appl.c	2006-03-24 16:50:55.000000000 +0100
@@ -244,9 +244,9 @@
 void wap_appl_init(Cfg *cfg) 
 {
     gw_assert(run_status == limbo);
-    queue = list_create();
+    queue = gwlist_create();
     fetches = counter_create();
-    list_add_producer(queue);
+    gwlist_add_producer(queue);
     run_status = running;
     charsets = wml_charsets();
     caller = http_caller_create();
@@ -265,7 +265,7 @@
     gw_assert(run_status == running);
     run_status = terminating;
     
-    list_remove_producer(queue);
+    gwlist_remove_producer(queue);
     gwthread_join_every(main_thread);
     
     http_caller_signal_shutdown(caller);
@@ -274,8 +274,8 @@
     wap_map_destroy(); 
     wap_map_user_destroy(); 
     http_caller_destroy(caller);
-    list_destroy(queue, wap_event_destroy_item);
-    list_destroy(charsets, octstr_destroy_item);
+    gwlist_destroy(queue, wap_event_destroy_item);
+    gwlist_destroy(charsets, octstr_destroy_item);
     counter_destroy(fetches);
 }
 
@@ -283,14 +283,14 @@
 void wap_appl_dispatch(WAPEvent *event) 
 {
     gw_assert(run_status == running);
-    list_produce(queue, event);
+    gwlist_produce(queue, event);
 }
 
 
 long wap_appl_get_load(void) 
 {
     gw_assert(run_status == running);
-    return counter_value(fetches) + list_len(queue);
+    return counter_value(fetches) + gwlist_len(queue);
 }
 
 
@@ -312,7 +312,7 @@
     long sid;
     WAPAddrTuple *tuple;
     
-    while (run_status == running && (ind = list_consume(queue)) != NULL) {
+    while (run_status == running && (ind = gwlist_consume(queue)) != NULL) {
     switch (ind->type) {
     case S_MethodInvoke_Ind:
         res = wap_event_create(S_MethodInvoke_Res);
@@ -512,9 +512,9 @@
     long i, len;
     
     gw_assert(charsets != NULL);
-    len = list_len(charsets);
+    len = gwlist_len(charsets);
     for (i = 0; i < len; i++) {
-        unsigned char *charset = octstr_get_cstr(list_get(charsets, i));
+        unsigned char *charset = octstr_get_cstr(gwlist_get(charsets, i));
         if (!http_charset_accepted(headers, charset))
             http_header_add(headers, "Accept-Charset", charset);
     }
@@ -735,7 +735,7 @@
         orig_event->u.S_MethodInvoke_Ind.request_headers :
         orig_event->u.S_Unit_MethodInvoke_Ind.request_headers;
     if (device_headers == NULL)
-        device_headers = list_create();
+        device_headers = gwlist_create();
 
     /* 
      * We are acting as a proxy. Hence ensure we log a correct HTTP response
@@ -1149,7 +1149,7 @@
     if (send_msisdn_header == NULL)
         send_msisdn_header = octstr_create("X-WAP-Network-Client-MSISDN");
 
-    actual_headers = list_create();
+    actual_headers = gwlist_create();
     
     if (session_headers != NULL)
         http_header_combine(actual_headers, session_headers);
@@ -1204,7 +1204,7 @@
     if (octstr_str_compare(method, "GET")  == 0 && 
         octstr_compare(url, magic_url) == 0) {
         ret = HTTP_OK;
-        resp_headers = list_create();
+        resp_headers = gwlist_create();
         http_header_add(resp_headers, "Content-Type", "text/vnd.wap.wml");
         content_body = octstr_create(HEALTH_DECK);
         octstr_destroy(request_body);
@@ -1417,7 +1417,7 @@
     /* Currently we don't know or care about any capabilities,
      * though it is likely that "Extended Methods" will be
      * the first. */
-    return list_create();
+    return gwlist_create();
 }
 
 
@@ -1445,7 +1445,7 @@
 
     split_header_list(headers, &inh, "Accept-Application");
     
-    if (*headers == NULL || list_len(inh) == 0) {
+    if (*headers == NULL || gwlist_len(inh) == 0) {
         http_header_add(*application_headers, "Accept-Application", "wml ua");
         debug("wap.appl.push", 0, "APPL: No push application, assuming wml"
               " ua");
@@ -1458,7 +1458,7 @@
     coded_value = NULL;
     appid_value = NULL;
 
-    while (list_len(inh) > 0) {
+    while (gwlist_len(inh) > 0) {
         http_header_get(inh, i, &appid_name, &coded_octstr);
 
         /* Greatest value reserved by WINA is 0xFF00 0000*/
@@ -1507,14 +1507,14 @@
 
     split_header_list(headers, &inb, "Bearer-Indication");
 
-    if (list_len(inb) == 0) {
+    if (gwlist_len(inb) == 0) {
         debug("wap.appl.push", 0, "APPL: No bearer indication headers,"
               " continuing");
         http_destroy_headers(inb);
         return;  
     }
 
-    if (list_len(inb) > 1) {
+    if (gwlist_len(inb) > 1) {
         error(0, "APPL: To many bearer indication header(s), skipping"
               " them");
         http_destroy_headers(inb);
@@ -1580,7 +1580,7 @@
 
     decode_bearer_indication(&push_headers, &bearer_headers);
 
-    if (list_len(bearer_headers) == 0) {
+    if (gwlist_len(bearer_headers) == 0) {
         http_destroy_headers(bearer_headers);
         ppg_event->u.Pom_Connect_Ind.bearer_indication = NULL;
     } else
@@ -1675,7 +1675,7 @@
    
     decode_bearer_indication(&push_headers, &bearer_headers);
 
-    if (list_len(bearer_headers) == 0) {
+    if (gwlist_len(bearer_headers) == 0) {
         http_destroy_headers(bearer_headers);
         ppg_event->u.Pom_Resume_Ind.bearer_indication = NULL;
     } else 
diff -ur kannel-1.4.0/gw/wap-maps.c kannel-1.4.0.mod/gw/wap-maps.c
--- kannel-1.4.0/gw/wap-maps.c	2004-01-22 15:08:24.000000000 +0100
+++ kannel-1.4.0.mod/gw/wap-maps.c	2006-03-24 16:50:55.000000000 +0100
@@ -106,7 +106,7 @@
     struct url_map_struct *entry;
 
     if (url_map == NULL) 
-        url_map = list_create();
+        url_map = gwlist_create();
 
     entry = gw_malloc(sizeof(*entry));
     entry->name = name;
@@ -117,7 +117,7 @@
     entry->send_msisdn_format = send_msisdn_format;
     entry->accept_cookies = accept_cookies;
     
-    list_append(url_map, entry);
+    gwlist_append(url_map, entry);
 }
 
 
@@ -155,8 +155,8 @@
     struct url_map_struct *entry;
 
     if (url_map != NULL) {
-        for (i = 0; i < list_len(url_map); i++) {
-            entry = list_get(url_map, i);
+        for (i = 0; i < gwlist_len(url_map); i++) {
+            entry = gwlist_get(url_map, i);
             octstr_destroy(entry->name);
             octstr_destroy(entry->url);
             octstr_destroy(entry->map_url);
@@ -165,7 +165,7 @@
             octstr_destroy(entry->send_msisdn_format);
             gw_free(entry);
         }
-        list_destroy(url_map, NULL);
+        gwlist_destroy(url_map, NULL);
     }
     url_map = NULL;
 }
@@ -217,9 +217,9 @@
     *accept_cookies = -1;
 
     debug("wsp",0,"WSP: Mapping url <%s>", octstr_get_cstr(*osp));
-    for (i = 0; url_map && i < list_len(url_map); i++) {
+    for (i = 0; url_map && i < gwlist_len(url_map); i++) {
         struct url_map_struct *entry;
-        entry = list_get(url_map, i);
+        entry = gwlist_get(url_map, i);
 
         /* 
         debug("wsp",0,"WSP: matching <%s> with <%s>", 
diff -ur kannel-1.4.0/gw/wap_push_ota.c kannel-1.4.0.mod/gw/wap_push_ota.c
--- kannel-1.4.0/gw/wap_push_ota.c	2004-06-20 20:46:12.000000000 +0200
+++ kannel-1.4.0.mod/gw/wap_push_ota.c	2006-03-24 16:50:55.000000000 +0100
@@ -166,8 +166,8 @@
 void wap_push_ota_init(wap_dispatch_func_t *wsp_dispatch,
                        wap_dispatch_func_t *wsp_unit_dispatch)
 {
-    ota_queue = list_create();
-    list_add_producer(ota_queue);
+    ota_queue = gwlist_create();
+    gwlist_add_producer(ota_queue);
 
     dispatch_to_wsp = wsp_dispatch;
     dispatch_to_wsp_unit = wsp_unit_dispatch;
@@ -183,17 +183,17 @@
 {
     gw_assert(run_status == running);
     run_status = terminating;
-    list_remove_producer(ota_queue);
+    gwlist_remove_producer(ota_queue);
     gwthread_join_every(main_thread);
 
-    list_destroy(ota_queue, wap_event_destroy_item);
+    gwlist_destroy(ota_queue, wap_event_destroy_item);
     bearerbox_address_destroy(bearerbox);
 }
 
 void wap_push_ota_dispatch_event(WAPEvent *e)
 {
     gw_assert(run_status == running); 
-    list_produce(ota_queue, e);
+    gwlist_produce(ota_queue, e);
 }
 
 /*
@@ -218,7 +218,7 @@
 {
     WAPEvent *e;
 
-    while (run_status == running && (e = list_consume(ota_queue)) != NULL) {
+    while (run_status == running && (e = gwlist_consume(ota_queue)) != NULL) {
         handle_ota_event(e);
     } 
 
@@ -570,7 +570,7 @@
 
     i = 0;
     appid_os = octstr_create("");
-    len = (size_t) list_len(headers);
+    len = (size_t) gwlist_len(headers);
 
     gw_assert(len);
 
diff -ur kannel-1.4.0/gw/wap_push_pap_mime.c kannel-1.4.0.mod/gw/wap_push_pap_mime.c
--- kannel-1.4.0/gw/wap_push_pap_mime.c	2004-01-22 15:08:24.000000000 +0100
+++ kannel-1.4.0.mod/gw/wap_push_pap_mime.c	2006-03-24 16:50:55.000000000 +0100
@@ -631,7 +631,7 @@
     }
 
     octstr_delete(*body_part, header_pos, next_header_pos - header_pos);
-    list_append(*content_headers, octstr_duplicate(content_header));
+    gwlist_append(*content_headers, octstr_duplicate(content_header));
     octstr_destroy(content_header);
 
     return 1;
diff -ur kannel-1.4.0/gw/wap_push_ppg.c kannel-1.4.0.mod/gw/wap_push_ppg.c
--- kannel-1.4.0/gw/wap_push_ppg.c	2004-06-20 20:26:16.000000000 +0200
+++ kannel-1.4.0.mod/gw/wap_push_ppg.c	2006-03-24 16:50:55.000000000 +0100
@@ -399,13 +399,13 @@
 {
     user_configuration = read_ppg_config(cfg);
     if (user_configuration != USER_CONFIGURATION_NOT_ADDED) {
-        ppg_queue = list_create();
-        list_add_producer(ppg_queue);
-        pap_queue = list_create();
-        list_add_producer(pap_queue);
+        ppg_queue = gwlist_create();
+        gwlist_add_producer(ppg_queue);
+        pap_queue = gwlist_create();
+        gwlist_add_producer(pap_queue);
         push_id_counter = counter_create();
-        ppg_machines = list_create();
-        ppg_unit_pushes = list_create();
+        ppg_machines = gwlist_create();
+        ppg_unit_pushes = gwlist_create();
 
         dispatch_to_ota = ota_dispatch;
         dispatch_to_appl = appl_dispatch;
@@ -435,8 +435,8 @@
      if (user_configuration != USER_CONFIGURATION_NOT_ADDED) {
          gw_assert(run_status == running);
          run_status = terminating;
-         list_remove_producer(ppg_queue);
-         list_remove_producer(pap_queue);
+         gwlist_remove_producer(ppg_queue);
+         gwlist_remove_producer(pap_queue);
          octstr_destroy(ppg_url);
          http_close_all_ports();
          dict_destroy(http_clients);
@@ -456,24 +456,24 @@
          gwthread_join_every(ota_read_thread);
          gwthread_join_every(pap_request_thread);
 
-         list_destroy(ppg_queue, wap_event_destroy_item);
-         list_destroy(pap_queue, pap_event_destroy_item);
+         gwlist_destroy(ppg_queue, wap_event_destroy_item);
+         gwlist_destroy(pap_queue, pap_event_destroy_item);
          counter_destroy(push_id_counter);
      
          debug("wap.push.ppg", 0, "PPG: %ld push session machines left.",
-               list_len(ppg_machines));
-         list_destroy(ppg_machines, session_machine_destroy);
+               gwlist_len(ppg_machines));
+         gwlist_destroy(ppg_machines, session_machine_destroy);
 
          debug("wap_push_ppg", 0, "PPG: %ld unit pushes left", 
-               list_len(ppg_unit_pushes));
-         list_destroy(ppg_unit_pushes, push_machine_destroy);
+               gwlist_len(ppg_unit_pushes));
+         gwlist_destroy(ppg_unit_pushes, push_machine_destroy);
      }
 }
 
 void wap_push_ppg_dispatch_event(WAPEvent *e)
 {
     gw_assert(run_status == running);
-    list_produce(ppg_queue, e);
+    gwlist_produce(ppg_queue, e);
 }
 
 /*
@@ -487,7 +487,7 @@
     PPGSessionMachine *sm;
 
     gw_assert(tuple);
-    sm = list_search(ppg_machines, tuple->remote->address, session_has_addr);
+    sm = gwlist_search(ppg_machines, tuple->remote->address, session_has_addr);
 
     return sm;
 }
@@ -502,7 +502,7 @@
     PPGSessionMachine *sm;
 
     gw_assert(sid >= 0);
-    sm = list_search(ppg_machines, &sid, session_has_sid);
+    sm = gwlist_search(ppg_machines, &sid, session_has_sid);
 
     return sm;
 }
@@ -565,7 +565,7 @@
      if ((list = cfg_get_multi_group(cfg, octstr_imm("wap-push-user")))
               == NULL) {
          panic(0, "No user group but ppg not trusted, stopping");
-         list_destroy(list, NULL);
+         gwlist_destroy(list, NULL);
          cfg_destroy(cfg); 
          return USER_CONFIGURATION_NOT_ADDED;
      }
@@ -632,7 +632,7 @@
 {
     WAPEvent *e;
 
-    while (run_status == running && (e = list_consume(ppg_queue)) != NULL) {
+    while (run_status == running && (e = gwlist_consume(ppg_queue)) != NULL) {
         handle_internal_event(e);
     } 
 }
@@ -700,7 +700,7 @@
 
         p = pap_event_create(ip, url, push_headers, mime_content, cgivars,
                              client);
-        list_produce(pap_queue, p);
+        gwlist_produce(pap_queue, p);
     }
 }
 
@@ -723,7 +723,7 @@
         
         p = pap_event_create(ip, url, push_headers, mime_content, cgivars, 
                              client);
-        list_produce(pap_queue, p);
+        gwlist_produce(pap_queue, p);
     }
 }
 #endif
@@ -769,7 +769,7 @@
     
     http_status = 0;                
   
-    while (run_status == running && (p = list_consume(pap_queue)) != NULL) {
+    while (run_status == running && (p = gwlist_consume(pap_queue)) != NULL) {
 
         http_status = HTTP_NOT_FOUND;
         pap_event_unpack(p, &ip, &url, &push_headers, &mime_content, 
@@ -1306,7 +1306,7 @@
     #define INTEGER(name) m->name = 0;
     #define OCTSTR(name) m->name = NULL;
     #define ADDRTUPLE(name) m->name = NULL;
-    #define PUSHMACHINES(name) m->name = list_create();
+    #define PUSHMACHINES(name) m->name = gwlist_create();
     #define CAPABILITIES(name) m->name = NULL;
     #define MACHINE(fields) fields
     #include "wap_ppg_session_machine.def"
@@ -1317,7 +1317,7 @@
         wsp_cap_duplicate_list(e->u.Push_Message.pi_capabilities);
     m->preferconfirmed_value = PAP_CONFIRMED;    
 
-    list_append(ppg_machines, m);
+    gwlist_append(ppg_machines, m);
     debug("wap.push.ppg", 0, "PPG: Created PPGSessionMachine %ld",
           m->session_id);
 
@@ -1432,7 +1432,7 @@
     if (machines == NULL)
         return;
 
-    list_destroy(machines, push_machine_destroy);
+    gwlist_destroy(machines, push_machine_destroy);
 }
 
 static int session_has_addr(void *a, void *b)
@@ -1896,13 +1896,13 @@
     gw_assert(push_headers);
 
     cache_directives = http_header_find_all(push_headers, "Cache-Control");
-    if (list_len(cache_directives) == 0) {
+    if (gwlist_len(cache_directives) == 0) {
         http_destroy_headers(cache_directives);
         return 1;
     }
 
     i = 0;
-    while (i < list_len(cache_directives)) {
+    while (i < gwlist_len(cache_directives)) {
         http_header_get(cache_directives, i, &header_name, &header_value);
         if (octstr_compare(header_value, octstr_imm("no-transform")) == 0) {
             http_destroy_headers(cache_directives);
@@ -2136,7 +2136,7 @@
 {
     PPGSessionMachine *sm;
     
-    sm = list_search(ppg_machines, caddr, session_has_pi_client_address);
+    sm = gwlist_search(ppg_machines, caddr, session_has_pi_client_address);
 
     return sm;
 }
@@ -2250,10 +2250,10 @@
     push_machine_assert(pm);
 
     if (cless) {
-        list_delete_equal(ppg_unit_pushes, pm);
+        gwlist_delete_equal(ppg_unit_pushes, pm);
     } else {
         session_machine_assert(sm);
-        list_delete_equal(sm->push_machines, pm);
+        gwlist_delete_equal(sm->push_machines, pm);
     }
 
     push_machine_destroy(pm);
@@ -2292,12 +2292,12 @@
         return !duplicate_push_id;
     
     if (!cless) {
-       list_append(sm->push_machines, *pm);
+       gwlist_append(sm->push_machines, *pm);
        debug("wap.push.ppg", 0, "PPG: store_push_data: push machine %ld"
              " appended to push list of sm machine %ld", (*pm)->push_id, 
              sm->session_id);
     } else {
-       list_append(ppg_unit_pushes, *pm);
+       gwlist_append(ppg_unit_pushes, *pm);
        debug("wap.push.ppg", 0, "PPG: store_push_data: push machine %ld"
              " appended to unit push list", (*pm)->push_id);
     }
@@ -2349,11 +2349,11 @@
     long i;
 
     session_machine_assert(sm);
-    gw_assert(list_len(sm->push_machines) > 0);
+    gw_assert(gwlist_len(sm->push_machines) > 0);
 
     i = 0;
-    while (i < list_len(sm->push_machines)) {
-        pm = list_get(sm->push_machines, i);
+    while (i < gwlist_len(sm->push_machines)) {
+        pm = gwlist_get(sm->push_machines, i);
         push_machine_assert(pm);
 
         if (pm->delivery_method == PAP_UNCONFIRMED) {
@@ -2384,8 +2384,8 @@
     reason = PAP_ABORT_USERPND;
     code = PAP_CAPABILITIES_MISMATCH;
     
-    while (list_len(sm->push_machines) > 0) {
-        pm = list_get(sm->push_machines, 0);
+    while (gwlist_len(sm->push_machines) > 0) {
+        pm = gwlist_get(sm->push_machines, 0);
         push_machine_assert(pm);
 
         pm = update_push_data_with_attribute(&sm, pm, reason, PAP_ABORTED);
@@ -2411,13 +2411,13 @@
 
     code = PAP_ABORT_USERPND;
     
-    while (list_len(sm->push_machines) > 0) {
-        pm = list_get(sm->push_machines, 0);
+    while (gwlist_len(sm->push_machines) > 0) {
+        pm = gwlist_get(sm->push_machines, 0);
         response_push_message(pm, code, status);
         remove_push_data(sm, pm, sm == NULL);
     }
 
-    list_delete_equal(ppg_machines, sm);
+    gwlist_delete_equal(ppg_machines, sm);
     session_machine_destroy(sm);
 }
 
@@ -2428,8 +2428,8 @@
 {
     session_machine_assert(sm);
 
-    if (list_len(sm->push_machines) == 0) {
-        list_delete_equal(ppg_machines, sm);
+    if (gwlist_len(sm->push_machines) == 0) {
+        gwlist_delete_equal(ppg_machines, sm);
         session_machine_destroy(sm);
     }
 }
@@ -2458,8 +2458,8 @@
 static PPGSessionMachine *update_session_data_with_headers(
     PPGSessionMachine *sm, PPGPushMachine *pm)
 {
-    list_delete_matching(sm->push_machines, &pm->push_id, push_has_pid);
-    list_append(sm->push_machines, pm);
+    gwlist_delete_matching(sm->push_machines, &pm->push_id, push_has_pid);
+    gwlist_append(sm->push_machines, pm);
 
     return sm;
 }
@@ -2497,7 +2497,7 @@
     gw_assert(pid >= 0);
     session_machine_assert(sm);
 
-    pm = list_search(sm->push_machines, &pid, push_has_pid);
+    pm = gwlist_search(sm->push_machines, &pid, push_has_pid);
 
     return pm;
 }
@@ -2521,7 +2521,7 @@
     gw_assert(pi_push_id);
     session_machine_assert(sm);
 
-    pm = list_search(sm->push_machines, pi_push_id, push_has_pi_push_id);
+    pm = gwlist_search(sm->push_machines, pi_push_id, push_has_pi_push_id);
 
     return pm;
 }
@@ -2532,7 +2532,7 @@
     PPGPushMachine *pm;
 
     gw_assert(pi_push_id);
-    pm = list_search(ppg_unit_pushes, pi_push_id, push_has_pi_push_id);
+    pm = gwlist_search(ppg_unit_pushes, pi_push_id, push_has_pi_push_id);
 
     return pm;
 }
@@ -2597,13 +2597,13 @@
     }
 
     if (*sm != NULL){
-        list_delete_matching((**sm).push_machines, &qm->push_id, push_has_pid);
-        list_append((**sm).push_machines, qm);
-        list_delete_equal(ppg_machines, *sm);
-        list_append(ppg_machines, *sm);
+        gwlist_delete_matching((**sm).push_machines, &qm->push_id, push_has_pid);
+        gwlist_append((**sm).push_machines, qm);
+        gwlist_delete_equal(ppg_machines, *sm);
+        gwlist_append(ppg_machines, *sm);
     } else {
-        list_delete_matching(ppg_unit_pushes, &qm->push_id, push_has_pid);
-        list_append(ppg_unit_pushes, qm);
+        gwlist_delete_matching(ppg_unit_pushes, &qm->push_id, push_has_pid);
+        gwlist_append(ppg_unit_pushes, qm);
     }
 
     return qm;
@@ -2622,8 +2622,8 @@
     m->addr_tuple->remote->port = port;
     m->client_capabilities = wsp_cap_duplicate_list(caps);
 
-    list_delete_equal(ppg_machines, m);
-    list_append(ppg_machines, m);
+    gwlist_delete_equal(ppg_machines, m);
+    gwlist_append(ppg_machines, m);
 
     return m;
 }
diff -ur kannel-1.4.0/gw/wap_push_ppg_pushuser.c kannel-1.4.0.mod/gw/wap_push_ppg_pushuser.c
--- kannel-1.4.0/gw/wap_push_ppg_pushuser.c	2004-01-29 10:07:07.000000000 +0100
+++ kannel-1.4.0.mod/gw/wap_push_ppg_pushuser.c	2006-03-24 16:50:55.000000000 +0100
@@ -161,13 +161,13 @@
     next_try = dict_create(number_of_pushes, octstr_destroy_item);
     users = pushusers_create(number_of_users);
     gw_assert(list);
-    while (list && (grp = list_extract_first(list))) {
+    while (list && (grp = gwlist_extract_first(list))) {
         if (oneuser_add(grp) == -1) {
-	        list_destroy(list, NULL);
+	        gwlist_destroy(list, NULL);
             return 0;
         }
     }
-    list_destroy(list, NULL);
+    gwlist_destroy(list, NULL);
 
     return 1;
 }
@@ -178,7 +178,7 @@
     if (users == NULL)
         return;
 
-    list_destroy(users->list, destroy_oneuser);
+    gwlist_destroy(users->list, destroy_oneuser);
     dict_destroy(users->names);
     gw_free(users);
 }
@@ -337,14 +337,14 @@
 }
 
 int wap_push_ppg_pushuser_search_ip_from_wildcarded_list(Octstr *haystack, 
-        Octstr *needle, Octstr *list_sep, Octstr *ip_sep)
+        Octstr *needle, Octstr *gwlist_sep, Octstr *ip_sep)
 {
     List *ips;
     long i;
     Octstr *configured_ip;
 
     gw_assert(haystack);
-    gw_assert(list_sep);
+    gw_assert(gwlist_sep);
     gw_assert(ip_sep);
 
     /*There are no wildcards in the list*/    
@@ -358,18 +358,18 @@
     
     /*There are wildcards in the list*/
     configured_ip = NULL;
-    ips = octstr_split(haystack, list_sep);
-    for (i = 0; i < list_len(ips); ++i) {
-        configured_ip = list_get(ips, i);
+    ips = octstr_split(haystack, gwlist_sep);
+    for (i = 0; i < gwlist_len(ips); ++i) {
+        configured_ip = gwlist_get(ips, i);
         if (wildcarded_ip_found(configured_ip, needle, ip_sep))
 	        goto found;
     }
 
-    list_destroy(ips, octstr_destroy_item);
+    gwlist_destroy(ips, octstr_destroy_item);
     return 0;
 
 found:
-    list_destroy(ips, octstr_destroy_item);
+    gwlist_destroy(ips, octstr_destroy_item);
     return 1;
 }
 
@@ -430,13 +430,13 @@
 
 static void destroy_users_list(void *l)
 {
-    list_destroy(l, NULL);
+    gwlist_destroy(l, NULL);
 }
 
 static WAPPushUserList *pushusers_create(long number_of_users) 
 {
     users = gw_malloc(sizeof(WAPPushUserList));
-    users->list = list_create();
+    users->list = gwlist_create();
     users->names = dict_create(number_of_users, destroy_users_list);
 
     return users;
@@ -625,11 +625,11 @@
     if (u == NULL)
         return -1;
 
-    list_append(users->list, u);
+    gwlist_append(users->list, u);
 
     list = dict_get(users->names, u->username);
     if (list == NULL) {
-        list = list_create();
+        list = gwlist_create();
         dict_put(users->names, u->username, list);
     }
 
@@ -648,8 +648,8 @@
     if ((list = dict_get(users->names, username)) == NULL)
          return NULL;
 
-    for (i = 0; i < list_len(users->list); ++i) {
-         u = list_get(users->list, i);
+    for (i = 0; i < gwlist_len(users->list); ++i) {
+         u = gwlist_get(users->list, i);
          if (octstr_compare(u->username, username) == 0)
 	         return u;
     }
@@ -676,22 +676,22 @@
     ip_fragments = octstr_split(ip, ip_sep);
     needle_fragments = octstr_split(needle, ip_sep);
 
-    gw_assert(list_len(ip_fragments) == list_len(needle_fragments));
-    for (i = 0; i < list_len(ip_fragments); ++i) {
-        ip_fragment = list_get(ip_fragments, i);
-        needle_fragment = list_get(needle_fragments, i);
+    gw_assert(gwlist_len(ip_fragments) == gwlist_len(needle_fragments));
+    for (i = 0; i < gwlist_len(ip_fragments); ++i) {
+        ip_fragment = gwlist_get(ip_fragments, i);
+        needle_fragment = gwlist_get(needle_fragments, i);
         if (octstr_compare(ip_fragment, needle_fragment) != 0 && 
                 octstr_compare(ip_fragment, octstr_imm("*")) != 0)
  	        goto not_found;
     }
 
-    list_destroy(ip_fragments, octstr_destroy_item);
-    list_destroy(needle_fragments, octstr_destroy_item);   
+    gwlist_destroy(ip_fragments, octstr_destroy_item);
+    gwlist_destroy(needle_fragments, octstr_destroy_item);   
     return 1;
 
 not_found:
-    list_destroy(ip_fragments, octstr_destroy_item);
-    list_destroy(needle_fragments, octstr_destroy_item);
+    gwlist_destroy(ip_fragments, octstr_destroy_item);
+    gwlist_destroy(needle_fragments, octstr_destroy_item);
     return 0;
 }
 
@@ -792,11 +792,11 @@
     octstr_base64_to_binary(header_value);
     auth_list = octstr_split(header_value, octstr_imm(":"));
 
-    if (list_len(auth_list) != 2)
+    if (gwlist_len(auth_list) != 2)
         goto no_response2;
     
-    *username = octstr_duplicate(list_get(auth_list, 0));
-    *password = octstr_duplicate(list_get(auth_list, 1));
+    *username = octstr_duplicate(gwlist_get(auth_list, 0));
+    *password = octstr_duplicate(gwlist_get(auth_list, 1));
 
     if (username == NULL) {
         goto no_response2;
@@ -808,7 +808,7 @@
 
     debug("wap.push.ppg.pushuser", 0, "we have an username and a password in" 
           " authorization header");
-    list_destroy(auth_list, octstr_destroy_item);
+    gwlist_destroy(auth_list, octstr_destroy_item);
     octstr_destroy(header_value);
     return HEADER_AUTHENTICATION;
 
@@ -817,7 +817,7 @@
     return NO_USERNAME;
 
 no_response2:   
-    list_destroy(auth_list, octstr_destroy_item);
+    gwlist_destroy(auth_list, octstr_destroy_item);
     octstr_destroy(header_value);
     return NO_USERNAME;
 
@@ -825,7 +825,7 @@
     return NO_USERNAME;
 
 no_response4:   
-    list_destroy(auth_list, octstr_destroy_item);
+    gwlist_destroy(auth_list, octstr_destroy_item);
     octstr_destroy(header_value);
     return NO_PASSWORD;
 }
@@ -898,8 +898,8 @@
 
     if (u->denied_prefix != NULL) {
         denied = octstr_split(u->denied_prefix, octstr_imm(";"));
-        for (i = 0; i < list_len(denied); ++i) {
-             listed_prefix = list_get(denied, i);
+        for (i = 0; i < gwlist_len(denied); ++i) {
+             listed_prefix = gwlist_get(denied, i);
              if (u->country_prefix != NULL)
                  octstr_insert(listed_prefix, u->country_prefix, 0);
              if (compare_octstr_sequence(number, listed_prefix, 
@@ -919,8 +919,8 @@
 
     if (u->allowed_prefix != NULL) {
     allowed = octstr_split(u->allowed_prefix, octstr_imm(";"));
-    for (i = 0; i < list_len(allowed); ++i) {
-         listed_prefix = list_get(allowed, i);
+    for (i = 0; i < gwlist_len(allowed); ++i) {
+         listed_prefix = gwlist_get(allowed, i);
          if (u->country_prefix != NULL)
              octstr_insert(listed_prefix, u->country_prefix, 0);
          if (compare_octstr_sequence(number, listed_prefix, 
@@ -940,13 +940,13 @@
  * functions are implemented.
  */
 denied:         
-    list_destroy(allowed, octstr_destroy_item);
-    list_destroy(denied, octstr_destroy_item);
+    gwlist_destroy(allowed, octstr_destroy_item);
+    gwlist_destroy(denied, octstr_destroy_item);
     return 0;
 
 allowed:      
-    list_destroy(allowed, octstr_destroy_item);
-    list_destroy(denied, octstr_destroy_item);
+    gwlist_destroy(allowed, octstr_destroy_item);
+    gwlist_destroy(denied, octstr_destroy_item);
     return 1;
 
 no_configuration:
@@ -956,7 +956,7 @@
     return 0;
 
 no_allowed_config:
-    list_destroy(denied, octstr_destroy_item);
+    gwlist_destroy(denied, octstr_destroy_item);
     return 1;
 }
 
diff -ur kannel-1.4.0/gw/wap_push_ppg_pushuser.h kannel-1.4.0.mod/gw/wap_push_ppg_pushuser.h
--- kannel-1.4.0/gw/wap_push_ppg_pushuser.h	2004-01-22 15:08:24.000000000 +0100
+++ kannel-1.4.0.mod/gw/wap_push_ppg_pushuser.h	2006-03-24 16:50:55.000000000 +0100
@@ -128,7 +128,7 @@
     Octstr *number);
 
 int wap_push_ppg_pushuser_search_ip_from_wildcarded_list(Octstr *haystack, 
-    Octstr *needle, Octstr *list_sep, Octstr *ip_sep);
+    Octstr *needle, Octstr *gwlist_sep, Octstr *ip_sep);
 
 /*
  * Returns smsc pushes by this user must use, or NULL when error.
diff -ur kannel-1.4.0/gw/wapbox.c kannel-1.4.0.mod/gw/wapbox.c
--- kannel-1.4.0/gw/wapbox.c	2004-08-28 20:09:19.000000000 +0200
+++ kannel-1.4.0.mod/gw/wapbox.c	2006-03-24 16:50:55.000000000 +0100
@@ -442,12 +442,12 @@
             sms_datagrams = sms_split(msg, NULL, NULL, NULL, NULL, concatenation, 
                                       msg_sequence, max_messages, MAX_SMS_OCTETS);
             debug("wap",0,"WDP (wapbox): delivering %ld segments to bearerbox",
-                  list_len(sms_datagrams));
-            while ((part = list_extract_first(sms_datagrams)) != NULL) {
+                  gwlist_len(sms_datagrams));
+            while ((part = gwlist_extract_first(sms_datagrams)) != NULL) {
 	            write_to_bearerbox(part);
             }
 
-            list_destroy(sms_datagrams, NULL);
+            gwlist_destroy(sms_datagrams, NULL);
             msg_destroy(msg);
         }
     }
@@ -535,7 +535,7 @@
     octstr_destroy(http_proxy_host);
     octstr_destroy(http_proxy_username);
     octstr_destroy(http_proxy_password);
-    list_destroy(http_proxy_exceptions, octstr_destroy_item);
+    gwlist_destroy(http_proxy_exceptions, octstr_destroy_item);
 
     grp = cfg_get_single_group(cfg, octstr_imm("wapbox"));
     if (grp == NULL) {
@@ -607,7 +607,7 @@
 
     /* configure wap-url-map */
     groups = cfg_get_multi_group(cfg, octstr_imm("wap-url-map"));
-    while (groups && (grp = list_extract_first(groups)) != NULL) {
+    while (groups && (grp = gwlist_extract_first(groups)) != NULL) {
         Octstr *name, *url, *map_url, *send_msisdn_query;
         Octstr *send_msisdn_header, *send_msisdn_format;
         int accept_cookies;
@@ -632,11 +632,11 @@
              octstr_get_cstr(send_msisdn_header), 
              octstr_get_cstr(send_msisdn_format), (accept_cookies ? "yes" : "no"));
     }
-    list_destroy(groups, NULL);
+    gwlist_destroy(groups, NULL);
 
     /* configure wap-user-map */
     groups = cfg_get_multi_group(cfg, octstr_imm("wap-user-map"));
-    while (groups && (grp = list_extract_first(groups)) != NULL) {
+    while (groups && (grp = gwlist_extract_first(groups)) != NULL) {
         Octstr *name, *user, *pass, *msisdn;
 
         name = cfg_get(grp, octstr_imm("name"));
@@ -651,7 +651,7 @@
              octstr_get_cstr(user), octstr_get_cstr(pass),
              octstr_get_cstr(msisdn));
     }
-    list_destroy(groups, NULL);
+    gwlist_destroy(groups, NULL);
 
     cfg_destroy(cfg);
     /* XXX TO-DO: if(reload) implement wapbox.resume/mutex.unlock */
diff -ur kannel-1.4.0/gw/wml_compiler.c kannel-1.4.0.mod/gw/wml_compiler.c
--- kannel-1.4.0/gw/wml_compiler.c	2004-08-26 01:44:00.000000000 +0200
+++ kannel-1.4.0.mod/gw/wml_compiler.c	2006-03-24 16:50:55.000000000 +0100
@@ -447,21 +447,21 @@
 
     /* Attribute values. */
     len = wml_table_len(wml_attribute_values);
-    wml_attr_values_list = list_create();
+    wml_attr_values_list = gwlist_create();
 
     for (i = 0; i < len; i++) {
 	temp = hash_create(wml_attribute_values[i].text, 
 			   wml_attribute_values[i].token);
-	list_append(wml_attr_values_list, temp);
+	gwlist_append(wml_attr_values_list, temp);
     }
 
     /* URL values. */
     len = wml_table_len(wml_URL_values);
-    wml_URL_values_list = list_create();
+    wml_URL_values_list = gwlist_create();
 
     for (i = 0; i < len; i++) {
 	temp = hash_create(wml_URL_values[i].text, wml_URL_values[i].token);
-	list_append(wml_URL_values_list, temp);
+	gwlist_append(wml_URL_values_list, temp);
     }
 }
 
@@ -475,8 +475,8 @@
 {
     dict_destroy(wml_elements_dict);
     dict_destroy(wml_attributes_dict);
-    list_destroy(wml_attr_values_list, hash_destroy);
-    list_destroy(wml_URL_values_list, hash_destroy);
+    gwlist_destroy(wml_attr_values_list, hash_destroy);
+    gwlist_destroy(wml_URL_values_list, hash_destroy);
 }
 
 
@@ -744,7 +744,7 @@
 
     if ((attribute = dict_get(wml_attributes_dict, name)) != NULL) {
 	if (attr->children == NULL || 
-	    (hit = list_search(attribute->value_list, (void *)pattern, 
+	    (hit = gwlist_search(attribute->value_list, (void *)pattern, 
 			       hash_cmp)) == NULL) {
                 if(attribute->binary == 0x00) {
                     warning(0, "WML compiler: can't compile attribute %s%s%s%s", 
@@ -858,8 +858,8 @@
 	    return -1;
     } else {
 
-	for (i = 0; i < list_len(tokens); i++) {
-	    temp = list_get(tokens, i);
+	for (i = 0; i < gwlist_len(tokens); i++) {
+	    temp = gwlist_get(tokens, i);
 	    pos = octstr_search(attr_value, temp->item, 0);
 	    switch (pos) {
 	    case -1:
@@ -895,7 +895,7 @@
 	 */
 
 	if ((int) octstr_len(attr_value) > 0) {
-	    if (i < list_len(tokens))
+	    if (i < gwlist_len(tokens))
 		parse_attr_value(attr_value, tokens, wbxml, charset, default_esc);
 	    else
 		if (parse_st_octet_string(attr_value, 0, default_esc, wbxml) != 0)
@@ -1272,7 +1272,7 @@
     wbxml->wml_public_id = 0x00;
     wbxml->character_set = 0x00;
     wbxml->string_table_length = 0x00;
-    wbxml->string_table = list_create();
+    wbxml->string_table = gwlist_create();
     wbxml->wbxml_string = octstr_create("");
 
     return wbxml;
@@ -1287,7 +1287,7 @@
 static void wml_binary_destroy(wml_binary_t *wbxml)
 {
     if (wbxml != NULL) {
-	list_destroy(wbxml->string_table, NULL);
+	gwlist_destroy(wbxml->string_table, NULL);
 	octstr_destroy(wbxml->wbxml_string);
 	gw_free(wbxml);
     }
@@ -1394,7 +1394,7 @@
     attr = gw_malloc(sizeof(wml_attribute_t));
     attr->attribute = NULL;
     attr->binary = 0;
-    attr->value_list = list_create();
+    attr->value_list = gwlist_create();
 
     return attr;
 }
@@ -1427,7 +1427,7 @@
 	    node->binary = attributes[i].token;
 	else {
 	    temp = hash_create(attributes[i].text2, attributes[i].token);
-	    list_append(node->value_list, (void *)temp);
+	    gwlist_append(node->value_list, (void *)temp);
 	}	
 	i++;
     } while (attributes[i].text1 != NULL);
@@ -1470,7 +1470,7 @@
     node = p;
 
     octstr_destroy(node->attribute);
-    list_destroy(node->value_list, hash_destroy);
+    gwlist_destroy(node->value_list, hash_destroy);
     gw_free(node);
 }
 
@@ -1508,7 +1508,7 @@
     Octstr *name = NULL;
     List *name_list = NULL;
     
-    name_list = list_create();
+    name_list = gwlist_create();
 
     if ((child = node->children) != NULL) {
 	while (child != NULL) {
@@ -1520,14 +1520,14 @@
 		    return -1;
 		}
 
-		for (i = 0; i < list_len(name_list); i ++)
-		    if (octstr_compare(list_get(name_list, i), name) == 0) {
+		for (i = 0; i < gwlist_len(name_list); i ++)
+		    if (octstr_compare(gwlist_get(name_list, i), name) == 0) {
 			octstr_destroy(name);
 			status = -1;
 			break;
 		    }
 		if (status != -1)
-		    list_append(name_list, name);
+		    gwlist_append(name_list, name);
 		else
 		    break;
 	    }
@@ -1535,7 +1535,7 @@
 	}
     }
 
-    list_destroy(name_list, octstr_destroy_item);
+    gwlist_destroy(name_list, octstr_destroy_item);
 
     return status;
 }
@@ -1769,7 +1769,7 @@
     string_table_proposal_t *item = NULL;
     List *list = NULL;
 
-    list = list_create();
+    list = gwlist_create();
 
     string_table_collect_strings(node, list);
 
@@ -1783,12 +1783,12 @@
     }
 
     /* Memory cleanup. */
-    while (list_len(list)) {
-	item = list_extract_first(list);
+    while (gwlist_len(list)) {
+	item = gwlist_extract_first(list);
 	string_table_proposal_destroy(item);
     }
 
-    list_destroy(list, NULL);
+    gwlist_destroy(list, NULL);
 }
 
 
@@ -1814,7 +1814,7 @@
 	    octstr_strip_nonalphanums(string);
 
 	if (octstr_len(string) > WBXML_STRING_TABLE_MIN)
-	    list_append(strings, string);
+	    gwlist_append(strings, string);
 	else 
 	    octstr_destroy(string);
 	break;
@@ -1854,14 +1854,14 @@
     string_table_proposal_t *item = NULL;
     List *sorted = NULL;
 
-    sorted = list_create();
+    sorted = gwlist_create();
 
-    while (list_len(start)) {
-	string = list_extract_first(start);
+    while (gwlist_len(start)) {
+	string = gwlist_extract_first(start);
       
 	/* Check whether the string is unique. */
-	for (i = 0; i < list_len(sorted); i++) {
-	    item = list_get(sorted, i);
+	for (i = 0; i < gwlist_len(sorted); i++) {
+	    item = gwlist_get(sorted, i);
 	    if (octstr_compare(item->string, string) == 0) {
 		octstr_destroy(string);
 		string = NULL;
@@ -1872,11 +1872,11 @@
 	
 	if (string != NULL) {
 	    item = string_table_proposal_create(string);
-	    list_append(sorted, item);
+	    gwlist_append(sorted, item);
 	}
     }
 
-    list_destroy(start, NULL);
+    gwlist_destroy(start, NULL);
 
     return sorted;
 }
@@ -1894,20 +1894,20 @@
     string_table_proposal_t *item = NULL;
     List *list = NULL;
 
-    list = list_create();
+    list = gwlist_create();
 
-    while (list_len(sorted)) {
-	item = list_extract_first(sorted);
+    while (gwlist_len(sorted)) {
+	item = gwlist_extract_first(sorted);
 
 	if (item->count > 1 && octstr_len(item->string) > 
 	    WBXML_STRING_TABLE_MIN) {
 	    string_table_add(octstr_duplicate(item->string), wbxml);
 	    string_table_proposal_destroy(item);
 	} else
-	    list_append(list, item);
+	    gwlist_append(list, item);
     }
 
-    list_destroy(sorted, NULL);
+    gwlist_destroy(sorted, NULL);
 
     return list;
 }
@@ -1925,8 +1925,8 @@
     string_table_proposal_t *item = NULL;
     List *list = NULL, *temp_list = NULL;
 
-    while (list_len(strings)) {
-	item = list_extract_first(strings);
+    while (gwlist_len(strings)) {
+	item = gwlist_extract_first(strings);
 
 	if (list == NULL) {
 	    list = octstr_split_words(item->string);
@@ -1934,15 +1934,15 @@
 	} else {
 	    temp_list = octstr_split_words(item->string);
 
-	    while ((word = list_extract_first(temp_list)) != NULL)
-		list_append(list, word);
+	    while ((word = gwlist_extract_first(temp_list)) != NULL)
+		gwlist_append(list, word);
 
-	    list_destroy(temp_list, NULL);
+	    gwlist_destroy(temp_list, NULL);
 	    string_table_proposal_destroy(item);
 	}
     }
 
-    list_destroy(strings, NULL);
+    gwlist_destroy(strings, NULL);
 
     return list;
 }
@@ -1962,8 +1962,8 @@
     unsigned long i, offset = 0;
 
     /* Check whether the string is unique. */
-    for (i = 0; i < (unsigned long)list_len((*wbxml)->string_table); i++) {
-	item = list_get((*wbxml)->string_table, i);
+    for (i = 0; i < (unsigned long)gwlist_len((*wbxml)->string_table); i++) {
+	item = gwlist_get((*wbxml)->string_table, i);
 	if (octstr_compare(item->string, ostr) == 0) {
 	    octstr_destroy(ostr);
 	    return item->offset;
@@ -1977,7 +1977,7 @@
 
     (*wbxml)->string_table_length = 
 	(*wbxml)->string_table_length + octstr_len(ostr) + 1;
-    list_append((*wbxml)->string_table, item);
+    gwlist_append((*wbxml)->string_table, item);
 
     return offset;
 }
@@ -1998,8 +1998,8 @@
 
     input = octstr_create("");
 
-    for (i = 0; i < list_len((*wbxml)->string_table); i++) {
-	item = list_get((*wbxml)->string_table, i);
+    for (i = 0; i < gwlist_len((*wbxml)->string_table); i++) {
+	item = gwlist_get((*wbxml)->string_table, i);
 
 	if (octstr_len(item->string) > WBXML_STRING_TABLE_MIN)
 	    /* No use to replace 1 to 3 character substring, the reference 
@@ -2065,7 +2065,7 @@
 {
     string_table_t *item;
 
-    while ((item = list_extract_first((*wbxml)->string_table)) != NULL) {
+    while ((item = gwlist_extract_first((*wbxml)->string_table)) != NULL) {
 	octstr_insert(ostr, item->string, octstr_len(ostr));
 	octstr_append_char(ostr, WBXML_STR_END);
 	string_table_destroy(item);
diff -ur kannel-1.4.0/gw/xml_shared.c kannel-1.4.0.mod/gw/xml_shared.c
--- kannel-1.4.0/gw/xml_shared.c	2004-01-22 15:08:24.000000000 +0100
+++ kannel-1.4.0.mod/gw/xml_shared.c	2006-03-24 16:50:55.000000000 +0100
@@ -253,12 +253,12 @@
     List *result;
     Octstr *charset;
 
-    result = list_create();
+    result = gwlist_create();
     for (i = 0; character_sets[i].charset != NULL; i++) {
          charset = octstr_create(character_sets[i].charset);
          octstr_append_char(charset, '-');
          octstr_append(charset, octstr_imm(character_sets[i].nro));
-         list_append(result, charset);
+         gwlist_append(result, charset);
     }
 
     return result;  
diff -ur kannel-1.4.0/gwlib/accesslog.c kannel-1.4.0.mod/gwlib/accesslog.c
--- kannel-1.4.0/gwlib/accesslog.c	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/gwlib/accesslog.c	2006-03-24 16:50:55.000000000 +0100
@@ -90,14 +90,14 @@
     if (markers)
         alog("Log ends");
 
-    list_lock(writers);
+    gwlist_lock(writers);
     /* wait for writers to complete */
-    list_consume(writers);
+    gwlist_consume(writers);
 
     fclose(file);
     file = fopen(filename, "a");
 
-    list_unlock(writers);
+    gwlist_unlock(writers);
 
     if (file == NULL) {
         error(errno, "Couldn't re-open access logfile `%s'.", filename);
@@ -114,13 +114,13 @@
     if (file != NULL) {
         if (markers)
             alog("Log ends");
-        list_lock(writers);
+        gwlist_lock(writers);
         /* wait for writers to complete */
-        list_consume(writers);
+        gwlist_consume(writers);
         fclose(file);
         file = NULL;
-        list_unlock(writers);
-        list_destroy(writers, NULL);
+        gwlist_unlock(writers);
+        gwlist_destroy(writers, NULL);
         writers = NULL;
     }
 }
@@ -143,7 +143,7 @@
     }
 
     if (writers == NULL)
-        writers = list_create();
+        writers = gwlist_create();
 
     f = fopen(fname, "a");
     if (f == NULL) {
@@ -214,14 +214,14 @@
     format(buf, fmt);
     va_start(args, fmt);
 
-    list_lock(writers);
-    list_add_producer(writers);
-    list_unlock(writers);
+    gwlist_lock(writers);
+    gwlist_add_producer(writers);
+    gwlist_unlock(writers);
 
     vfprintf(file, buf, args);
     fflush(file);
 
-    list_remove_producer(writers);
+    gwlist_remove_producer(writers);
 
     va_end(args);
 }
diff -ur kannel-1.4.0/gwlib/cfg.c kannel-1.4.0.mod/gwlib/cfg.c
--- kannel-1.4.0/gwlib/cfg.c	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/gwlib/cfg.c	2006-03-24 16:50:55.000000000 +0100
@@ -134,7 +134,7 @@
  
 static void destroy_group_list(void *arg)
 {
-    list_destroy(arg, destroy_group);
+    gwlist_destroy(arg, destroy_group);
 }
 
 
@@ -210,28 +210,28 @@
     set_group_name(grp, groupname);
 
     names = dict_keys(grp->vars);
-    while ((name = list_extract_first(names)) != NULL) {
+    while ((name = gwlist_extract_first(names)) != NULL) {
 	if (!is_allowed_in_group(groupname, name)) {
 	    error(0, "Group '%s' may not contain field '%s'.",
 		  octstr_get_cstr(groupname), octstr_get_cstr(name));
 	    octstr_destroy(name);
 	    octstr_destroy(groupname);
-	    list_destroy(names, octstr_destroy_item);
+	    gwlist_destroy(names, octstr_destroy_item);
 	    return -1;
 	}
 	octstr_destroy(name);
     }
-    list_destroy(names, NULL);
+    gwlist_destroy(names, NULL);
 
     if (is_single_group(groupname))
     	dict_put(cfg->single_groups, groupname, grp);
     else {
 	list = dict_get(cfg->multi_groups, groupname);
 	if (list == NULL) {
-	    list = list_create();
+	    list = gwlist_create();
 	    dict_put(cfg->multi_groups, groupname, list);
 	}
-    	list_append(list, grp);
+    	gwlist_append(list, grp);
     }
 
     octstr_destroy(groupname);
@@ -324,17 +324,17 @@
  
     lines = octstr_split(os, octstr_imm("\n")); 
     lineno = 0; 
-    expand = list_create(); 
+    expand = gwlist_create(); 
               
-    while ((line = list_extract_first(lines)) != NULL) { 
+    while ((line = gwlist_extract_first(lines)) != NULL) { 
         ++lineno; 
         loc = cfgloc_create(file); 
         loc->line_no = lineno; 
         loc->line = line; 
         if (forward) 
-            list_append(expand, loc); 
+            gwlist_append(expand, loc); 
         else 
-            list_insert(expand, 0, loc); 
+            gwlist_insert(expand, 0, loc); 
     } 
     
     /* 
@@ -346,12 +346,12 @@
         loc->line_no = lineno;
         loc->line = octstr_create("\n");
         if (forward) 
-            list_append(expand, loc); 
+            gwlist_append(expand, loc); 
         else 
-            list_insert(expand, 0, loc); 
+            gwlist_insert(expand, 0, loc); 
     }
          
-    list_destroy(lines, octstr_destroy_item); 
+    gwlist_destroy(lines, octstr_destroy_item); 
     octstr_destroy(os); 
  
     return expand; 
@@ -383,13 +383,13 @@
         panic(0, "Failed to load main configuration file `%s'. Aborting!", 
               octstr_get_cstr(cfg->filename)); 
     } 
-    stack = list_create(); 
-    list_insert(stack, 0, octstr_duplicate(cfg->filename)); 
+    stack = gwlist_create(); 
+    gwlist_insert(stack, 0, octstr_duplicate(cfg->filename)); 
 
     grp = NULL;
     lineno = 0;
     error_lineno = 0;
-    while (error_lineno == 0 && (loc = list_extract_first(lines)) != NULL) { 
+    while (error_lineno == 0 && (loc = gwlist_extract_first(lines)) != NULL) { 
         octstr_strip_blanks(loc->line); 
         if (octstr_len(loc->line) == 0) { 
             if (grp != NULL && add_group(cfg, grp) == -1) { 
@@ -414,13 +414,13 @@
                 parse_value(filename); 
  
                 /* check if we are cycling */ 
-                if (list_search(stack, filename, octstr_item_match) != NULL) { 
+                if (gwlist_search(stack, filename, octstr_item_match) != NULL) { 
                     panic(0, "Recursive include for config file `%s' detected " 
                              "(on line %ld of file %s).", 
                           octstr_get_cstr(filename), loc->line_no,  
                           octstr_get_cstr(loc->filename)); 
                 } else {     
-                    List *files = list_create();
+                    List *files = gwlist_create();
                     Octstr *file;
                     struct stat filestat;
 
@@ -451,7 +451,7 @@
 
                             lstat(octstr_get_cstr(fileitem), &filestat);
                             if (!S_ISDIR(filestat.st_mode)) {
-                                list_insert(files, 0, fileitem);
+                                gwlist_insert(files, 0, fileitem);
                             }
                         }
                         closedir(dh);
@@ -459,13 +459,13 @@
 		    
                     /* is a file, create a list with it */
                     else {
-                        list_insert(files, 0, octstr_duplicate(filename));
+                        gwlist_insert(files, 0, octstr_duplicate(filename));
                     }
 
                     /* include files */
-                    while ((file = list_extract_first(files)) != NULL) {
+                    while ((file = gwlist_extract_first(files)) != NULL) {
 
-                        list_insert(stack, 0, octstr_duplicate(file)); 
+                        gwlist_insert(stack, 0, octstr_duplicate(file)); 
                         debug("gwlib.cfg", 0, "Loading include file `%s' (on line %ld of file %s).",  
                               octstr_get_cstr(file), loc->line_no,  
                               octstr_get_cstr(loc->filename)); 
@@ -475,17 +475,17 @@
                          * processed main while loop 
                          */ 
                         if ((expand = expand_file(file, 0)) != NULL) {
-                            while ((loc_inc = list_extract_first(expand)) != NULL) 
-                                list_insert(lines, 0, loc_inc); 
+                            while ((loc_inc = gwlist_extract_first(expand)) != NULL) 
+                                gwlist_insert(lines, 0, loc_inc); 
                         } else { 
                             panic(0, "Failed to load whole configuration. Aborting!"); 
                         } 
                  
-                        list_destroy(expand, NULL); 
+                        gwlist_destroy(expand, NULL); 
                         cfgloc_destroy(loc_inc);
                         octstr_destroy(file);
                     }
-                    list_destroy(files, octstr_destroy_item);
+                    gwlist_destroy(files, octstr_destroy_item);
                 } 
                 octstr_destroy(filename); 
             }  
@@ -521,8 +521,8 @@
         destroy_group(grp); 
     }
 
-    list_destroy(lines, NULL); 
-    list_destroy(stack, octstr_destroy_item); 
+    gwlist_destroy(lines, NULL); 
+    gwlist_destroy(stack, octstr_destroy_item); 
 
     if (error_lineno != 0) {
         error(0, "Error found on line %ld of file `%s'.",  
@@ -549,9 +549,9 @@
     if (list == NULL)
     	return NULL;
 
-    copy = list_create();
-    for (i = 0; i < list_len(list); ++i)
-    	list_append(copy, list_get(list, i));
+    copy = gwlist_create();
+    for (i = 0; i < gwlist_len(list); ++i)
+    	gwlist_append(copy, gwlist_get(list, i));
     return copy;
 }
 
@@ -668,7 +668,7 @@
 	debug("gwlib.cfg", 0, "  dumping group (%s):",
 	      octstr_get_cstr(grp->name));
     names = dict_keys(grp->vars);
-    while ((name = list_extract_first(names)) != NULL) {
+    while ((name = gwlist_extract_first(names)) != NULL) {
 	value = cfg_get(grp, name);
 	debug("gwlib.cfg", 0, "    <%s> = <%s>", 
 	      octstr_get_cstr(name),
@@ -676,7 +676,7 @@
     	octstr_destroy(value);
     	octstr_destroy(name);
     }
-    list_destroy(names, NULL);
+    gwlist_destroy(names, NULL);
 }
 
 
@@ -692,23 +692,23 @@
     	  octstr_get_cstr(cfg->filename));
 
     names = dict_keys(cfg->single_groups);
-    while ((name = list_extract_first(names)) != NULL) {
+    while ((name = gwlist_extract_first(names)) != NULL) {
 	grp = cfg_get_single_group(cfg, name);
 	if (grp != NULL)
 	    grp_dump(grp);
     	octstr_destroy(name);
     }
-    list_destroy(names, NULL);
+    gwlist_destroy(names, NULL);
 
     names = dict_keys(cfg->multi_groups);
-    while ((name = list_extract_first(names)) != NULL) {
+    while ((name = gwlist_extract_first(names)) != NULL) {
 	list = cfg_get_multi_group(cfg, name);
-	while ((grp = list_extract_first(list)) != NULL)
+	while ((grp = gwlist_extract_first(list)) != NULL)
 	    grp_dump(grp);
-	list_destroy(list, NULL);
+	gwlist_destroy(list, NULL);
     	octstr_destroy(name);
     }
-    list_destroy(names, NULL);
+    gwlist_destroy(names, NULL);
 
     debug("gwlib.cfg", 0, "Dump ends.");
 }
diff -ur kannel-1.4.0/gwlib/dbpool.c kannel-1.4.0.mod/gwlib/dbpool.c
--- kannel-1.4.0/gwlib/dbpool.c	2004-06-08 12:25:16.000000000 +0200
+++ kannel-1.4.0.mod/gwlib/dbpool.c	2006-03-24 16:50:55.000000000 +0100
@@ -103,8 +103,8 @@
 
     p = gw_malloc(sizeof(DBPool));
     gw_assert(p != NULL);
-    p->pool = list_create();
-    list_add_producer(p->pool);
+    p->pool = gwlist_create();
+    gwlist_add_producer(p->pool);
     p->max_size = connections;
     p->curr_size = 0;
     p->conf = conf;
@@ -157,8 +157,8 @@
 
     gw_assert(p->pool != NULL && p->db_ops != NULL);
 
-    list_remove_producer(p->pool);
-    list_destroy(p->pool, (void*) dbpool_conn_destroy);
+    gwlist_remove_producer(p->pool);
+    gwlist_destroy(p->pool, (void*) dbpool_conn_destroy);
 
     p->db_ops->conf_destroy(p->conf);
     gw_free(p);
@@ -173,7 +173,7 @@
 
 
     /* lock dbpool for updates */
-    list_lock(p->pool);
+    gwlist_lock(p->pool);
 
     /* ensure we don't increase more items than the max_size border */
     for (i=0; i < count && p->curr_size < p->max_size; i++) {
@@ -187,12 +187,12 @@
 
             p->curr_size++;
             opened++;
-            list_produce(p->pool, pc);
+            gwlist_produce(p->pool, pc);
         }
     }
 
     /* unlock dbpool for updates */
-    list_unlock(p->pool);
+    gwlist_unlock(p->pool);
 
     return opened;
 }
@@ -205,7 +205,7 @@
     gw_assert(p != NULL && p->pool != NULL && p->db_ops != NULL && p->db_ops->close != NULL);
 
     /* lock dbpool for updates */
-    list_lock(p->pool);
+    gwlist_lock(p->pool);
 
     /*
      * Ensure we don't try to decrease more then available in pool.
@@ -213,8 +213,8 @@
     for (i = 0; i < c; i++) {
         DBPoolConn *pc;
 
-        /* list_extract_first doesn't block even if no conn here */
-        pc = list_extract_first(p->pool);
+        /* gwlist_extract_first doesn't block even if no conn here */
+        pc = gwlist_extract_first(p->pool);
 
         /* no conn availible anymore */
         if (pc == NULL)
@@ -226,7 +226,7 @@
     }
 
     /* unlock dbpool for updates */
-    list_unlock(p->pool);
+    gwlist_unlock(p->pool);
 
     return i;
 }
@@ -236,7 +236,7 @@
 {
     gw_assert(p->pool != NULL);
 
-    return list_len(p->pool);
+    return gwlist_len(p->pool);
 }
 
 
@@ -252,7 +252,7 @@
 
 
     /* garantee that you deliver a valid connection to the caller */
-    while ((pc = list_consume(p->pool)) != NULL) {
+    while ((pc = gwlist_consume(p->pool)) != NULL) {
 
         /* 
          * XXX check that the connection is still existing.
@@ -261,11 +261,11 @@
         if (!pc->conn || (p->db_ops->check && p->db_ops->check(pc->conn) != 0)) {
             /* something was wrong, reinitialize the connection */
             /* lock dbpool for update */
-            list_lock(p->pool);
+            gwlist_lock(p->pool);
             dbpool_conn_destroy(pc);
             p->curr_size--;
             /* unlock dbpool for update */
-            list_unlock(p->pool);
+            gwlist_unlock(p->pool);
             /*
              * maybe not needed, just try to get next connection, but it
              * can be dangeros if all connections where broken, then we will
@@ -285,7 +285,7 @@
 {
     gw_assert(pc != NULL && pc->conn != NULL && pc->pool != NULL && pc->pool->pool != NULL);
 
-    list_produce(pc->pool->pool, pc);
+    gwlist_produce(pc->pool->pool, pc);
 }
 
 
@@ -301,17 +301,17 @@
      * we have nothing todo and we simple return list length.
      */
     if (p->db_ops->check == NULL)
-        return list_len(p->pool);
+        return gwlist_len(p->pool);
 
-    list_lock(p->pool);
-    len = list_len(p->pool);
+    gwlist_lock(p->pool);
+    len = gwlist_len(p->pool);
     for (i = 0; i < len; i++) {
         DBPoolConn *pconn;
 
-        pconn = list_get(p->pool, i);
+        pconn = gwlist_get(p->pool, i);
         if (p->db_ops->check(pconn->conn) != 0) {
             /* something was wrong, reinitialize the connection */
-            list_delete(p->pool, i, 1);
+            gwlist_delete(p->pool, i, 1);
             dbpool_conn_destroy(pconn);
             p->curr_size--;
             reinit++;
@@ -321,7 +321,7 @@
             n++;
         }
     }
-    list_unlock(p->pool);
+    gwlist_unlock(p->pool);
 
     /* reinitialize brocken connections */
     if (reinit > 0)
diff -ur kannel-1.4.0/gwlib/dbpool_oracle.c kannel-1.4.0.mod/gwlib/dbpool_oracle.c
--- kannel-1.4.0/gwlib/dbpool_oracle.c	2004-03-20 20:48:22.000000000 +0100
+++ kannel-1.4.0.mod/gwlib/dbpool_oracle.c	2006-03-24 16:50:55.000000000 +0100
@@ -250,12 +250,12 @@
     sql = octstr_create("SELECT 1 FROM DUAL");
 
     ret = oracle_select(conn, sql, NULL, &res);
-    if (ret != -1 && list_len(res) > 0) {
-        List *row = list_extract_first(res);
-        list_destroy(row, octstr_destroy_item);
+    if (ret != -1 && gwlist_len(res) > 0) {
+        List *row = gwlist_extract_first(res);
+        gwlist_destroy(row, octstr_destroy_item);
     }
     if (ret != -1)
-        list_destroy(res, NULL);
+        gwlist_destroy(res, NULL);
 
     octstr_destroy(sql);
 
@@ -292,7 +292,7 @@
     };
     struct data_s *data;
     struct ora_conn *conn = (struct ora_conn*) theconn;
-    int binds_len = (binds ? list_len(binds) : 0);
+    int binds_len = (binds ? gwlist_len(binds) : 0);
 
     *res = NULL;
 
@@ -314,7 +314,7 @@
     /* bind variables */
     for (i = 0; i < binds_len; i++) {
         OCIBind *bndhp = NULL;
-        Octstr *bind = list_get(binds, i);
+        Octstr *bind = gwlist_get(binds, i);
         status = OCIBindByPos(stmt, &bndhp, 
                               conn->errhp, (i+1), (dvoid *) octstr_get_cstr(bind),
                               (sword) octstr_len(bind)+1, SQLT_STR, (dvoid *) 0, (ub2 *)0,
@@ -413,23 +413,23 @@
         }
     }
 
-    *res = list_create();
+    *res = gwlist_create();
     /* fetch data */
     while ((status = OCIStmtFetch(stmt, conn->errhp, 1, 
                                   OCI_FETCH_NEXT, OCI_DEFAULT)) == OCI_SUCCESS ||
             status == OCI_SUCCESS_WITH_INFO) {
 
-        row = list_create();
+        row = gwlist_create();
         for (i = 0; i < columns; i++) {
             if (data[i].data == NULL || data[i].ind == -1) {
-                list_insert(row, i, octstr_create(""));
+                gwlist_insert(row, i, octstr_create(""));
             } else {
-                list_insert(row, i, octstr_create_from_data(data[i].data, data[i].size));
+                gwlist_insert(row, i, octstr_create_from_data(data[i].data, data[i].size));
             }
             /* debug("dbpool.oracle",0,"inserted value = '%s'", 
-                     octstr_get_cstr(list_get(row,i))); */
+                     octstr_get_cstr(gwlist_get(row,i))); */
         }
-        list_append(*res, row);
+        gwlist_append(*res, row);
     }
 
     /* ignore OCI_NO_DATA error */
@@ -439,9 +439,9 @@
         for (i = 0; i < columns; i++)
             gw_free(data[i].data);
         gw_free(data);
-        while ((row = list_extract_first(*res)) != NULL)
-            list_destroy(row, octstr_destroy_item);
-        list_destroy(*res, NULL);
+        while ((row = gwlist_extract_first(*res)) != NULL)
+            gwlist_destroy(row, octstr_destroy_item);
+        gwlist_destroy(*res, NULL);
         *res = NULL;
         OCIHandleFree(stmt, OCI_HTYPE_STMT);
         return -1;
@@ -463,7 +463,7 @@
     sword status;
     ub4 rows = 0, i;
     struct ora_conn *conn = (struct ora_conn*) theconn;
-    int binds_len = (binds ? list_len(binds) : 0);
+    int binds_len = (binds ? gwlist_len(binds) : 0);
     
     /* allocate statement handle */
     status = OCIHandleAlloc(conn->envp, (dvoid**)&stmt, OCI_HTYPE_STMT, 0,0);
@@ -484,7 +484,7 @@
    
     /* bind variables */
     for (i = 0; i < binds_len; i++) {
-        Octstr *bind = list_get(binds, i);
+        Octstr *bind = gwlist_get(binds, i);
         OCIBind *bndhp = NULL;
         status = OCIBindByPos(stmt, &bndhp, 
                               conn->errhp, (i+1), (dvoid *) octstr_get_cstr(bind),
diff -ur kannel-1.4.0/gwlib/dbpool_pgsql.c kannel-1.4.0.mod/gwlib/dbpool_pgsql.c
--- kannel-1.4.0/gwlib/dbpool_pgsql.c	2004-11-03 23:21:34.000000000 +0100
+++ kannel-1.4.0.mod/gwlib/dbpool_pgsql.c	2006-03-24 16:50:55.000000000 +0100
@@ -215,16 +215,16 @@
 
     nTuples = PQntuples(res);
     nFields = PQnfields(res);
-    *list = list_create();
+    *list = gwlist_create();
     for (row_loop = 0; row_loop < nTuples; row_loop++) {
-	fields = list_create();
+	fields = gwlist_create();
     	for (field_loop = 0; field_loop < nFields; field_loop++) {
             if (PQgetisnull(res, row_loop, field_loop))
-                list_produce(fields, octstr_create(""));
+                gwlist_produce(fields, octstr_create(""));
             else 
-	        list_produce(fields, octstr_create(PQgetvalue(res, row_loop, field_loop)));
+	        gwlist_produce(fields, octstr_create(PQgetvalue(res, row_loop, field_loop)));
 	}
-	list_produce(*list, fields);
+	gwlist_produce(*list, fields);
     }
     PQclear(res);
 
diff -ur kannel-1.4.0/gwlib/dict.c kannel-1.4.0.mod/gwlib/dict.c
--- kannel-1.4.0/gwlib/dict.c	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/gwlib/dict.c	2006-03-24 16:50:55.000000000 +0100
@@ -162,15 +162,15 @@
     i = key_to_index(dict, key);
 
     if (dict->tab[i] == NULL) {
-	dict->tab[i] = list_create();
+	dict->tab[i] = gwlist_create();
 	p = NULL;
     } else {
-	p = list_search(dict->tab[i], key, item_has_key);
+	p = gwlist_search(dict->tab[i], key, item_has_key);
     }
 
     if (p == NULL) {
     	p = item_create(key, value);
-	list_append(dict->tab[i], p);
+	gwlist_append(dict->tab[i], p);
         dict->key_count++;
         item_unique = 1;
     } else {
@@ -224,12 +224,12 @@
         if (dict->tab[i] == NULL)
 	    continue;
 
-	while ((p = list_extract_first(dict->tab[i])) != NULL) {
+	while ((p = gwlist_extract_first(dict->tab[i])) != NULL) {
 	    if (dict->destroy_value != NULL)
 	    	dict->destroy_value(p->value);
 	    item_destroy(p);
 	}
-	list_destroy(dict->tab[i], NULL);
+	gwlist_destroy(dict->tab[i], NULL);
     }
     mutex_destroy(dict->lock);
     gw_free(dict->tab);
@@ -252,13 +252,13 @@
     lock(dict);
     i = key_to_index(dict, key);
     if (dict->tab[i] == NULL) {
-	dict->tab[i] = list_create();
+	dict->tab[i] = gwlist_create();
 	p = NULL;
     } else
-	p = list_search(dict->tab[i], key, item_has_key);
+	p = gwlist_search(dict->tab[i], key, item_has_key);
     if (p == NULL) {
     	p = item_create(key, value);
-	list_append(dict->tab[i], p);
+	gwlist_append(dict->tab[i], p);
         dict->key_count++;
     } else {
 	if (dict->destroy_value != NULL)
@@ -294,7 +294,7 @@
     if (dict->tab[i] == NULL)
 	p = NULL;
     else
-        p = list_search(dict->tab[i], key, item_has_key);
+        p = gwlist_search(dict->tab[i], key, item_has_key);
     if (p == NULL)
     	value = NULL;
     else
@@ -316,13 +316,13 @@
     if (dict->tab[i] == NULL)
         list = NULL;
     else
-        list = list_extract_matching(dict->tab[i], key, item_has_key);
-    gw_assert(list == NULL || list_len(list) == 1);
+        list = gwlist_extract_matching(dict->tab[i], key, item_has_key);
+    gw_assert(list == NULL || gwlist_len(list) == 1);
     if (list == NULL)
     	value = NULL;
     else {
-	p = list_get(list, 0);
-	list_destroy(list, NULL);
+	p = gwlist_get(list, 0);
+	gwlist_destroy(list, NULL);
     	value = p->value;
 	item_destroy(p);
 	dict->key_count--;
@@ -350,15 +350,15 @@
     Item *item;
     long i, j;
     
-    list = list_create();
+    list = gwlist_create();
 
     lock(dict);
     for (i = 0; i < dict->size; ++i) {
 	if (dict->tab[i] == NULL)
 	    continue;
-	for (j = 0; j < list_len(dict->tab[i]); ++j) {
-	    item = list_get(dict->tab[i], j);
-	    list_append(list, octstr_duplicate(item->key));
+	for (j = 0; j < gwlist_len(dict->tab[i]); ++j) {
+	    item = gwlist_get(dict->tab[i], j);
+	    gwlist_append(list, octstr_duplicate(item->key));
 	}
     }
     unlock(dict);
diff -ur kannel-1.4.0/gwlib/fdset.c kannel-1.4.0.mod/gwlib/fdset.c
--- kannel-1.4.0/gwlib/fdset.c	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/gwlib/fdset.c	2006-03-24 16:50:55.000000000 +0100
@@ -163,11 +163,11 @@
     if (action == NULL)
         return;
 
-    list_destroy(action->done, NULL);
+    gwlist_destroy(action->done, NULL);
     gw_free(action);
 }
 
-/* For use with list_destroy */
+/* For use with gwlist_destroy */
 static void action_destroy_item(void *action)
 {
     action_destroy(action);
@@ -186,15 +186,15 @@
     gw_assert(set != NULL);
     gw_assert(action != NULL);
 
-    done = list_create();
-    list_add_producer(done);
+    done = gwlist_create();
+    gwlist_add_producer(done);
 
     action->done = done;
 
-    list_append(set->actions, action);
+    gwlist_append(set->actions, action);
     gwthread_wakeup(set->poll_thread);
 
-    sync = list_consume(done);
+    sync = gwlist_consume(done);
     gw_assert(sync == action);
 
     action_destroy(action);
@@ -205,7 +205,7 @@
  */
 static void submit_action_nosync(FDSet *set, struct action *action)
 {
-    list_append(set->actions, action);
+    gwlist_append(set->actions, action);
     gwthread_wakeup(set->poll_thread);
 }
 
@@ -246,7 +246,7 @@
     if (action->done == NULL)
 	action_destroy(action);
     else
-        list_produce(action->done, action);
+        gwlist_produce(action->done, action);
 
     return result;
 }
@@ -311,7 +311,7 @@
     gw_assert(set != NULL);
 
     for (;;) {
-        while ((action = list_extract_first(set->actions)) != NULL) {
+        while ((action = gwlist_extract_first(set->actions)) != NULL) {
             /* handle_action returns -1 if the set was destroyed. */
             if (handle_action(set, action) < 0)
                 return;
@@ -361,7 +361,7 @@
     new->scanning = 0;
     new->deleted_entries = 0;
 
-    new->actions = list_create();
+    new->actions = gwlist_create();
 
     new->poll_thread = gwthread_create(poller, new);
     if (new->poll_thread < 0) {
@@ -386,11 +386,11 @@
         gw_free(set->pollinfo);
         gw_free(set->callbacks);
         gw_free(set->datafields);
-        if (list_len(set->actions) > 0) {
+        if (gwlist_len(set->actions) > 0) {
             error(0, "Destroying fdset with %ld pending actions.",
-                  list_len(set->actions));
+                  gwlist_len(set->actions));
         }
-        list_destroy(set->actions, action_destroy_item);
+        gwlist_destroy(set->actions, action_destroy_item);
         gw_free(set);
     } else {
         long thread = set->poll_thread;
diff -ur kannel-1.4.0/gwlib/gw-rwlock.c kannel-1.4.0.mod/gwlib/gw-rwlock.c
--- kannel-1.4.0/gwlib/gw-rwlock.c	2004-09-25 17:53:24.000000000 +0200
+++ kannel-1.4.0.mod/gwlib/gw-rwlock.c	2006-03-24 16:50:55.000000000 +0100
@@ -83,7 +83,7 @@
         panic(rc, "Initialization of RWLock failed.");
 #else
     ret->writer = -1;
-    ret->rwlock = list_create();
+    ret->rwlock = gwlist_create();
     if (ret->rwlock == NULL)
         panic(0, "Initialization of RWLock failed.");
 #endif
@@ -101,7 +101,7 @@
         panic(rc, "Initialization of RWLock failed.");
 #else
     lock->writer = -1;
-    lock->rwlock = list_create();
+    lock->rwlock = gwlist_create();
     if (lock->rwlock == NULL)
         panic(0, "Initialization of RWLock failed.");
 #endif
@@ -123,7 +123,7 @@
     if (ret != 0)
         panic(ret, "Attempt to destroy locked rwlock.");
 #else
-    list_destroy(lock->rwlock, NULL);
+    gwlist_destroy(lock->rwlock, NULL);
 #endif
 
     if (lock->dynamic)
@@ -142,9 +142,9 @@
         panic(ret, "Error while pthread_rwlock_rdlock.");
     }
 #else
-    list_lock(lock->rwlock);
-    list_add_producer(lock->rwlock);
-    list_unlock(lock->rwlock);
+    gwlist_lock(lock->rwlock);
+    gwlist_add_producer(lock->rwlock);
+    gwlist_unlock(lock->rwlock);
     RWDEBUG("", 0, "------------ gw_rwlock_rdlock(%p) ----------", lock);
 #endif
 
@@ -165,9 +165,9 @@
     RWDEBUG("", 0, "------------ gw_rwlock_unlock(%p) ----------", lock);
     if (lock->writer == gwthread_self()) {
         lock->writer = -1;
-        list_unlock(lock->rwlock);
+        gwlist_unlock(lock->rwlock);
     } else 
-        list_remove_producer(lock->rwlock);
+        gwlist_remove_producer(lock->rwlock);
 #endif
 
     return ret;
@@ -185,10 +185,10 @@
         panic(ret, "Error while pthread_rwlock_wrlock.");
 #else
     RWDEBUG("", 0, "------------ gw_rwlock_wrlock(%p) ----------", lock);
-    list_lock(lock->rwlock);
-    RWDEBUG("", 0, "------------ gw_rwlock_wrlock(%p) producers=%d", lock, list_producer_count(lock->rwlock));
+    gwlist_lock(lock->rwlock);
+    RWDEBUG("", 0, "------------ gw_rwlock_wrlock(%p) producers=%d", lock, gwlist_producer_count(lock->rwlock));
     /* wait for reader */
-    list_consume(lock->rwlock);
+    gwlist_consume(lock->rwlock);
     lock->writer = gwthread_self();
 #endif
 
diff -ur kannel-1.4.0/gwlib/gwthread-pthread.c kannel-1.4.0.mod/gwlib/gwthread-pthread.c
--- kannel-1.4.0/gwlib/gwthread-pthread.c	2004-08-12 12:53:30.000000000 +0200
+++ kannel-1.4.0.mod/gwlib/gwthread-pthread.c	2006-03-24 16:50:55.000000000 +0100
@@ -229,7 +229,7 @@
     threadinfo = getthreadinfo();
     if (!threadinfo->joiners)
         return;
-    while ((joiner_cond = list_extract_first(threadinfo->joiners))) {
+    while ((joiner_cond = gwlist_extract_first(threadinfo->joiners))) {
         pthread_cond_broadcast(joiner_cond);
     }
 }
@@ -239,7 +239,7 @@
     struct threadinfo *threadinfo;
 
     threadinfo = getthreadinfo();
-    list_destroy(threadinfo->joiners, NULL);
+    gwlist_destroy(threadinfo->joiners, NULL);
     close(threadinfo->wakefd_recv);
     close(threadinfo->wakefd_send);
     THREAD(threadinfo->number) = NULL;
@@ -523,8 +523,8 @@
     }
 
     if (!threadinfo->joiners)
-        threadinfo->joiners = list_create();
-    list_append(threadinfo->joiners, &exit_cond);
+        threadinfo->joiners = gwlist_create();
+    gwlist_append(threadinfo->joiners, &exit_cond);
 
     /* The wait immediately releases the lock, and reacquires it
      * when the condition is satisfied.  So don't worry, we're not
@@ -589,8 +589,8 @@
               "Waiting for %ld (%s) to terminate",
               ti->number, ti->name);
         if (!ti->joiners)
-            ti->joiners = list_create();
-        list_append(ti->joiners, &exit_cond);
+            ti->joiners = gwlist_create();
+        gwlist_append(ti->joiners, &exit_cond);
         ret = pthread_cond_wait(&exit_cond, &threadtable_lock);
         if (ret != 0)
             warning(ret, "gwthread_join_all: error in pthread_cond_wait");
diff -ur kannel-1.4.0/gwlib/http.c kannel-1.4.0.mod/gwlib/http.c
--- kannel-1.4.0/gwlib/http.c	2004-08-11 18:41:29.000000000 +0200
+++ kannel-1.4.0.mod/gwlib/http.c	2006-03-24 16:50:55.000000000 +0100
@@ -126,10 +126,10 @@
 {
     Octstr *line, *prev;
 
-    if (list_len(headers) == 0)
+    if (gwlist_len(headers) == 0)
         prev = NULL;
     else
-    	prev = list_get(headers, list_len(headers) - 1);
+    	prev = gwlist_get(headers, gwlist_len(headers) - 1);
 
     for (;;) {
 	line = conn_read_line(conn);
@@ -146,7 +146,7 @@
             octstr_append(prev, line);
             octstr_destroy(line);
         } else {
-            list_append(headers, line);
+            gwlist_append(headers, line);
             prev = line;
         }
     }
@@ -217,7 +217,7 @@
 static void proxy_init(void)
 {
     proxy_mutex = mutex_create();
-    proxy_exceptions = list_create();
+    proxy_exceptions = gwlist_create();
 }
 
 
@@ -240,8 +240,8 @@
         return 0;
     }
 
-    for (i = 0; i < list_len(proxy_exceptions); ++i) {
-        if (octstr_compare(host, list_get(proxy_exceptions, i)) == 0) {
+    for (i = 0; i < gwlist_len(proxy_exceptions); ++i) {
+        if (octstr_compare(host, gwlist_get(proxy_exceptions, i)) == 0) {
             mutex_unlock(proxy_mutex);
             return 0;
         }
@@ -268,12 +268,12 @@
 
     proxy_hostname = octstr_duplicate(hostname);
     proxy_port = port;
-    proxy_exceptions = list_create();
-    for (i = 0; i < list_len(exceptions); ++i) {
-        e = list_get(exceptions, i);
+    proxy_exceptions = gwlist_create();
+    for (i = 0; i < gwlist_len(exceptions); ++i) {
+        e = gwlist_get(exceptions, i);
 	debug("gwlib.http", 0, "HTTP: Proxy exception `%s'.",
 	      octstr_get_cstr(e));
-        list_append(proxy_exceptions, octstr_duplicate(e));
+        gwlist_append(proxy_exceptions, octstr_duplicate(e));
     }
     proxy_username = octstr_duplicate(username);
     proxy_password = octstr_duplicate(password);
@@ -296,7 +296,7 @@
     proxy_hostname = NULL;
     proxy_username = NULL;
     proxy_password = NULL;
-    list_destroy(proxy_exceptions, octstr_destroy_item);
+    gwlist_destroy(proxy_exceptions, octstr_destroy_item);
     proxy_exceptions = NULL;
     mutex_unlock(proxy_mutex);
 }
@@ -715,9 +715,9 @@
 {
     Connection *conn;
     
-    while ((conn = list_extract_first(item)) != NULL)
+    while ((conn = gwlist_extract_first(item)) != NULL)
     	conn_destroy(conn);
-    list_destroy(item, NULL);
+    gwlist_destroy(item, NULL);
 }
 
 static void conn_pool_init(void)
@@ -755,7 +755,7 @@
     	conn = NULL;
     else {
 	while (1) {
-	    conn = list_extract_first(list);
+	    conn = gwlist_extract_first(list);
 	    if (conn == NULL)
 		break;
 	    /* Check whether the server has closed the connection while
@@ -795,10 +795,10 @@
     key = conn_pool_key(host, port);
     list = dict_get(conn_pool, key);
     if (list == NULL) {
-    	list = list_create();
+    	list = gwlist_create();
         dict_put(conn_pool, key, list);
     }
-    list_append(list, conn);
+    gwlist_append(list, conn);
     octstr_destroy(key);
     mutex_unlock(conn_pool_lock);
 }
@@ -830,21 +830,21 @@
 {
     HTTPCaller *caller;
     
-    caller = list_create();
-    list_add_producer(caller);
+    caller = gwlist_create();
+    gwlist_add_producer(caller);
     return caller;
 }
 
 
 void http_caller_destroy(HTTPCaller *caller)
 {
-    list_destroy(caller, server_destroy);
+    gwlist_destroy(caller, server_destroy);
 }
 
 
 void http_caller_signal_shutdown(HTTPCaller *caller)
 {
-    list_remove_producer(caller);
+    gwlist_remove_producer(caller);
 }
 
 
@@ -997,7 +997,7 @@
 		    trans->conn = NULL;
 		    trans->retrying = 1;
 		    trans->state = request_not_sent;
-		    list_produce(pending_requests, trans);
+		    gwlist_produce(pending_requests, trans);
 		    return;
 		}
 	    } else if (ret == 0) {
@@ -1090,7 +1090,7 @@
         trans->state = request_not_sent;
         trans->status = -1;
         http_destroy_headers(trans->response->headers);
-        trans->response->headers = list_create();
+        trans->response->headers = gwlist_create();
         octstr_destroy(trans->response->body);
         trans->response->body = octstr_create("");
         --trans->follow_remaining;
@@ -1098,11 +1098,11 @@
         trans->conn = NULL;
 
         /* re-inject request to queue */
-        list_produce(pending_requests, trans);
+        gwlist_produce(pending_requests, trans);
 
     } else {
         /* handle this response as usual */
-        list_produce(trans->caller, trans);
+        gwlist_produce(trans->caller, trans);
     }
     return;
 
@@ -1111,7 +1111,7 @@
     trans->conn = NULL;
     error(0, "Couldn't fetch <%s>", octstr_get_cstr(trans->url));
     trans->status = -1;
-    list_produce(trans->caller, trans);
+    gwlist_produce(trans->caller, trans);
 }
 
 
@@ -1136,8 +1136,8 @@
         octstr_format_append(request, ":%ld", port);
     octstr_append(request, octstr_imm("\r\n"));
 
-    for (i = 0; headers != NULL && i < list_len(headers); ++i) {
-        octstr_append(request, list_get(headers, i));
+    for (i = 0; headers != NULL && i < gwlist_len(headers); ++i) {
+        octstr_append(request, gwlist_get(headers, i));
         octstr_append(request, octstr_imm("\r\n"));
     }
     octstr_append(request, octstr_imm("\r\n"));
@@ -1160,8 +1160,8 @@
 
     response = octstr_create("");
 
-    for (i = 0; headers != NULL && i < list_len(headers); ++i) {
-        octstr_append(response, list_get(headers, i));
+    for (i = 0; headers != NULL && i < gwlist_len(headers); ++i) {
+        octstr_append(response, gwlist_get(headers, i));
         octstr_append(response, octstr_imm("\r\n"));
     }
     octstr_append(response, octstr_imm("\r\n"));
@@ -1532,7 +1532,7 @@
     int rc;
 
     while (run_status == running) {
-        trans = list_consume(pending_requests);
+        trans = gwlist_consume(pending_requests);
         if (trans == NULL)
             break;
 
@@ -1545,7 +1545,7 @@
         trans->conn = get_connection(trans);
 
 	if (trans->conn == NULL)
-	  list_produce(trans->caller, trans);
+	  gwlist_produce(trans->caller, trans);
         else {
           if (conn_is_connected(trans->conn) == 0) {
 	    debug("gwlib.http", 0, "Socket connected at once");
@@ -1574,7 +1574,7 @@
               conn_register(trans->conn, client_fdset, handle_transaction, 
                             trans);
             } else {
-              list_produce(trans->caller, trans);
+              gwlist_produce(trans->caller, trans);
             }
 
           } else { /* Socket not connected, wait for connection */
@@ -1633,7 +1633,7 @@
 	trans->request_id = http_start_request;
     else
 	trans->request_id = id;
-    list_produce(pending_requests, trans);
+    gwlist_produce(pending_requests, trans);
     start_client_threads();
 }
 
@@ -1644,7 +1644,7 @@
     HTTPServer *trans;
     void *request_id;
 
-    trans = list_consume(caller);
+    trans = gwlist_consume(caller);
     if (trans == NULL)
     	return NULL;
 
@@ -1691,17 +1691,17 @@
 
 static void client_init(void)
 {
-    pending_requests = list_create();
-    list_add_producer(pending_requests);
+    pending_requests = gwlist_create();
+    gwlist_add_producer(pending_requests);
     client_thread_lock = mutex_create();
 }
 
 
 static void client_shutdown(void)
 {
-    list_remove_producer(pending_requests);
+    gwlist_remove_producer(pending_requests);
     gwthread_join_every(write_request_thread);
-    list_destroy(pending_requests, server_destroy);
+    gwlist_destroy(pending_requests, server_destroy);
     mutex_destroy(client_thread_lock);
     fdset_destroy(client_fdset);
     octstr_destroy(http_interface);
@@ -1863,8 +1863,8 @@
     struct port *p;
 
     p = gw_malloc(sizeof(*p));
-    p->clients_with_requests = list_create();
-    list_add_producer(p->clients_with_requests);
+    p->clients_with_requests = gwlist_create();
+    gwlist_add_producer(p->clients_with_requests);
     p->active_consumers = counter_create();
 
     key = port_key(port);
@@ -1886,10 +1886,10 @@
     mutex_unlock(port_mutex);
     octstr_destroy(key);
 
-    list_remove_producer(p->clients_with_requests);
+    gwlist_remove_producer(p->clients_with_requests);
     while (counter_value(p->active_consumers) > 0)
        gwthread_sleep(0.1);    /* Reasonable use of busy waiting. */
-    list_destroy(p->clients_with_requests, client_destroy);
+    gwlist_destroy(p->clients_with_requests, client_destroy);
     counter_destroy(p->active_consumers);
     gw_free(p);
 }
@@ -1904,7 +1904,7 @@
     key = port_key(client->port);
     p = dict_get(port_collection, key);
     gw_assert(p != NULL);
-    list_produce(p->clients_with_requests, client);
+    gwlist_produce(p->clients_with_requests, client);
     octstr_destroy(key);
     mutex_unlock(port_mutex);
 }
@@ -1927,7 +1927,7 @@
     } else {
        counter_increase(p->active_consumers);
        mutex_unlock(port_mutex);   /* Placement of this unlock is tricky. */
-       client = list_consume(p->clients_with_requests);
+       client = gwlist_consume(p->clients_with_requests);
        counter_decrease(p->active_consumers);
     }
     return client;
@@ -1961,15 +1961,15 @@
     int ret;
 
     words = octstr_split_words(line);
-    if (list_len(words) != 3) {
-        list_destroy(words, octstr_destroy_item);
+    if (gwlist_len(words) != 3) {
+        gwlist_destroy(words, octstr_destroy_item);
 	return -1;
     }
 
-    method_str = list_get(words, 0);
-    *url = list_get(words, 1);
-    version = list_get(words, 2);
-    list_destroy(words, NULL);
+    method_str = gwlist_get(words, 0);
+    *url = gwlist_get(words, 1);
+    version = gwlist_get(words, 2);
+    gwlist_destroy(words, NULL);
 
     if (octstr_compare(method_str, octstr_imm("GET")) == 0)
 	*method = HTTP_METHOD_GET;
@@ -2094,8 +2094,8 @@
     n = 0;
     while (run_status == running && keep_servers_open) {
 
-        if (n == 0 || (n < MAX_SERVERS && list_len(new_server_sockets) > 0)) {
-            p = list_consume(new_server_sockets);
+        if (n == 0 || (n < MAX_SERVERS && gwlist_len(new_server_sockets) > 0)) {
+            p = gwlist_consume(new_server_sockets);
             if (p == NULL) {
                 debug("gwlib.http", 0, "HTTP: No new servers. Quitting.");
                 break;
@@ -2144,7 +2144,7 @@
             }
         }
 	
-        while ((portno = list_extract_first(closed_server_sockets)) != NULL) {
+        while ((portno = gwlist_extract_first(closed_server_sockets)) != NULL) {
             for (i = 0; i < n; ++i) {
                 if (ports[i] == *portno) {
                     (void) close(tab[i].fd);
@@ -2217,7 +2217,7 @@
     }
 
     port_add(port);
-    list_produce(new_server_sockets, p);
+    gwlist_produce(new_server_sockets, p);
     keep_servers_open = 1;
     start_server_thread();
     gwthread_wakeup(server_thread_id);
@@ -2238,7 +2238,7 @@
     
     p = gw_malloc(sizeof(*p));
     *p = port;
-    list_produce(closed_server_sockets, p);
+    gwlist_produce(closed_server_sockets, p);
     gwthread_wakeup(server_thread_id);
 }
 
@@ -2269,12 +2269,12 @@
 
     query = octstr_search_char(url, '?', 0);
     if (query == -1)
-        return list_create();
+        return gwlist_create();
 
     args = octstr_copy(url, query + 1, octstr_len(url));
     octstr_truncate(url, query);
 
-    list = list_create();
+    list = gwlist_create();
 
     while (octstr_len(args) > 0) {
         et = octstr_search_char(args, '&', 0);
@@ -2295,7 +2295,7 @@
 
         octstr_destroy(arg);
 
-        list_append(list, v);
+        gwlist_append(list, v);
     }
     octstr_destroy(args);
 
@@ -2417,8 +2417,8 @@
     if (!client->use_version_1_0 && !client->persistent_conn)
         octstr_format_append(response, "Connection: close\r\n");
 
-    for (i = 0; i < list_len(headers); ++i)
-    	octstr_format_append(response, "%S\r\n", list_get(headers, i));
+    for (i = 0; i < gwlist_len(headers); ++i)
+    	octstr_format_append(response, "%S\r\n", gwlist_get(headers, i));
     octstr_format_append(response, "\r\n");
     
     if (body != NULL && client->method != HTTP_METHOD_HEAD)
@@ -2459,9 +2459,9 @@
 
 static void server_init(void)
 {
-    new_server_sockets = list_create();
-    list_add_producer(new_server_sockets);
-    closed_server_sockets = list_create();
+    new_server_sockets = gwlist_create();
+    gwlist_add_producer(new_server_sockets);
+    closed_server_sockets = gwlist_create();
     server_thread_lock = mutex_create();
 }
 
@@ -2485,15 +2485,15 @@
 
 static void server_shutdown(void)
 {
-    list_remove_producer(new_server_sockets);
+    gwlist_remove_producer(new_server_sockets);
     if (server_thread_id != -1) {
 	gwthread_wakeup(server_thread_id);
 	gwthread_join_every(server_thread);
     }
     mutex_destroy(server_thread_lock);
     fdset_destroy(server_fdset);
-    list_destroy(new_server_sockets, destroy_struct_server);
-    list_destroy(closed_server_sockets, destroy_int_pointer);
+    gwlist_destroy(new_server_sockets, destroy_struct_server);
+    gwlist_destroy(closed_server_sockets, destroy_int_pointer);
 }
 
 
@@ -2511,12 +2511,12 @@
     if (args == NULL)
         return ;
 
-    while ((v = list_extract_first(args)) != NULL) {
+    while ((v = gwlist_extract_first(args)) != NULL) {
         octstr_destroy(v->name);
         octstr_destroy(v->value);
         gw_free(v);
     }
-    list_destroy(args, NULL);
+    gwlist_destroy(args, NULL);
 }
 
 
@@ -2529,8 +2529,8 @@
     gw_assert(list != NULL);
     gw_assert(name != NULL);
 
-    for (i = 0; i < list_len(list); ++i) {
-        v = list_get(list, i);
+    for (i = 0; i < gwlist_len(list); ++i) {
+        v = gwlist_get(list, i);
         if (octstr_str_compare(v->name, name) == 0)
             return v->value;
     }
@@ -2559,14 +2559,14 @@
 List *http_create_empty_headers(void)
 {
     gwlib_assert_init();
-    return list_create();
+    return gwlist_create();
 }
 
 
 void http_destroy_headers(List *headers)
 {
     gwlib_assert_init();
-    list_destroy(headers, octstr_destroy_item);
+    gwlist_destroy(headers, octstr_destroy_item);
 }
 
 
@@ -2577,7 +2577,7 @@
     gw_assert(name != NULL);
     gw_assert(contents != NULL);
 
-    list_append(headers, octstr_format("%s: %s", name, contents));
+    gwlist_append(headers, octstr_format("%s: %s", name, contents));
 }
 
 
@@ -2596,7 +2596,7 @@
     gw_assert(name != NULL);
     gw_assert(value != NULL);
 
-    os = list_get(headers, i);
+    os = gwlist_get(headers, i);
     if (os == NULL)
         colon = -1;
     else
@@ -2629,8 +2629,8 @@
     
     value = NULL;
     i = 0;
-    while (i < list_len(headers)) {
-        os = list_get(headers, i);
+    while (i < gwlist_len(headers)) {
+        os = gwlist_get(headers, i);
         if (os == NULL)
             colon = -1;
         else
@@ -2664,8 +2664,8 @@
         return NULL;
 
     new = http_create_empty_headers();
-    for (i = 0; i < list_len(headers); ++i)
-        list_append(new, octstr_duplicate(list_get(headers, i)));
+    for (i = 0; i < gwlist_len(headers); ++i)
+        gwlist_append(new, octstr_duplicate(gwlist_get(headers, i)));
     return new;
 }
 
@@ -2688,12 +2688,12 @@
      * For each header, search forward headers for similar ones and if possible, 
      * add it to current header and delete it
      */
-    for(i = 0; i < list_len(headers); i++) {
+    for(i = 0; i < gwlist_len(headers); i++) {
         http_header_get(headers, i, &name, &value);
 	/* debug("http_header_pack", 0, "HTTP_HEADER_PACK: Processing header %d. [%s: %s]", 
 	       i, octstr_get_cstr(name), octstr_get_cstr(value)); */
 
-        for(j=i+1; j < list_len(headers); j++) {
+        for(j=i+1; j < gwlist_len(headers); j++) {
             http_header_get(headers, j, &name2, &value2);
 
             if(octstr_case_compare(name, name2) == 0) {
@@ -2705,9 +2705,9 @@
 		    Octstr *header;
 
 		    /* Delete old header */
-		    header = list_get(headers, i);
+		    header = gwlist_get(headers, i);
 		    octstr_destroy(header);
-                    list_delete(headers, i, 1);
+                    gwlist_delete(headers, i, 1);
 
 		    /* Adds comma and new value to old header value */
                     octstr_append(value, octstr_imm(", "));
@@ -2717,12 +2717,12 @@
                     octstr_append(header, name);
                     octstr_append(header, octstr_imm(": "));
                     octstr_append(header, value);
-                    list_insert(headers, i, header);
+                    gwlist_insert(headers, i, header);
 
 		    /* Delete this header */
-		    header = list_get(headers, j);
+		    header = gwlist_get(headers, j);
 		    octstr_destroy(header);
-                    list_delete(headers, j, 1);
+                    gwlist_delete(headers, j, 1);
                     j--;
                 }
             }
@@ -2744,9 +2744,9 @@
     gw_assert(to != NULL);
     gw_assert(from != NULL);
 
-    for (i = 0; i < list_len(from); ++i) {
-        header = list_get(from, i);
-        list_append(to, octstr_duplicate(header));
+    for (i = 0; i < gwlist_len(from); ++i) {
+        header = gwlist_get(from, i);
+        gwlist_append(to, octstr_duplicate(header));
     }
 }
 
@@ -2760,8 +2760,8 @@
     /*
      * Avoid doing this scan if old_headers is empty anyway.
      */
-    if (list_len(old_headers) > 0) {
-        for (i = 0; i < list_len(new_headers); i++) {
+    if (gwlist_len(old_headers) > 0) {
+        for (i = 0; i < gwlist_len(new_headers); i++) {
   	    http_header_get(new_headers, i, &name, &value);
 	    http_header_remove_all(old_headers, octstr_get_cstr(name));
             octstr_destroy(name);
@@ -2785,8 +2785,8 @@
 
     name_len = strlen(name);
 
-    for (i = 0; i < list_len(headers); ++i) {
-        h = list_get(headers, i);
+    for (i = 0; i < gwlist_len(headers); ++i) {
+        h = gwlist_get(headers, i);
         if (header_is_called(h, name)) {
             value = octstr_copy_real(h, name_len + 1, octstr_len(h),
                                      file, line, func);
@@ -2808,11 +2808,11 @@
     gw_assert(headers != NULL);
     gw_assert(name != NULL);
 
-    list = list_create();
-    for (i = 0; i < list_len(headers); ++i) {
-        h = list_get(headers, i);
+    list = gwlist_create();
+    for (i = 0; i < gwlist_len(headers); ++i) {
+        h = gwlist_get(headers, i);
         if (header_is_called(h, name))
-            list_append(list, octstr_duplicate(h));
+            gwlist_append(list, octstr_duplicate(h));
     }
     return list;
 }
@@ -2830,10 +2830,10 @@
 
     i = 0;
     count = 0;
-    while (i < list_len(headers)) {
-	h = list_get(headers, i);
+    while (i < gwlist_len(headers)) {
+	h = gwlist_get(headers, i);
 	if (header_is_called(h, name)) {
-	    list_delete(headers, i, 1);
+	    gwlist_delete(headers, i, 1);
 	    octstr_destroy(h);
 	    count++;
 	} else
@@ -2858,7 +2858,7 @@
      */
 
     connection_headers = http_header_find_all(headers, "Connection");
-    while ((h = list_consume(connection_headers))) {
+    while ((h = gwlist_consume(connection_headers))) {
 	List *hop_headers;
 	Octstr *e;
 
@@ -2866,14 +2866,14 @@
 	hop_headers = http_header_split_value(h);
 	octstr_destroy(h);
 
-	while ((e = list_consume(hop_headers))) {
+	while ((e = gwlist_consume(hop_headers))) {
 	    http_header_remove_all(headers, octstr_get_cstr(e));
 	    octstr_destroy(e);
 	}
 
-	list_destroy(hop_headers, NULL);
+	gwlist_destroy(hop_headers, NULL);
     }
-    list_destroy(connection_headers, NULL);
+    gwlist_destroy(connection_headers, NULL);
    
     http_header_remove_all(headers, "Connection");
     http_header_remove_all(headers, "Keep-Alive");
@@ -2963,7 +2963,7 @@
     if (octstr_len(element) == 0)
 	octstr_destroy(element);
     else
-    	list_append(list, element);
+    	gwlist_append(list, element);
 }
 
 
@@ -3007,7 +3007,7 @@
      * commas in quoted-strings.
      */
  
-    result = list_create();
+    result = gwlist_create();
     len = octstr_len(value);
     start = 0;
     for (pos = 0; pos < len; pos++) {
@@ -3052,16 +3052,16 @@
      */
  
     result = http_header_split_value(value);
-    if (list_len(result) == 0)
+    if (gwlist_len(result) == 0)
         return result;
 
-    auth_scheme = list_get(result, 0);
+    auth_scheme = gwlist_get(result, 0);
     i = 1;
-    while (i < list_len(result)) {
+    while (i < gwlist_len(result)) {
         int c;
         long pos;
 
-        element = list_get(result, i);
+        element = gwlist_get(result, i);
 
         /*
          * If the element starts with: token '='
@@ -3087,7 +3087,7 @@
         if (octstr_get_char(element, pos) == '=') {
             octstr_append_char(auth_scheme, ';');
             octstr_append(auth_scheme, element);
-            list_delete(result, i, 1);
+            gwlist_delete(result, i, 1);
             octstr_destroy(element);
         } else {
             unsigned char semicolon = ';';
@@ -3108,8 +3108,8 @@
     gwlib_assert_init();
 
     debug("gwlib.http", 0, "Dumping HTTP headers:");
-    for (i = 0; headers != NULL && i < list_len(headers); ++i)
-        octstr_dump(list_get(headers, i), 1);
+    for (i = 0; headers != NULL && i < gwlist_len(headers); ++i)
+        octstr_dump(gwlist_get(headers, i), 1);
     debug("gwlib.http", 0, "End of dump.");
 }
 
@@ -3119,8 +3119,8 @@
 
     gwlib_assert_init();
 
-    debug("gwlib.http", 0, "Dumping %ld cgi variables:", list_len(cgiargs));
-    while ((v = list_extract_first(cgiargs)) != NULL) {
+    debug("gwlib.http", 0, "Dumping %ld cgi variables:", gwlist_len(cgiargs));
+    while ((v = gwlist_extract_first(cgiargs)) != NULL) {
         octstr_dump(v->name, 0);
         octstr_dump(v->value, 0);
     }
@@ -3144,8 +3144,8 @@
     accepts = http_header_find_all(headers, header_name);
 
     found = 0;
-    for (i = 0; !found && i < list_len(accepts); ++i) {
-        Octstr *header_value = list_get(accepts, i);
+    for (i = 0; !found && i < gwlist_len(accepts); ++i) {
+        Octstr *header_value = gwlist_get(accepts, i);
         if (octstr_case_search(header_value, needle, 0) != -1)
             found = 1;
     }
diff -ur kannel-1.4.0/gwlib/list.c kannel-1.4.0.mod/gwlib/list.c
--- kannel-1.4.0/gwlib/list.c	2004-08-11 18:41:29.000000000 +0200
+++ kannel-1.4.0.mod/gwlib/list.c	2006-03-24 16:50:55.000000000 +0100
@@ -122,7 +122,7 @@
 static void delete_items_from_list(List *list, long pos, long count);
 
 
-List *list_create_real(void)
+List *gwlist_create_real(void)
 {
     List *list;
 
@@ -139,7 +139,7 @@
 }
 
 
-void list_destroy(List *list, list_item_destructor_t *destructor)
+void gwlist_destroy(List *list, gwlist_item_destructor_t *destructor)
 {
     void *item;
 
@@ -147,7 +147,7 @@
         return;
 
     if (destructor != NULL) {
-        while ((item = list_extract_first(list)) != NULL)
+        while ((item = gwlist_extract_first(list)) != NULL)
             destructor(item);
     }
 
@@ -159,7 +159,7 @@
 }
 
 
-long list_len(List *list)
+long gwlist_len(List *list)
 {
     long len;
 
@@ -172,7 +172,7 @@
 }
 
 
-void list_append(List *list, void *item)
+void gwlist_append(List *list, void *item)
 {
     lock(list);
     make_bigger(list, 1);
@@ -183,7 +183,7 @@
 }
 
 
-void list_append_unique(List *list, void *item, int (*cmp)(void *, void *))
+void gwlist_append_unique(List *list, void *item, int (*cmp)(void *, void *))
 {
     void *it;
     long i;
@@ -207,7 +207,7 @@
 }
         
 
-void list_insert(List *list, long pos, void *item)
+void gwlist_insert(List *list, long pos, void *item)
 {
     long i;
 
@@ -226,7 +226,7 @@
 }
 
 
-void list_delete(List *list, long pos, long count)
+void gwlist_delete(List *list, long pos, long count)
 {
     lock(list);
     delete_items_from_list(list, pos, count);
@@ -234,7 +234,7 @@
 }
 
 
-long list_delete_matching(List *list, void *pat, list_item_matches_t *matches)
+long gwlist_delete_matching(List *list, void *pat, gwlist_item_matches_t *matches)
 {
     long i;
     long count;
@@ -260,7 +260,7 @@
 }
 
 
-long list_delete_equal(List *list, void *item)
+long gwlist_delete_equal(List *list, void *item)
 {
     long i;
     long count;
@@ -286,7 +286,7 @@
 }
 
 
-void *list_get(List *list, long pos)
+void *gwlist_get(List *list, long pos)
 {
     void *item;
 
@@ -299,7 +299,7 @@
 }
 
 
-void *list_extract_first(List *list)
+void *gwlist_extract_first(List *list)
 {
     void *item;
 
@@ -316,46 +316,46 @@
 }
 
 
-List *list_extract_matching(List *list, void *pat, list_item_matches_t *cmp)
+List *gwlist_extract_matching(List *list, void *pat, gwlist_item_matches_t *cmp)
 {
     List *new_list;
     long i;
 
-    new_list = list_create();
+    new_list = gwlist_create();
     lock(list);
     i = 0;
     while (i < list->len) {
         if (cmp(GET(list, i), pat)) {
-            list_append(new_list, GET(list, i));
+            gwlist_append(new_list, GET(list, i));
             delete_items_from_list(list, i, 1);
         } else
             ++i;
     }
     unlock(list);
 
-    if (list_len(new_list) == 0) {
-        list_destroy(new_list, NULL);
+    if (gwlist_len(new_list) == 0) {
+        gwlist_destroy(new_list, NULL);
         return NULL;
     }
     return new_list;
 }
 
 
-void list_lock(List *list)
+void gwlist_lock(List *list)
 {
     gw_assert(list != NULL);
     mutex_lock(list->permanent_lock);
 }
 
 
-void list_unlock(List *list)
+void gwlist_unlock(List *list)
 {
     gw_assert(list != NULL);
     mutex_unlock(list->permanent_lock);
 }
 
 
-int list_wait_until_nonempty(List *list)
+int gwlist_wait_until_nonempty(List *list)
 {
     int ret;
 
@@ -375,7 +375,7 @@
 }
 
 
-void list_add_producer(List *list)
+void gwlist_add_producer(List *list)
 {
     lock(list);
     ++list->num_producers;
@@ -383,7 +383,7 @@
 }
 
 
-int list_producer_count(List *list)
+int gwlist_producer_count(List *list)
 {
     int ret;
     lock(list);
@@ -393,7 +393,7 @@
 }
 
 
-void list_remove_producer(List *list)
+void gwlist_remove_producer(List *list)
 {
     lock(list);
     gw_assert(list->num_producers > 0);
@@ -403,13 +403,13 @@
 }
 
 
-void list_produce(List *list, void *item)
+void gwlist_produce(List *list, void *item)
 {
-    list_append(list, item);
+    gwlist_append(list, item);
 }
 
 
-void *list_consume(List *list)
+void *gwlist_consume(List *list)
 {
     void *item;
 
@@ -431,7 +431,7 @@
 }
 
 
-void *list_search(List *list, void *pattern, int (*cmp)(void *, void *))
+void *gwlist_search(List *list, void *pattern, int (*cmp)(void *, void *))
 {
     void *item;
     long i;
@@ -454,25 +454,25 @@
 
 
 
-List *list_search_all(List *list, void *pattern, int (*cmp)(void *, void *))
+List *gwlist_search_all(List *list, void *pattern, int (*cmp)(void *, void *))
 {
     List *new_list;
     void *item;
     long i;
 
-    new_list = list_create();
+    new_list = gwlist_create();
 
     lock(list);
     item = NULL;
     for (i = 0; i < list->len; ++i) {
         item = GET(list, i);
         if (cmp(item, pattern))
-            list_append(new_list, item);
+            gwlist_append(new_list, item);
     }
     unlock(list);
 
-    if (list_len(new_list) == 0) {
-        list_destroy(new_list, NULL);
+    if (gwlist_len(new_list) == 0) {
+        gwlist_destroy(new_list, NULL);
         new_list = NULL;
     }
 
@@ -480,18 +480,18 @@
 }
 
 
-void list_sort(List *list, int(*cmp)(const void *, const void *))
+void gwlist_sort(List *list, int(*cmp)(const void *, const void *))
 {
     gw_assert(list != NULL && cmp != NULL);
 
-    list_lock(list);
+    gwlist_lock(list);
     if (list->len == 0) {
         /* nothing to sort */
-        list_unlock(list);
+        gwlist_unlock(list);
         return;
     }
     qsort(&GET(list, 0), list->len, sizeof(void*), cmp);
-    list_unlock(list);
+    gwlist_unlock(list);
 }
 
 
diff -ur kannel-1.4.0/gwlib/list.h kannel-1.4.0.mod/gwlib/list.h
--- kannel-1.4.0/gwlib/list.h	2004-06-28 11:53:38.000000000 +0200
+++ kannel-1.4.0.mod/gwlib/list.h	2006-03-24 16:50:55.000000000 +0100
@@ -75,18 +75,18 @@
  * the list counts the number of producers it has (they need to register
  * _and_ unregister explicitly) and has functions for adding a produced
  * item to the list and removing an item so that it can be consumed. The
- * consumption function (`list_consume') sleeps, without using processor
+ * consumption function (`gwlist_consume') sleeps, without using processor
  * time, until there is an item to be consumed or there are no more
  * producers. Thus, a typical producer would look like this:
  *
- *	list_add_producer(list);
+ *	gwlist_add_producer(list);
  *	while ((item = foo()) != NULL)
- *		list_produce(list, item);
- *	list_remove_producer(list);
+ *		gwlist_produce(list, item);
+ *	gwlist_remove_producer(list);
  *
  * and the corresponding consumer would look like this:
  *
- *	while ((item = list_consume(list)) != NULL)
+ *	while ((item = gwlist_consume(list)) != NULL)
  *		bar(item);
  *
  * There can be any number of producers and consumers at the same time.
@@ -119,150 +119,150 @@
  * equal, false for non-equal. Gets an item from the list as the first
  * argument, the pattern as a second argument.
  */
-typedef int list_item_matches_t(void *item, void *pattern);
+typedef int gwlist_item_matches_t(void *item, void *pattern);
 
 
 /*
  * A destructor function for list items.  Must free all memory associated
  * with the list item.
  */
-typedef void list_item_destructor_t(void *item);
+typedef void gwlist_item_destructor_t(void *item);
 
 
 /*
  * Create a list and return a pointer to the list object.
  */
-List *list_create_real(void);
-#define list_create() gw_claim_area(list_create_real())
+List *gwlist_create_real(void);
+#define gwlist_create() gw_claim_area(gwlist_create_real())
 
 /*
  * Destroy the list. If `destructor' is not NULL, first destroy all items
  * by calling it for each item. If it is NULL, the caller is responsible
  * for destroying items. The caller is also responsible for making sure
  * that nothing else tries to touch the list from the time the call to
- * list_destroy starts - this includes the item destructor function.
+ * gwlist_destroy starts - this includes the item destructor function.
  */
-void list_destroy(List *list, list_item_destructor_t *destructor);
+void gwlist_destroy(List *list, gwlist_item_destructor_t *destructor);
 
 
 /*
  * Return the number of items in the list.  Return 0 if list is NULL.
  */
-long list_len(List *list);
+long gwlist_len(List *list);
 
 
 /*
  * Add a new item to the end of the list.
  */
-void list_append(List *list, void *item);
+void gwlist_append(List *list, void *item);
 
 
 /*
- * This is similar to list_append(). If the item is *not* present in the 
+ * This is similar to gwlist_append(). If the item is *not* present in the 
  * list it is added to the end of the list, otherwise the item is 
  * discarded and *not* added to the list. Hence you can assume that using
  * this append function you result in a unique item inside the list.
  */
-void list_append_unique(List *list, void *item, list_item_matches_t *cmp);
+void gwlist_append_unique(List *list, void *item, gwlist_item_matches_t *cmp);
 
 
 /*
  * Insert an item into the list so that it becomes item number `pos'.
  */
-void list_insert(List *list, long pos, void *item);
+void gwlist_insert(List *list, long pos, void *item);
 
 
 /*
  * Delete items from the list. Note that this does _not_ free the memory
  * for the items, they are just dropped from the list.
  */
-void list_delete(List *list, long pos, long count);
+void gwlist_delete(List *list, long pos, long count);
 
 
 /*
- * Delete all items from the list that match `pattern'. Like list_delete,
+ * Delete all items from the list that match `pattern'. Like gwlist_delete,
  * the items are removed from the list, but are not destroyed themselves.
  * Return the number of items deleted.
  */
-long list_delete_matching(List *list, void *pat, list_item_matches_t *cmp);
+long gwlist_delete_matching(List *list, void *pat, gwlist_item_matches_t *cmp);
 
 
 /*
  * Delete all items from the list whose pointer value is exactly `item'.
  * Return the number of items deleted.
  */
-long list_delete_equal(List *list, void *item);
+long gwlist_delete_equal(List *list, void *item);
 
 
 /*
  * Return the item at position `pos'.
  */
-void *list_get(List *list, long pos);
+void *gwlist_get(List *list, long pos);
 
 
 /*
  * Remove and return the first item in the list. Return NULL if list is
- * empty. Note that unlike list_consume, this won't sleep until there is
+ * empty. Note that unlike gwlist_consume, this won't sleep until there is
  * something in the list.
  */
-void *list_extract_first(List *list);
+void *gwlist_extract_first(List *list);
 
 
 /*
  * Create a new list with items from `list' that match a pattern. The items
  * are removed from `list'. Return NULL if no matching items are found.
- * Note that unlike list_consume, this won't sleep until there is
+ * Note that unlike gwlist_consume, this won't sleep until there is
  * something in the list.
  */
-List *list_extract_matching(List *list, void *pat, list_item_matches_t *cmp);
+List *gwlist_extract_matching(List *list, void *pat, gwlist_item_matches_t *cmp);
 
 
 /*
  * Lock the list. This protects the list from other threads that also
- * lock the list with list_lock, but not from threads that do not.
+ * lock the list with gwlist_lock, but not from threads that do not.
  * (This is intentional.)
  */
-void list_lock(List *list);
+void gwlist_lock(List *list);
 
 
 /*
- * Unlock the list lock locked by list_lock. Only the owner of the lock
+ * Unlock the list lock locked by gwlist_lock. Only the owner of the lock
  * may unlock it (although this might not be checked).
  */
-void list_unlock(List *list);
+void gwlist_unlock(List *list);
 
 
 /*
  * Sleep until the list is non-empty. Note that after the thread awakes
  * another thread may already have emptied the list again. Those who wish
- * to use this function need to be very careful with list_lock and
- * list_unlock.
+ * to use this function need to be very careful with gwlist_lock and
+ * gwlist_unlock.
  */
-int list_wait_until_nonempty(List *list);
+int gwlist_wait_until_nonempty(List *list);
 
 
 /*
  * Register a new producer to the list.
  */
-void list_add_producer(List *list);
+void gwlist_add_producer(List *list);
 
 /*
  * Return the current number of producers for the list
  */
-int list_producer_count(List *list);
+int gwlist_producer_count(List *list);
 
 /*
  * Remove a producer from the list. If the number of producers drops to
- * zero, all threads sleeping in list_consume will awake and return NULL.
+ * zero, all threads sleeping in gwlist_consume will awake and return NULL.
  */
-void list_remove_producer(List *list);
+void gwlist_remove_producer(List *list);
 
 
 /*
- * Add an item to the list. This equivalent to list_append, but may be
+ * Add an item to the list. This equivalent to gwlist_append, but may be
  * easier to remember.
  */
-void list_produce(List *list, void *item);
+void gwlist_produce(List *list, void *item);
 
 
 /*
@@ -270,7 +270,7 @@
  * and there were no producers. If the list is empty but there are
  * producers, sleep until there is something to return.
  */
-void *list_consume(List *list);
+void *gwlist_consume(List *list);
 
 
 /*
@@ -279,7 +279,7 @@
  * `cmp(item, pattern)'. If the function returns non-zero, the items are 
  * equal.
  */
-void *list_search(List *list, void *pattern, list_item_matches_t *cmp);
+void *gwlist_search(List *list, void *pattern, gwlist_item_matches_t *cmp);
 
 
 /*
@@ -288,12 +288,12 @@
  * to search pattern with `cmp(item, pattern)'. If the function returns 
  * non-zero, the items are equal.
  */
-List *list_search_all(List *list, void *pattern, list_item_matches_t *cmp);
+List *gwlist_search_all(List *list, void *pattern, gwlist_item_matches_t *cmp);
 
 
 /*
  * Sort the list with qsort.
  */
-void list_sort(List *list, int(*cmp)(const void *, const void *));
+void gwlist_sort(List *list, int(*cmp)(const void *, const void *));
 
 #endif
diff -ur kannel-1.4.0/gwlib/log.c kannel-1.4.0.mod/gwlib/log.c
--- kannel-1.4.0/gwlib/log.c	2004-08-08 23:46:51.000000000 +0200
+++ kannel-1.4.0.mod/gwlib/log.c	2006-03-24 17:05:23.000000000 +0100
@@ -177,14 +177,14 @@
 
     /* initialize rw lock */
     if (writers == NULL);
-        writers = list_create();
+        writers = gwlist_create();
 }
 
 void log_shutdown(void)
 {
     log_close_all();
     if (writers != NULL)
-        list_destroy(writers, NULL);
+        gwlist_destroy(writers, NULL);
     writers = NULL;
 }
 
@@ -236,9 +236,9 @@
      * Writer lock.
      */
     if (writers != NULL) {
-        list_lock(writers);
+        gwlist_lock(writers);
         /* wait for writers complete */
-        list_consume(writers);
+        gwlist_consume(writers);
     }
 
     for (i = 0; i < num_logfiles; ++i) {
@@ -273,7 +273,7 @@
      * Unlock writer.
      */
     if (writers != NULL)
-        list_unlock(writers);
+        gwlist_unlock(writers);
 }
 
 
@@ -283,9 +283,9 @@
      * Writer lock.
      */
     if (writers != NULL) {
-        list_lock(writers);
+        gwlist_lock(writers);
         /* wait for writers */
-        list_consume(writers);
+        gwlist_consume(writers);
     }
 
     while (num_logfiles > 0) {
@@ -300,7 +300,7 @@
      * Unlock writer.
      */
     if (writers != NULL)
-        list_unlock(writers);
+        gwlist_unlock(writers);
 
     /* close syslog if used */
     if (dosyslog) {
@@ -316,7 +316,7 @@
     int i;
     
     if (writers == NULL)
-        writers = list_create();
+        writers = gwlist_create();
 
     if (num_logfiles == MAX_LOGFILES) {
         error(0, "Too many log files already open, not adding `%s'",
@@ -482,9 +482,9 @@
 	    \
 	    format(buf, level, place, err, fmt, 1); \
             if (writers != NULL) { \
-                list_lock(writers); \
-                list_add_producer(writers); \
-                list_unlock(writers); \
+                gwlist_lock(writers); \
+                gwlist_add_producer(writers); \
+                gwlist_unlock(writers); \
             } \
 	    for (i = 0; i < num_logfiles; ++i) { \
 		if (logfiles[i].exclusive == GW_NON_EXCL && \
@@ -496,7 +496,7 @@
 		} \
 	    } \
             if (writers != NULL) \
-                list_remove_producer(writers); \
+                gwlist_remove_producer(writers); \
 	    if (dosyslog) { \
 	        format(buf, level, place, err, fmt, 0); \
 		va_start(args, fmt); \
@@ -512,9 +512,9 @@
 	    \
 	    format(buf, level, place, err, fmt, 1); \
             if (writers != NULL) { \
-                list_lock(writers); \
-                list_add_producer(writers); \
-                list_unlock(writers); \
+                gwlist_lock(writers); \
+                gwlist_add_producer(writers); \
+                gwlist_unlock(writers); \
             } \
             if (logfiles[e].exclusive == GW_EXCL && \
                 level >= logfiles[e].minimum_output_level && \
@@ -524,7 +524,7 @@
                 va_end(args); \
             } \
             if (writers != NULL) \
-              list_remove_producer(writers); \
+              gwlist_remove_producer(writers); \
 	} while (0)
 
 
diff -ur kannel-1.4.0/gwlib/mime.c kannel-1.4.0.mod/gwlib/mime.c
--- kannel-1.4.0/gwlib/mime.c	2004-08-11 18:41:29.000000000 +0200
+++ kannel-1.4.0.mod/gwlib/mime.c	2006-03-24 17:05:23.000000000 +0100
@@ -84,7 +84,7 @@
 
     e = gw_malloc(sizeof(MIMEEntity));
     e->headers = http_create_empty_headers();
-    e->multiparts = list_create();
+    e->multiparts = gwlist_create();
     e->body = NULL;
     e->start = NULL;
 
@@ -101,11 +101,11 @@
     gw_assert(e != NULL);
 
     if (e->headers != NULL)
-        list_destroy(e->headers, octstr_destroy_item);
+        gwlist_destroy(e->headers, octstr_destroy_item);
     if (e->multiparts != NULL)
-        list_destroy(e->multiparts, mime_entity_destroy_item);
+        gwlist_destroy(e->multiparts, mime_entity_destroy_item);
     octstr_destroy(e->body);
-    e->start = NULL; /* will be destroyed on it's own via list_destroy */
+    e->start = NULL; /* will be destroyed on it's own via gwlist_destroy */
   
     gw_free(e);
 }    
@@ -123,10 +123,10 @@
 {
     Octstr *line, *prev;
 
-    if (list_len(headers) == 0)
+    if (gwlist_len(headers) == 0)
         prev = NULL;
     else
-        prev = list_get(headers, list_len(headers) - 1);
+        prev = gwlist_get(headers, gwlist_len(headers) - 1);
 
     for (;;) {
         line = parse_get_line(context);
@@ -141,7 +141,7 @@
             octstr_append(prev, line);
             octstr_destroy(line);
         } else {
-            list_append(headers, line);
+            gwlist_append(headers, line);
             prev = line;
         }
     }
@@ -170,9 +170,9 @@
      * list. If no, then add headers and body and return. This is the
      * easy case. Otherwise we have to loop inside our entities.
      */
-    if (list_len(m->multiparts) == 0) {
-        for (i = 0; i < list_len(m->headers); i++) {
-            octstr_append(mime, list_get(m->headers, i));
+    if (gwlist_len(m->multiparts) == 0) {
+        for (i = 0; i < gwlist_len(m->headers); i++) {
+            octstr_append(mime, gwlist_get(m->headers, i));
             octstr_append(mime, octstr_imm("\r\n"));
         }
         octstr_append(mime, octstr_imm("\r\n"));
@@ -203,15 +203,15 @@
     octstr_destroy(value);
 
     /* headers */
-    for (i = 0; i < list_len(headers); i++) {
-        octstr_append(mime, list_get(headers, i));
+    for (i = 0; i < gwlist_len(headers); i++) {
+        octstr_append(mime, gwlist_get(headers, i));
         octstr_append(mime, octstr_imm("\r\n"));
     }
     http_destroy_headers(headers);
 
     /* loop through all MIME multipart entities of this entity */
-    for (i = 0; i < list_len(m->multiparts); i++) {
-        MIMEEntity *e = list_get(m->multiparts, i);
+    for (i = 0; i < gwlist_len(m->multiparts); i++) {
+        MIMEEntity *e = gwlist_get(m->multiparts, i);
         Octstr *body;
 
         if (i != 0)
@@ -342,7 +342,7 @@
 
             /* call ourself for this MIME entity and inject to list */
             m = mime_octstr_to_entity(entity);
-            list_append(e->multiparts, m);
+            gwlist_append(e->multiparts, m);
 
             /* check if this entity is our start entity (in terms of related)
              * and set our start pointer to it */
@@ -469,7 +469,7 @@
               octstr_get_cstr(prefix), octstr_get_cstr(cid), m->start);
         octstr_destroy(cid);
     }
-    items = list_len(m->multiparts);
+    items = gwlist_len(m->multiparts);
     debug("mime.dump",0,"%sBody contains %ld MIME entities, size %ld", octstr_get_cstr(prefix),
           items, (items == 0 && m->body) ? octstr_len(m->body) : -1);
 
@@ -478,7 +478,7 @@
     octstr_destroy(charset);
 
     for (i = 0; i < items; i++) {
-        MIMEEntity *e = list_get(m->multiparts, i);
+        MIMEEntity *e = gwlist_get(m->multiparts, i);
 
         mime_entity_dump_real(e, level + 1);
     }
diff -ur kannel-1.4.0/gwlib/octstr.c kannel-1.4.0.mod/gwlib/octstr.c
--- kannel-1.4.0/gwlib/octstr.c	2004-08-11 18:41:29.000000000 +0200
+++ kannel-1.4.0.mod/gwlib/octstr.c	2006-03-24 16:50:55.000000000 +0100
@@ -1509,7 +1509,7 @@
 
     seems_valid(ostr);
 
-    list = list_create();
+    list = gwlist_create();
 
     p = ostr->data;
     i = 0;
@@ -1531,7 +1531,7 @@
 
         word = octstr_create_from_data(ostr->data + start,
                                        end - start);
-        list_append(list, word);
+        gwlist_append(list, word);
     }
 
     return list;
@@ -1543,17 +1543,17 @@
     List *list;
     long next, pos, seplen;
     
-    list = list_create();
+    list = gwlist_create();
     pos = 0;
     seplen = octstr_len(sep);
 
     while ((next = octstr_search(os, sep, pos)) != -1) {
-	list_append(list, octstr_copy(os, pos, next - pos));
+	gwlist_append(list, octstr_copy(os, pos, next - pos));
 	pos = next + seplen;
     }
     
     if (pos < octstr_len(os))
-    	list_append(list, octstr_copy(os, pos, octstr_len(os)));
+    	gwlist_append(list, octstr_copy(os, pos, octstr_len(os)));
     
     return list;
 }
diff -ur kannel-1.4.0/gwlib/octstr.c.debug kannel-1.4.0.mod/gwlib/octstr.c.debug
--- kannel-1.4.0/gwlib/octstr.c.debug	2003-06-19 14:55:40.000000000 +0200
+++ kannel-1.4.0.mod/gwlib/octstr.c.debug	2006-03-24 16:50:55.000000000 +0100
@@ -1282,7 +1282,7 @@
 
     seems_valid(ostr);
 
-    list = list_create();
+    list = gwlist_create();
 
     p = ostr->data;
     i = 0;
@@ -1304,7 +1304,7 @@
 
         word = octstr_create_from_data(ostr->data + start,
                                        end - start);
-        list_append(list, word);
+        gwlist_append(list, word);
     }
 
     return list;
@@ -1316,17 +1316,17 @@
     List *list;
     long next, pos, seplen;
     
-    list = list_create();
+    list = gwlist_create();
     pos = 0;
     seplen = octstr_len(sep);
 
     while ((next = octstr_search(os, sep, pos)) != -1) {
-	list_append(list, octstr_copy(os, pos, next - pos));
+	gwlist_append(list, octstr_copy(os, pos, next - pos));
 	pos = next + seplen;
     }
     
     if (pos < octstr_len(os))
-    	list_append(list, octstr_copy(os, pos, octstr_len(os)));
+    	gwlist_append(list, octstr_copy(os, pos, octstr_len(os)));
     
     return list;
 }
diff -ur kannel-1.4.0/gwlib/octstr.h kannel-1.4.0.mod/gwlib/octstr.h
--- kannel-1.4.0/gwlib/octstr.h	2004-06-28 11:53:38.000000000 +0200
+++ kannel-1.4.0.mod/gwlib/octstr.h	2006-03-24 16:50:55.000000000 +0100
@@ -156,7 +156,7 @@
 
 /*
  * Destroy an octet string. Wrapper around octstr_destroy that is callable
- * via list_destroy.
+ * via gwlist_destroy.
  */
 void octstr_destroy_item(void *os);
 
@@ -517,7 +517,7 @@
 
 
 /*
- * Compare two octet strings in a manner suitable for list_search.
+ * Compare two octet strings in a manner suitable for gwlist_search.
  */
 int octstr_item_match(void *item, void *pattern);
 
diff -ur kannel-1.4.0/gwlib/octstr.h.debug kannel-1.4.0.mod/gwlib/octstr.h.debug
--- kannel-1.4.0/gwlib/octstr.h.debug	2003-04-14 15:44:36.000000000 +0200
+++ kannel-1.4.0.mod/gwlib/octstr.h.debug	2006-03-24 16:50:55.000000000 +0100
@@ -99,7 +99,7 @@
 
 /*
  * Destroy an octet string. Wrapper around octstr_destroy that is callable
- * via list_destroy.
+ * via gwlist_destroy.
  */
 void octstr_destroy_item(void *os);
 
@@ -434,7 +434,7 @@
 
 
 /*
- * Compare two octet strings in a manner suitable for list_search.
+ * Compare two octet strings in a manner suitable for gwlist_search.
  */
 int octstr_item_match(void *item, void *pattern);
 
diff -ur kannel-1.4.0/gwlib/parse.c kannel-1.4.0.mod/gwlib/parse.c
--- kannel-1.4.0/gwlib/parse.c	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/gwlib/parse.c	2006-03-24 16:50:55.000000000 +0100
@@ -90,9 +90,9 @@
     gw_assert(context != NULL);
 
     if (context->limit_stack) {
-        while (list_len(context->limit_stack) > 0)
-            gw_free(list_extract_first(context->limit_stack));
-        list_destroy(context->limit_stack, NULL);
+        while (gwlist_len(context->limit_stack) > 0)
+            gw_free(gwlist_extract_first(context->limit_stack));
+        gwlist_destroy(context->limit_stack, NULL);
     }
     gw_free(context);
 }
@@ -130,11 +130,11 @@
     }
 
     if (context->limit_stack == NULL)
-        context->limit_stack = list_create();
+        context->limit_stack = gwlist_create();
 
     elem = gw_malloc(sizeof(*elem));
     *elem = context->limit;
-    list_insert(context->limit_stack, 0, elem);
+    gwlist_insert(context->limit_stack, 0, elem);
     context->limit = context->pos + length;
     return 0;
 }
@@ -145,12 +145,12 @@
 
     gw_assert(context != NULL);
 
-    if (context->limit_stack == NULL || list_len(context->limit_stack) == 0) {
+    if (context->limit_stack == NULL || gwlist_len(context->limit_stack) == 0) {
         context->error = 1;
         return -1;
     }
 
-    elem = list_extract_first(context->limit_stack);
+    elem = gwlist_extract_first(context->limit_stack);
     context->limit = *elem;
     gw_free(elem);
     return 0;
diff -ur kannel-1.4.0/gwlib/semaphore.c kannel-1.4.0.mod/gwlib/semaphore.c
--- kannel-1.4.0/gwlib/semaphore.c	2004-08-25 19:47:54.000000000 +0200
+++ kannel-1.4.0.mod/gwlib/semaphore.c	2006-03-24 16:50:55.000000000 +0100
@@ -91,10 +91,10 @@
     if (sem_init(&semaphore->sem, 0, (unsigned int) n) != 0)
         panic(errno, "Couldnot initialize semaphore.");
 #else
-    semaphore->list = list_create();
-    list_add_producer(semaphore->list);
+    semaphore->list = gwlist_create();
+    gwlist_add_producer(semaphore->list);
     while (n-- > 0)
-	list_produce(semaphore->list, &item);
+	gwlist_produce(semaphore->list, &item);
 #endif
 
     return semaphore;
@@ -108,7 +108,7 @@
         if (sem_destroy(&semaphore->sem) != 0)
             panic(errno, "Destroing semaphore while some threads are waiting.");
 #else
-	list_destroy(semaphore->list, NULL);
+	gwlist_destroy(semaphore->list, NULL);
 #endif
 	gw_free(semaphore);
     }
@@ -120,7 +120,7 @@
 #ifndef HAVE_SEMAPHORE
     static char item;
     gw_assert(semaphore != NULL);
-    list_produce(semaphore->list, &item);
+    gwlist_produce(semaphore->list, &item);
 #else
     gw_assert(semaphore != NULL);
     if (sem_post(&semaphore->sem) != 0)
@@ -135,7 +135,7 @@
 #ifdef HAVE_SEMAPHORE
     sem_wait(&semaphore->sem);
 #else
-    list_consume(semaphore->list);
+    gwlist_consume(semaphore->list);
 #endif
 }
 
@@ -151,7 +151,7 @@
         return val;
     }
 #else
-    return list_len(semaphore->list);
+    return gwlist_len(semaphore->list);
 #endif
 }
 
diff -ur kannel-1.4.0/gwlib/utils.c kannel-1.4.0.mod/gwlib/utils.c
--- kannel-1.4.0/gwlib/utils.c	2004-11-05 20:17:19.000000000 +0100
+++ kannel-1.4.0.mod/gwlib/utils.c	2006-03-24 16:50:55.000000000 +0100
@@ -602,12 +602,12 @@
     patterns = octstr_split(pattern_list, octstr_imm(";"));
     matches = 0;
 
-    while (!matches && (pattern = list_extract_first(patterns)) != NULL) {
+    while (!matches && (pattern = gwlist_extract_first(patterns)) != NULL) {
 	matches = pattern_matches_ip(pattern, ip);
 	octstr_destroy(pattern);
     }
     
-    list_destroy(patterns, octstr_destroy_item);
+    gwlist_destroy(patterns, octstr_destroy_item);
     return matches;
 }
 
diff -ur kannel-1.4.0/gwlib/xmlrpc.c kannel-1.4.0.mod/gwlib/xmlrpc.c
--- kannel-1.4.0/gwlib/xmlrpc.c	2004-09-16 22:11:44.000000000 +0200
+++ kannel-1.4.0.mod/gwlib/xmlrpc.c	2006-03-24 16:50:55.000000000 +0100
@@ -270,7 +270,7 @@
     XMLRPCMethodCall *nmsg = gw_malloc(sizeof(XMLRPCMethodCall));
 
     nmsg->method_name = octstr_duplicate(name);
-    nmsg->params = list_create();
+    nmsg->params = gwlist_create();
     
     return nmsg;
 }
@@ -281,7 +281,7 @@
         return;
 
     octstr_destroy(call->method_name);
-    list_destroy(call->params, xmlrpc_value_destroy_item);
+    gwlist_destroy(call->params, xmlrpc_value_destroy_item);
 
     gw_free(call);
 }
@@ -296,7 +296,7 @@
     if (method == NULL || value == NULL)
         return -1;
 
-    list_produce(method->params, value);
+    gwlist_produce(method->params, value);
     return 0;
 }
 
@@ -313,11 +313,11 @@
                          "%*s<methodName>%S</methodName>\n",
                          level, "", level + 2, "", call->method_name);
 
-    list_lock(call->params);
-    if (list_len(call->params) > 0) {
+    gwlist_lock(call->params);
+    if (gwlist_len(call->params) > 0) {
         octstr_format_append(body, "%*s<params>\n", level + 2, "");
-        for (i = 0; i < list_len(call->params); i++) {
-            val = list_get(call->params, i);
+        for (i = 0; i < gwlist_len(call->params); i++) {
+            val = gwlist_get(call->params, i);
             os_value = xmlrpc_value_print(val, level + 6);
 
             if (os_value == NULL) {
@@ -331,7 +331,7 @@
         }
         octstr_format_append(body, "%*s</params>\n", level + 2, "");
     }
-    list_unlock(call->params);
+    gwlist_unlock(call->params);
     octstr_format_append(body, "%*s</methodCall>\n", level, "");
 
     return body;
@@ -695,7 +695,7 @@
     }
     
     if (headers == NULL)
-        headers = list_create();
+        headers = gwlist_create();
     
     http_header_remove_all(headers, "Content-Type");
     http_header_add(headers, "Content-Type", "text/xml");
@@ -747,7 +747,7 @@
             xmlrpc_scalar_destroy(val->v_scalar);
             break;
         case xr_array:
-            list_destroy(val->v_array, xmlrpc_value_destroy_item);
+            gwlist_destroy(val->v_array, xmlrpc_value_destroy_item);
             break;
         case xr_struct:
             dict_destroy(val->v_struct);
@@ -1061,7 +1061,7 @@
     if (xrdoc == NULL)
         return -1;
     if (xrdoc->d_type == xr_methodcall && xrdoc->methodcall != NULL)
-        return list_len(xrdoc->methodcall->params);
+        return gwlist_len(xrdoc->methodcall->params);
     else if (xrdoc->d_type == xr_methodresponse && xrdoc->methodresponse != NULL)
         return (xrdoc->methodresponse->param != NULL ? 1 : 0);
     
@@ -1073,7 +1073,7 @@
     if (xrdoc == NULL)
         return NULL;
     if (xrdoc->d_type == xr_methodcall && xrdoc->methodcall != NULL) 
-        return list_get(xrdoc->methodcall->params, i);
+        return gwlist_get(xrdoc->methodcall->params, i);
     else if (xrdoc->d_type == xr_methodresponse && xrdoc->methodresponse != NULL
              && i == 0)
         return xrdoc->methodresponse->param;
@@ -1168,11 +1168,11 @@
     keys = dict_keys(v_struct);
     body = octstr_format("%*s<struct>\n", level, "");
 
-    while ((key = list_consume(keys)) != NULL) {
+    while ((key = gwlist_consume(keys)) != NULL) {
         member_val = dict_get(v_struct, key);
         os_val = xmlrpc_value_print(member_val, level+4);
         if (os_val == NULL) {
-            list_destroy(keys, octstr_destroy_item);
+            gwlist_destroy(keys, octstr_destroy_item);
             octstr_destroy(key);
             octstr_destroy(body);
             return NULL;
@@ -1186,7 +1186,7 @@
         octstr_destroy(key);
         octstr_destroy(os_val);
     }
-    list_destroy(keys, octstr_destroy_item);
+    gwlist_destroy(keys, octstr_destroy_item);
     octstr_format_append(body, "%*s</struct>\n", level, "");
     
     return body;
@@ -1197,7 +1197,7 @@
 {
     XMLRPCValue *value = xmlrpc_value_create();
     value->v_type = xr_array;
-    value->v_array = list_create();
+    value->v_array = gwlist_create();
 
     return value;
 }
@@ -1207,7 +1207,7 @@
     if (xrarray == NULL || xrarray->v_type != xr_array)
         return -1;
     
-    return  list_len(xrarray->v_array);
+    return  gwlist_len(xrarray->v_array);
 }
 
 int xmlrpc_add_element(XMLRPCValue *xrarray, XMLRPCValue *value)
@@ -1215,7 +1215,7 @@
     if (xrarray == NULL || xrarray->v_type != xr_array || value == NULL)
         return -1;
     
-    list_produce(xrarray->v_array, value);
+    gwlist_produce(xrarray->v_array, value);
     return 1;
 }
 
@@ -1236,7 +1236,7 @@
     if (xrarray == NULL || xrarray->v_type != xr_array || i < 0)
         return NULL;
     
-    return list_get(xrarray->v_array, i);
+    return gwlist_get(xrarray->v_array, i);
 }
 
 int xmlrpc_get_element_type(XMLRPCValue *xrarray, int i)
@@ -1264,8 +1264,8 @@
     
     body = octstr_format("%*s<array>\n%*s<data>", level, "", level+2, "");
 
-    for(i = 0; i < list_len(v_array); i++) {
-        element = list_get(v_array, i);
+    for(i = 0; i < gwlist_len(v_array); i++) {
+        element = gwlist_get(v_array, i);
         os_element = xmlrpc_value_print(element, level+4);
         if (os_element == NULL) {
             octstr_destroy(body);
@@ -1643,18 +1643,18 @@
          * ok, this has to be an <params> tag, otherwise we would 
          * have returned previosly
          */
-        List *params = list_create();;
+        List *params = gwlist_create();;
         status = parse_params(doc, node->xmlChildrenNode, xrdoc, params);
         if (status < 0) return -1;
-        if (list_len(params) != 1) {
+        if (gwlist_len(params) != 1) {
             xrdoc->parse_status = XMLRPC_PARSING_FAILED;
             xrdoc->parse_error = octstr_format("XML-RPC compiler:wrong number of params "
                                                "at level <methodResponse>");
-            list_destroy(params, xmlrpc_value_destroy_item);
+            gwlist_destroy(params, xmlrpc_value_destroy_item);
             return -1;
         }
-        methodresponse->param = list_consume(params);
-        list_destroy(params, xmlrpc_value_destroy_item);
+        methodresponse->param = gwlist_consume(params);
+        gwlist_destroy(params, xmlrpc_value_destroy_item);
         return status;
     }
 
@@ -1850,7 +1850,7 @@
             xmlrpc_value_destroy(value);
             return -1;
         }
-        list_append(params, value);
+        gwlist_append(params, value);
     } else {
         /* we should never be here */
         xrdoc->parse_status = XMLRPC_PARSING_FAILED;
@@ -2044,7 +2044,7 @@
 
         case xr_array:
             xrvalue->v_type = xr_array;
-            xrvalue->v_array = list_create();
+            xrvalue->v_array = gwlist_create();
 
             if (parse_array(doc, node->xmlChildrenNode, xrdoc, xrvalue->v_array) == -1) {
                 xrdoc->parse_status = XMLRPC_PARSING_FAILED; 
@@ -2457,7 +2457,7 @@
             xmlrpc_value_destroy(value);
             return -1;
         }
-        list_append(elements, value);
+        gwlist_append(elements, value);
             
     } else {
         /* we should never be here */
diff -ur kannel-1.4.0/test/drive_wapbox.c kannel-1.4.0.mod/test/drive_wapbox.c
--- kannel-1.4.0/test/drive_wapbox.c	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/test/drive_wapbox.c	2006-03-24 16:50:55.000000000 +0100
@@ -179,13 +179,13 @@
 		"<card id=\"main\" title=\"Hello, world\" newcontext=\"true\">\n"
 		"        <p>Hello, world.</p>\n"
 		"</card></wml>\n");
-	List *reply_headers = list_create();
+	List *reply_headers = gwlist_create();
 	int port;
 
     	port = *(int *) arg;
 	gw_free(arg);
 
-	list_append(reply_headers,
+	gwlist_append(reply_headers,
 		octstr_create("Content-Type: text/vnd.wap.wml"));
 
 	for (;!dying;) {
@@ -248,7 +248,7 @@
 static void initialize_clients(void) {
 	long i;
 
-	ready_clients = list_create();
+	ready_clients = gwlist_create();
 
 	clients = gw_malloc(max_clients * sizeof(*clients));
 	for (i = 0; i < max_clients; i++) {
@@ -258,13 +258,13 @@
 		clients[i].wsp_session_id = -1;
 		clients[i].pages_fetched = 0;
 		clients[i].port = i;
-		list_append(ready_clients, &clients[i]);
+		gwlist_append(ready_clients, &clients[i]);
 	}
 }
 
 static void destroy_clients(void) {
 	gw_free(clients);
-	list_destroy(ready_clients, NULL);
+	gwlist_destroy(ready_clients, NULL);
 }
 
 static Client *find_client(unsigned short port) {
@@ -277,7 +277,7 @@
 
 static void client_done(Client *client) {
 	requests_complete++;
-	list_append(ready_clients, client);
+	gwlist_append(ready_clients, client);
 }
 
 static void increment_tid(Client *client) {
@@ -601,7 +601,7 @@
 			Client *client;
 
 			if (requests_sent < max_requests
-			    && (client = list_extract_first(ready_clients))) {
+			    && (client = gwlist_extract_first(ready_clients))) {
 				start_request(boxc, client);
 				requests_sent++;
 			}
diff -ur kannel-1.4.0/test/fakesmsc.c kannel-1.4.0.mod/test/fakesmsc.c
--- kannel-1.4.0/test/fakesmsc.c	2004-10-28 18:32:14.000000000 +0200
+++ kannel-1.4.0.mod/test/fakesmsc.c	2006-03-24 16:50:55.000000000 +0100
@@ -193,23 +193,23 @@
     int i;
 
     /* randomize source and receiver number */
-    octstr_format_append(msg, "%S", list_get(words, 0));
+    octstr_format_append(msg, "%S", gwlist_get(words, 0));
     if (rnd & 0x1) 
         octstr_format_append(msg, "%d", gw_rand());
 
-    octstr_format_append(msg, " %S", list_get(words, 1));
+    octstr_format_append(msg, " %S", gwlist_get(words, 1));
     if (rnd & 0x2) 
         octstr_format_append(msg, "%d", gw_rand());
 
-    for (i = 2; i < list_len(words); i++) 
-        octstr_format_append(msg, " %S", list_get(words, i));
+    for (i = 2; i < gwlist_len(words); i++) 
+        octstr_format_append(msg, " %S", gwlist_get(words, i));
 
     if (rnd & 0x4)
         octstr_format_append(msg, " %d", gw_rand());
 
     octstr_append_char(msg, 10); /* End of line */
 
-    list_destroy(words, octstr_destroy_item);
+    gwlist_destroy(words, octstr_destroy_item);
 
     return msg;
 }
diff -ur kannel-1.4.0/test/test_cimd2.c kannel-1.4.0.mod/test/test_cimd2.c
--- kannel-1.4.0/test/test_cimd2.c	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/test/test_cimd2.c	2006-03-24 16:50:55.000000000 +0100
@@ -495,18 +495,18 @@
 	long tariff_class = eat_int_parm(packet, 64, 2);
 	long service_desc = eat_int_parm(packet, 65, 1);
 	long priority = eat_int_parm(packet, 67, 1);
-	List *other_dests = list_create();
+	List *other_dests = gwlist_create();
 	Octstr *tmp;
 
 	while ((tmp = eat_string_parm(packet, 21, 20)))
-		list_append(other_dests, tmp);
+		gwlist_append(other_dests, tmp);
 
 	if (logging == LOG_packets) {
 		int i;
 		printf("RCV: Submit to %s", octstr_get_cstr(dest_addr));
-		for (i = 0; i < list_len(other_dests); i++) {
+		for (i = 0; i < gwlist_len(other_dests); i++) {
 			printf(", %s",
-				octstr_get_cstr(list_get(other_dests, i)));
+				octstr_get_cstr(gwlist_get(other_dests, i)));
 		}
 		printf("\n");
 
@@ -560,7 +560,7 @@
 
 	if (!dest_addr) {
 		send_error(out, 53, sequence, "300", "no destination");
-	} else if (list_len(other_dests) > 0) {
+	} else if (gwlist_len(other_dests) > 0) {
 		send_error(out, 53, sequence, "301", "too many destinations");
 	/* TODO: Report many other possible errors here */
 	} else {
@@ -582,7 +582,7 @@
 	octstr_destroy(textb);
 	octstr_destroy(valid_abs);
 	octstr_destroy(delivery_abs);
-	list_destroy(other_dests, octstr_destroy_item);
+	gwlist_destroy(other_dests, octstr_destroy_item);
 }
 
 static void handle_enquire(Octstr *packet, Octstr *out, int sequence) {
diff -ur kannel-1.4.0/test/test_dbpool.c kannel-1.4.0.mod/test/test_dbpool.c
--- kannel-1.4.0/test/test_dbpool.c	2004-03-22 11:07:11.000000000 +0100
+++ kannel-1.4.0.mod/test/test_dbpool.c	2006-03-24 16:50:55.000000000 +0100
@@ -197,14 +197,14 @@
 #if 1 /* selects */
         if (dbpool_conn_select(pconn, sql, NULL, &result) == 0) {
             long i,j;
-            for (i=0; i < list_len(result); i++) {
-                List *row = list_get(result, i);
-                for (j=0; j < list_len(row); j++)
-                    debug("", 0, "col = %ld   value = '%s'", j, octstr_get_cstr(list_get(row,j)));
-                list_destroy(row, octstr_destroy_item);
+            for (i=0; i < gwlist_len(result); i++) {
+                List *row = gwlist_get(result, i);
+                for (j=0; j < gwlist_len(row); j++)
+                    debug("", 0, "col = %ld   value = '%s'", j, octstr_get_cstr(gwlist_get(row,j)));
+                gwlist_destroy(row, octstr_destroy_item);
             }
         }
-        list_destroy(result, NULL);
+        gwlist_destroy(result, NULL);
         dbpool_conn_produce(pconn);
 #else /* only updates */
         debug("", 0, "rows processed = %d ", dbpool_conn_update(pconn, sql, NULL));
diff -ur kannel-1.4.0/test/test_headers.c kannel-1.4.0.mod/test/test_headers.c
--- kannel-1.4.0/test/test_headers.c	2004-07-09 16:13:55.000000000 +0200
+++ kannel-1.4.0.mod/test/test_headers.c	2006-03-24 16:50:55.000000000 +0100
@@ -86,12 +86,12 @@
     http_header_add(old, "Accept", "image/jpeg");
 
     http_header_combine(tmp, old);
-    if (list_len(tmp) != 4) {
+    if (gwlist_len(tmp) != 4) {
         error(0, "http_combine_header with an empty 'old' did not just append.");
     }
 
     http_header_combine(old, new);
-    if (list_len(old) != 4) {
+    if (gwlist_len(old) != 4) {
         error(0, "http_combine_header with an empty 'new' changed 'old'.");
     }
 
@@ -99,12 +99,12 @@
     http_header_add(new, "Accept", "text/plain");
     
     http_header_combine(old, new);
-    if (list_len(old) != 3 ||
-        octstr_compare(list_get(old, 0),
+    if (gwlist_len(old) != 3 ||
+        octstr_compare(gwlist_get(old, 0),
                        octstr_imm("Accept-Language: en")) != 0 ||
-        octstr_compare(list_get(old, 1),
+        octstr_compare(gwlist_get(old, 1),
                        octstr_imm("Accept: text/html")) != 0 ||
-        octstr_compare(list_get(old, 2),
+        octstr_compare(gwlist_get(old, 2),
                        octstr_imm("Accept: text/plain")) != 0) {
         error(0, "http_header_combine failed.");
     }
@@ -120,8 +120,8 @@
     long start;
     long pos;
 
-    *split = list_create();
-    *expected = list_create();
+    *split = gwlist_create();
+    *expected = gwlist_create();
     start = 0;
     for (pos = 0; pos < octstr_len(headers); pos++) {
         if (octstr_get_char(headers, pos) == '\n') {
@@ -140,12 +140,12 @@
             c = octstr_get_char(line, 0);
             octstr_delete(line, 0, 2);
             if (c == '|') {
-                list_append(*split, line);
-                list_append(*expected, octstr_duplicate(line));
+                gwlist_append(*split, line);
+                gwlist_append(*expected, octstr_duplicate(line));
             } else if (c == '<') {
-                list_append(*split, line);
+                gwlist_append(*split, line);
             } else if (c == '>') {
-                list_append(*expected, line);
+                gwlist_append(*expected, line);
             } else if (c == '#') {
                 /* comment */
                 octstr_destroy(line);
@@ -181,14 +181,14 @@
     packed = wsp_headers_pack(split, 0, WSP_1_2);
     unpacked = wsp_headers_unpack(packed, 0);
 
-    if (list_len(unpacked) != list_len(expected)) {
+    if (gwlist_len(unpacked) != gwlist_len(expected)) {
         error(0, "Expected %ld headers, generated %ld.\n",
-              list_len(expected), list_len(unpacked));
+              gwlist_len(expected), gwlist_len(unpacked));
     } else {
-        for (i = 0; i < list_len(unpacked); i++) {
+        for (i = 0; i < gwlist_len(unpacked); i++) {
             Octstr *got, *exp;
-            got = list_get(unpacked, i);
-            exp = list_get(expected, i);
+            got = gwlist_get(unpacked, i);
+            exp = gwlist_get(expected, i);
             if (octstr_compare(got, exp) != 0) {
                 error(0, "Exp: %s", octstr_get_cstr(exp));
                 error(0, "Got: %s", octstr_get_cstr(got));
@@ -200,10 +200,10 @@
 
     octstr_destroy(headers);
     octstr_destroy(filename);
-    list_destroy(split, octstr_destroy_item);
-    list_destroy(expected, octstr_destroy_item);
+    gwlist_destroy(split, octstr_destroy_item);
+    gwlist_destroy(expected, octstr_destroy_item);
     octstr_destroy(packed);
-    list_destroy(unpacked, octstr_destroy_item);
+    gwlist_destroy(unpacked, octstr_destroy_item);
 
     wsp_strings_shutdown();
     gwlib_shutdown();
diff -ur kannel-1.4.0/test/test_http.c kannel-1.4.0.mod/test/test_http.c
--- kannel-1.4.0/test/test_http.c	2004-07-14 12:31:25.000000000 +0200
+++ kannel-1.4.0.mod/test/test_http.c	2006-03-24 16:50:55.000000000 +0100
@@ -173,12 +173,12 @@
     octstr_destroy(charset);
     if (verbose)
         debug("", 0, "Reply headers:");
-    while ((os = list_extract_first(replyh)) != NULL) {
+    while ((os = gwlist_extract_first(replyh)) != NULL) {
         if (verbose)
 	    octstr_dump(os, 1);
 	octstr_destroy(os);
     }
-    list_destroy(replyh, NULL);
+    gwlist_destroy(replyh, NULL);
     if (verbose) {
         debug("", 0, "Reply body:");
         octstr_dump(replyb, 1);
@@ -202,7 +202,7 @@
     caller = arg;
     succeeded = 0;
     failed = 0;
-    reqh = list_create();
+    reqh = gwlist_create();
     sprintf(buf, "%ld", (long) gwthread_self());
     http_header_add(reqh, "X-Thread", buf);
     if (auth_username != NULL && auth_password != NULL)
@@ -247,7 +247,7 @@
     long start;
     long pos;
 
-    *split = list_create();
+    *split = gwlist_create();
     start = 0;
     for (pos = 0; pos < octstr_len(headers); pos++) {
         if (octstr_get_char(headers, pos) == '\n') {
@@ -260,7 +260,7 @@
             }
             line = octstr_copy(headers, start, pos - start);
             start = pos + 1;
-            list_append(*split, line);
+            gwlist_append(*split, line);
         }
     }
 }
@@ -322,7 +322,7 @@
     
     proxy = NULL;
     proxy_port = -1;
-    exceptions = list_create();
+    exceptions = gwlist_create();
     proxy_username = NULL;
     proxy_password = NULL;
     num_threads = 1;
@@ -382,7 +382,7 @@
 	case 'e':
 	    p = strtok(optarg, ":");
 	    while (p != NULL) {
-		list_append(exceptions, octstr_create(p));
+		gwlist_append(exceptions, octstr_create(p));
 		p = strtok(NULL, ":");
 	    }
 	    break;
@@ -465,7 +465,7 @@
     octstr_destroy(proxy);
     octstr_destroy(proxy_username);
     octstr_destroy(proxy_password);
-    list_destroy(exceptions, octstr_destroy_item);
+    gwlist_destroy(exceptions, octstr_destroy_item);
     
     urls = argv + optind;
     num_urls = argc - optind;
@@ -489,7 +489,7 @@
     octstr_destroy(auth_password);
     octstr_destroy(extra_headers);
     octstr_destroy(content_file);
-    list_destroy(split, octstr_destroy_item);
+    gwlist_destroy(split, octstr_destroy_item);
     
     gwlib_shutdown();
     
diff -ur kannel-1.4.0/test/test_http_server.c kannel-1.4.0.mod/test/test_http_server.c
--- kannel-1.4.0/test/test_http_server.c	2004-07-14 12:31:25.000000000 +0200
+++ kannel-1.4.0.mod/test/test_http_server.c	2006-03-24 16:50:55.000000000 +0100
@@ -99,11 +99,11 @@
             debug("test.http", 0, "CGI vars were");
 
         /*
-         * Don't use list_extract() here, otherwise we don't have a chance
+         * Don't use gwlist_extract() here, otherwise we don't have a chance
          * to re-use the cgivars later on.
          */
-        for (i = 0; i < list_len(cgivars); i++) {
-            if ((v = list_get(cgivars, i)) != NULL && verbose) {
+        for (i = 0; i < gwlist_len(cgivars); i++) {
+            if ((v = gwlist_get(cgivars, i)) != NULL && verbose) {
                 octstr_dump(v->name, 0);
                 octstr_dump(v->value, 0);
             }
@@ -118,8 +118,8 @@
             reply_type = octstr_create("Content-Type: text/vnd.wap.wml");
         }
 
-        resph = list_create();
-        list_append(resph, reply_type);
+        resph = gwlist_create();
+        gwlist_append(resph, reply_type);
 
         status = HTTP_OK;
 
@@ -174,7 +174,7 @@
                 octstr_get_cstr(scheme),
                 octstr_get_cstr(http_header_value(headers, octstr_imm("Host"))),
                 octstr_get_cstr(uri));
-            list_append(resph, redirect_header);
+            gwlist_append(resph, redirect_header);
             status = HTTP_FOUND; /* will provide 302 */
             octstr_destroy(uri);
         } 
@@ -196,8 +196,8 @@
         octstr_destroy(body);
         octstr_destroy(reply_body);
         http_destroy_cgiargs(cgivars);
-        list_destroy(headers, octstr_destroy_item);
-        list_destroy(resph, octstr_destroy_item);
+        gwlist_destroy(headers, octstr_destroy_item);
+        gwlist_destroy(resph, octstr_destroy_item);
     }
 
     octstr_destroy(whitelist);
diff -ur kannel-1.4.0/test/test_mime.c kannel-1.4.0.mod/test/test_mime.c
--- kannel-1.4.0/test/test_mime.c	2004-08-11 18:41:29.000000000 +0200
+++ kannel-1.4.0.mod/test/test_mime.c	2006-03-24 16:50:55.000000000 +0100
@@ -240,14 +240,14 @@
     }
 
     source_parts = octstr_split(mime_content, octstr_imm("content="));
-    if (list_len(source_parts) == 1) {     /* a hack to circumvent a bug */
+    if (gwlist_len(source_parts) == 1) {     /* a hack to circumvent a bug */
         error(0, "Badly formatted source:");
         octstr_destroy(mime_content);
-        list_destroy(source_parts, octstr_destroy_item);
+        gwlist_destroy(source_parts, octstr_destroy_item);
         panic(0, "Stopping");
     }
 
-    boundary = list_extract_first(source_parts);
+    boundary = gwlist_extract_first(source_parts);
     octstr_delete(boundary, 0, octstr_len(octstr_imm("boundary=")));
     if (skip_tail(&boundary, ';') == 0) {
         error(0, "Cannot determine boundary, no delimiter; possible");
@@ -256,7 +256,7 @@
     }
     
     octstr_destroy(mime_content);
-    mime_content = list_extract_first(source_parts);
+    mime_content = gwlist_extract_first(source_parts);
     if (skip_tail(&mime_content, ';') == 0){
         error(0, "Cannot determine mime content, no delimiter");
         octstr_dump(mime_content, 0);
@@ -297,9 +297,9 @@
         }
         push_content_file = octstr_create("");
         octstr_append(push_content_file, octstr_imm("headers="));
-        while (list_len(content_headers) > 0) {
+        while (gwlist_len(content_headers) > 0) {
             octstr_append(push_content_file, 
-                          this_header = list_extract_first(content_headers));
+                          this_header = gwlist_extract_first(content_headers));
             octstr_format_append(push_content_file, "%c", ' ');
             octstr_destroy(this_header);
         }
@@ -346,7 +346,7 @@
     octstr_destroy(pap_osname);
     octstr_destroy(data_osname);
     http_destroy_headers(content_headers);
-    list_destroy(source_parts, octstr_destroy_item);
+    gwlist_destroy(source_parts, octstr_destroy_item);
     octstr_destroy(push_content_file);
     gwlib_shutdown();
 
@@ -357,14 +357,14 @@
     octstr_destroy(mime_content);
     octstr_destroy(pap_osname);
     octstr_destroy(data_osname);
-    list_destroy(source_parts, octstr_destroy_item);
+    gwlist_destroy(source_parts, octstr_destroy_item);
     octstr_destroy(boundary);
     gwlib_shutdown();
     panic(0, "Stopping");
 
 error:
     octstr_destroy(mime_content);
-    list_destroy(source_parts, octstr_destroy_item);
+    gwlist_destroy(source_parts, octstr_destroy_item);
     octstr_destroy(boundary);
     octstr_destroy(pap_content);
     octstr_destroy(push_data);
@@ -377,7 +377,7 @@
 
 cerror:
     octstr_destroy(mime_content);
-    list_destroy(source_parts, octstr_destroy_item);
+    gwlist_destroy(source_parts, octstr_destroy_item);
     octstr_destroy(boundary);
     octstr_destroy(pap_content);
     octstr_destroy(push_data);
diff -ur kannel-1.4.0/test/test_ppg.c kannel-1.4.0.mod/test/test_ppg.c
--- kannel-1.4.0/test/test_ppg.c	2004-10-13 09:38:13.000000000 +0200
+++ kannel-1.4.0.mod/test/test_ppg.c	2006-03-24 17:05:23.000000000 +0100
@@ -169,7 +169,7 @@
                                     int use_string)
 {
     if (use_string) {
-        list_append(*push_headers, appid_string);
+        gwlist_append(*push_headers, appid_string);
         return;
     }
 
@@ -579,7 +579,7 @@
     if (verbose)
         debug("test.ppg", 0, "TEST_PPG: reply headers were");
 
-    while ((os = list_extract_first(reply_headers)) != NULL) {
+    while ((os = gwlist_extract_first(reply_headers)) != NULL) {
         if (verbose)
             octstr_dump(os, 0); 
         octstr_destroy(os);
diff -ur kannel-1.4.0/test/test_smsc.c kannel-1.4.0.mod/test/test_smsc.c
--- kannel-1.4.0/test/test_smsc.c	2004-02-16 20:41:26.000000000 +0100
+++ kannel-1.4.0.mod/test/test_smsc.c	2006-03-24 16:50:55.000000000 +0100
@@ -194,37 +194,37 @@
 
 static EventQueue *eq_create(void)
 {
-    return list_create();
+    return gwlist_create();
 }
 
 
 static void eq_add_producer(EventQueue *eq)
 {
-    list_add_producer(eq);
+    gwlist_add_producer(eq);
 }
 
 
 static void eq_remove_producer(EventQueue *eq)
 {
-    list_remove_producer(eq);
+    gwlist_remove_producer(eq);
 }
 
 
 static void eq_destroy(EventQueue *eq)
 {
-    list_destroy(eq, NULL);
+    gwlist_destroy(eq, NULL);
 }
 
 
 static void eq_append(EventQueue *eq, Event *e)
 {
-    list_produce(eq, e);
+    gwlist_produce(eq, e);
 }
 
 
 static Event *eq_extract(EventQueue *eq)
 {
-    return list_consume(eq);
+    return gwlist_consume(eq);
 }
 
 
diff -ur kannel-1.4.0/test/test_xmlrpc.c kannel-1.4.0.mod/test/test_xmlrpc.c
--- kannel-1.4.0/test/test_xmlrpc.c	2004-04-19 21:08:56.000000000 +0200
+++ kannel-1.4.0.mod/test/test_xmlrpc.c	2006-03-24 16:50:55.000000000 +0100
@@ -143,7 +143,7 @@
     octstr_destroy(charset);
     if (verbose)
         debug("", 0, "Reply headers:");
-    while ((os = list_extract_first(replyh)) != NULL) {
+    while ((os = gwlist_extract_first(replyh)) != NULL) {
         if (verbose)
             octstr_dump(os, 1);
         octstr_destroy(os);
@@ -197,7 +197,7 @@
     caller = arg;
     succeeded = 0;
     failed = 0;
-    reqh = list_create();
+    reqh = gwlist_create();
 
     sprintf(buf, "%ld", (long) gwthread_self());
     http_header_add(reqh, "X-Thread", buf);
@@ -285,7 +285,7 @@
 
     proxy = NULL;
     proxy_port = -1;
-    exceptions = list_create();
+    exceptions = gwlist_create();
     proxy_username = NULL;
     proxy_password = NULL;
     num_threads = 0;
@@ -328,7 +328,7 @@
             case 'e':
                 p = strtok(optarg, ":");
                 while (p != NULL) {
-                    list_append(exceptions, octstr_create(p));
+                    gwlist_append(exceptions, octstr_create(p));
                     p = strtok(NULL, ":");
                 }
                 break;
@@ -388,7 +388,7 @@
     octstr_destroy(proxy);
     octstr_destroy(proxy_username);
     octstr_destroy(proxy_password);
-    list_destroy(exceptions, octstr_destroy_item);
+    gwlist_destroy(exceptions, octstr_destroy_item);
     
     counter = counter_create();
 
diff -ur kannel-1.4.0/test/wapproxy.c kannel-1.4.0.mod/test/wapproxy.c
--- kannel-1.4.0/test/wapproxy.c	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/test/wapproxy.c	2006-03-24 16:50:55.000000000 +0100
@@ -200,14 +200,14 @@
     */
 
     events = wtp_unpack_wdp_datagram(dgram);
-    n = list_len(events);
+    n = gwlist_len(events);
     debug("wap.proxy",0,"datagram contains %ld events", n);
 
     i = 1;
-    while (list_len(events) > 0) {
+    while (gwlist_len(events) > 0) {
         WAPEvent *event;
 
-	    event = list_extract_first(events);
+	    event = gwlist_extract_first(events);
         
         info(0, "WTP: %ld/%ld event %s.", i, n, wap_event_name(event->type));
 
@@ -236,7 +236,7 @@
     }   		
 
     wap_event_destroy(dgram);
-    list_destroy(events, NULL);
+    gwlist_destroy(events, NULL);
 }
 
 
@@ -287,8 +287,8 @@
     Udpc *conn = arg;
     Octstr *ip;
 
-    list_add_producer(incoming_wdp);
-    list_add_producer(flow_threads);
+    gwlist_add_producer(incoming_wdp);
+    gwlist_add_producer(flow_threads);
     gwthread_wakeup(MAIN_THREAD_ID);
     
     /* remove messages from socket until it is closed */
@@ -327,18 +327,18 @@
          * corresponding queues
          */
         if (octstr_compare(conn->addr, conn->map_addr) == 0) {
-            list_produce(incoming_wdp, msg);
+            gwlist_produce(incoming_wdp, msg);
             counter_increase(incoming_wdp_counter);
         } else {
-            list_produce(outgoing_wdp, msg);
+            gwlist_produce(outgoing_wdp, msg);
 	        counter_increase(outgoing_wdp_counter);
         }        
 
         octstr_destroy(cliaddr);
         octstr_destroy(ip);
     }    
-    list_remove_producer(incoming_wdp);
-    list_remove_producer(flow_threads);
+    gwlist_remove_producer(incoming_wdp);
+    gwlist_remove_producer(flow_threads);
 }
 
 
@@ -366,10 +366,10 @@
     Msg *msg;
     Udpc *conn = arg;
 
-    list_add_producer(flow_threads);    
+    gwlist_add_producer(flow_threads);    
     while (1) {
 
-        if ((msg = list_consume(conn->outgoing_list)) == NULL)
+        if ((msg = gwlist_consume(conn->outgoing_list)) == NULL)
             break;
 
         info(0, "sending datagram <%s:%ld> -> <%s:%ld>",
@@ -390,7 +390,7 @@
     gwthread_join(conn->receiver);
 
     udpc_destroy(conn);
-    list_remove_producer(flow_threads);
+    gwlist_remove_producer(flow_threads);
 }
 
 
@@ -428,7 +428,7 @@
 
     octstr_destroy(os);
     
-    udpc->outgoing_list = list_create();
+    udpc->outgoing_list = gwlist_create();
 
     return udpc;
 }    
@@ -442,8 +442,8 @@
     if (udpc->fd >= 0)
         close(udpc->fd);
     octstr_destroy(udpc->addr);
-    gw_assert(list_len(udpc->outgoing_list) == 0);
-    list_destroy(udpc->outgoing_list, NULL);
+    gw_assert(gwlist_len(udpc->outgoing_list) == 0);
+    gwlist_destroy(udpc->outgoing_list, NULL);
 
     gw_free(udpc);
 }    
@@ -455,7 +455,7 @@
     
     if ((udpc = udpc_create(port, interface_name, map_addr)) == NULL)
         goto error;
-    list_add_producer(udpc->outgoing_list);
+    gwlist_add_producer(udpc->outgoing_list);
 
     udpc->receiver = gwthread_create(udp_receiver, udpc);
     if (udpc->receiver == -1)
@@ -464,7 +464,7 @@
     if (gwthread_create(udp_sender, udpc) == -1)
         goto error;
 
-    list_append(udpc_list, udpc);
+    gwlist_append(udpc_list, udpc);
     return 0;
     
 error:    
@@ -486,12 +486,12 @@
     
     debug("wap.proxy", 0, "starting UDP sender/receiver module");
 
-    udpc_list = list_create();	/* have a list of running systems */
+    udpc_list = gwlist_create();	/* have a list of running systems */
 
     add_service(CONNECTION_ORIENTED_PORT, 
                 octstr_get_cstr(interface_name), NULL);  /* wsp/wtp */
     
-    list_add_producer(incoming_wdp);
+    gwlist_add_producer(incoming_wdp);
     udp_running = 1;
     return 0;
 }
@@ -504,9 +504,9 @@
     Octstr *addr;
     
     /* check if there is allready a bound UDP port */
-    list_lock(udpc_list);
-    for (i=0; i < list_len(udpc_list); i++) {
-        udpc = list_get(udpc_list, i);
+    gwlist_lock(udpc_list);
+    for (i=0; i < gwlist_len(udpc_list); i++) {
+        udpc = gwlist_get(udpc_list, i);
 
         /* decide if we compare against inbound or outbound traffic mapping */
         addr = inbound ? udpc->map_addr : udpc->addr;
@@ -514,11 +514,11 @@
         if (msg->wdp_datagram.source_port == udp_get_port(addr) &&
             octstr_compare(msg->wdp_datagram.source_address, 
                            udp_get_ip(addr)) == 0) {
-            list_unlock(udpc_list);
+            gwlist_unlock(udpc_list);
             return udpc;
         }
     }
-    list_unlock(udpc_list);
+    gwlist_unlock(udpc_list);
     return NULL;
 }
 
@@ -566,7 +566,7 @@
      * ok, got the destination, got the socket, 
      * now put it on the outbound queue
      */
-    list_produce(udpc->outgoing_list, msg);
+    gwlist_produce(udpc->outgoing_list, msg);
 
     octstr_destroy(os);
 
@@ -623,7 +623,7 @@
 
     octstr_destroy(os);
 
-    list_produce(udpc->outgoing_list, msg);
+    gwlist_produce(udpc->outgoing_list, msg);
     
     return -1;
 }
@@ -634,7 +634,7 @@
     if (!udp_running) return -1;
 
     debug("bb.thread", 0, "udp_shutdown: Starting avalanche");
-    list_remove_producer(incoming_wdp);
+    gwlist_remove_producer(incoming_wdp);
     return 0;
 }
 
@@ -650,10 +650,10 @@
      */
     debug("bb.udp", 0, "udp_die: removing producers from udp-lists");
 
-    while ((udpc = list_consume(udpc_list)) != NULL) {
-        list_remove_producer(udpc->outgoing_list);
+    while ((udpc = gwlist_consume(udpc_list)) != NULL) {
+        gwlist_remove_producer(udpc->outgoing_list);
     }
-    list_destroy(udpc_list, NULL);
+    gwlist_destroy(udpc_list, NULL);
     udp_running = 0;
     
     return 0;
@@ -669,11 +669,11 @@
 {
     Msg *msg;
 
-    list_add_producer(flow_threads);
+    gwlist_add_producer(flow_threads);
     
     while (1) {
 
-        if ((msg = list_consume(outgoing_wdp)) == NULL)
+        if ((msg = gwlist_consume(outgoing_wdp)) == NULL)
             break;
 
         gw_assert(msg_type(msg) == wdp_datagram);
@@ -682,7 +682,7 @@
     }
     udp_die();
 
-    list_remove_producer(flow_threads);
+    gwlist_remove_producer(flow_threads);
 }
 
 
@@ -690,11 +690,11 @@
 {
     Msg *msg;
 
-    list_add_producer(flow_threads);
+    gwlist_add_producer(flow_threads);
     
     while (1) {
 
-        if ((msg = list_consume(incoming_wdp)) == NULL)
+        if ((msg = gwlist_consume(incoming_wdp)) == NULL)
             break;
 
         gw_assert(msg_type(msg) == wdp_datagram);
@@ -703,7 +703,7 @@
     }
     udp_die();
 
-    list_remove_producer(flow_threads);
+    gwlist_remove_producer(flow_threads);
 }
 
 
@@ -787,9 +787,9 @@
     report_versions("wapproxy");
 
     /* initialize main inbound and outbound queues */
-    outgoing_wdp = list_create();
-    incoming_wdp = list_create();
-    flow_threads = list_create();
+    outgoing_wdp = gwlist_create();
+    incoming_wdp = gwlist_create();
+    flow_threads = gwlist_create();
 
     outgoing_wdp_counter = counter_create();
     incoming_wdp_counter = counter_create();
@@ -797,7 +797,7 @@
     /* start the main UDP listening threads */
     udp_start(cfg);
 
-    list_add_producer(outgoing_wdp);    
+    gwlist_add_producer(outgoing_wdp);    
     
     debug("bb", 0, "starting WDP routers");
     if (gwthread_create(service_router, NULL) == -1)
@@ -807,16 +807,16 @@
 
     gwthread_sleep(5.0); /* give time to threads to register themselves */
 
-    while (list_consume(flow_threads) != NULL)
+    while (gwlist_consume(flow_threads) != NULL)
 	;
 
     udp_shutdown();
 
-    list_remove_producer(outgoing_wdp);
+    gwlist_remove_producer(outgoing_wdp);
 
-    list_destroy(flow_threads, NULL);
-    list_destroy(incoming_wdp, NULL);
-    list_destroy(outgoing_wdp, NULL);
+    gwlist_destroy(flow_threads, NULL);
+    gwlist_destroy(incoming_wdp, NULL);
+    gwlist_destroy(outgoing_wdp, NULL);
 
     counter_destroy(incoming_wdp_counter);
     counter_destroy(outgoing_wdp_counter);
diff -ur kannel-1.4.0/utils/mtbatch.c kannel-1.4.0.mod/utils/mtbatch.c
--- kannel-1.4.0/utils/mtbatch.c	2004-08-28 20:09:19.000000000 +0200
+++ kannel-1.4.0.mod/utils/mtbatch.c	2006-03-24 16:50:55.000000000 +0100
@@ -207,12 +207,12 @@
     }
     
     list = sms_split(msg, NULL, NULL, NULL, NULL, 1, 0, 100, sms_max_length);
-    msg_count = list_len(list);
+    msg_count = gwlist_len(list);
 
     debug("sms", 0, "message length %ld, sending %ld messages", 
           octstr_len(msg->sms.msgdata), msg_count);
 
-    while ((part = list_extract_first(list)) != NULL) {
+    while ((part = gwlist_extract_first(list)) != NULL) {
 
         if (delay > 0)
             gwthread_sleep(delay);
@@ -222,7 +222,7 @@
             return -1;
         
     }    
-    list_destroy(list, NULL);
+    gwlist_destroy(list, NULL);
     
     return msg_count;
 }
@@ -273,7 +273,7 @@
               octstr_get_cstr(rfilename)); 
 
     lines = octstr_split(receivers, octstr_imm("\n")); 
-    lineno = list_len(lines);
+    lineno = gwlist_len(lines);
     if (lineno <= 0) 
         panic(0,"Receiver file seems empty!");
 
@@ -286,7 +286,7 @@
     Octstr *no;
     unsigned long lineno = 0;
 
-    while ((no = list_consume(lines)) != NULL) {
+    while ((no = gwlist_consume(lines)) != NULL) {
     	if (octstr_check_range(no, 0, 256, gw_isdigit)) {
         Msg *msg;
         
@@ -398,7 +398,7 @@
     octstr_destroy(service);
     octstr_destroy(account);
     octstr_destroy(smsc_id);
-    list_destroy(lines, octstr_destroy_item); 
+    gwlist_destroy(lines, octstr_destroy_item); 
    
     gwlib_shutdown();
 
diff -ur kannel-1.4.0/wap/cookies.c kannel-1.4.0.mod/wap/cookies.c
--- kannel-1.4.0/wap/cookies.c	2004-03-11 19:02:39.000000000 +0100
+++ kannel-1.4.0.mod/wap/cookies.c	2006-03-24 16:50:55.000000000 +0100
@@ -104,7 +104,7 @@
 	if (cookies == NULL)
 		return;
 
-	list_destroy(cookies, cookie_destroy);
+	gwlist_destroy(cookies, cookie_destroy);
 }
 
 
@@ -126,8 +126,8 @@
 		return 0;
 	}
 
-	for (pos = 0; pos < list_len(headers); pos++) {
-		header = list_get(headers, pos);
+	for (pos = 0; pos < gwlist_len(headers); pos++) {
+		header = gwlist_get(headers, pos);
 		/* debug ("wap.wsp.http", 0, "get_cookies: Examining header (%s)", octstr_get_cstr (header)); */
 		if (strncasecmp ("set-cookie", octstr_get_cstr (header),10) == 0) {		
 			debug ("wap.wsp.http", 0, "Caching cookie (%s)", octstr_get_cstr (header));
@@ -171,17 +171,17 @@
 	}
 
 	if (sm->cookies == NULL)
-		sm->cookies = list_create();
+		sm->cookies = gwlist_create();
 
 	/* Expire cookies that have timed out */
 	expire_cookies(sm->cookies);
 
 	/* Walk through the cookie cache, adding the cookie to the request headers */
-	if (list_len(sm->cookies) > 0) {
+	if (gwlist_len(sm->cookies) > 0) {
 		debug("wap.wsp.http", 0, "set_cookies: Cookies in cache");
 
-		for (pos = 0; pos < list_len(sm->cookies); pos++) {
-			value = list_get(sm->cookies, pos);
+		for (pos = 0; pos < gwlist_len(sm->cookies); pos++) {
+			value = gwlist_get(sm->cookies, pos);
 
 			cookie = octstr_create("Cookie: ");
 			if (value->version) 
@@ -199,7 +199,7 @@
 				octstr_append(cookie, value->domain);
 			}
 
-			list_append(headers, cookie);
+			gwlist_append(headers, cookie);
 			debug("wap.wsp.http", 0, "set_cookies: Added (%s)", octstr_get_cstr (cookie));
 		}
 	} else
@@ -350,7 +350,7 @@
 	gw_assert(sm -> cookies != NULL);
 	gw_assert(value != NULL);
 
-	list_append(sm -> cookies, value);
+	gwlist_append(sm -> cookies, value);
 
 	return;
 }
@@ -372,8 +372,8 @@
     }
 
     /* Walk through the cookie cache, comparing cookie */
-	while (pos < list_len(cookies)) {
-        value = list_get(cookies, pos);
+	while (pos < gwlist_len(cookies)) {
+        value = gwlist_get(cookies, pos);
 
         /* octstr_compare() now only returns 0 on an exact match or if both args are 0 */
         debug ("wap.wsp.http", 0, "have_cookie: Comparing name (%s:%s), path (%s:%s), domain (%s:%s)",
@@ -393,7 +393,7 @@
 			
             /* We have a match according to 4.3.3 - discard the old one */
             cookie_destroy(value);
-            list_delete(cookies, pos, 1);
+            gwlist_delete(cookies, pos, 1);
 
             /* Discard the new cookie also if max-age is 0 - set if expiry date is up */
             if (cookie->max_age == 0) {
@@ -434,10 +434,10 @@
 
 	time(&now);
 
-	if (list_len(cookies) > 0) {
+	if (gwlist_len(cookies) > 0) {
 		debug("wap.wsp.http", 0, "expire_cookies: Cookies in cache");
-		for (pos = 0; pos < list_len(cookies); pos++) {
-			value = list_get(cookies, pos);
+		for (pos = 0; pos < gwlist_len(cookies); pos++) {
+			value = gwlist_get(cookies, pos);
 			gw_assert(value != NULL);
 
 			if (value->max_age != -1) {		/* Interesting value */
@@ -445,7 +445,7 @@
 					debug("wap.wsp.http", 0, "expire_cookies: Expired cookie (%s)",
 						  octstr_get_cstr(value->name));
 					cookie_destroy(value);
-					list_delete(cookies, pos, 1);
+					gwlist_delete(cookies, pos, 1);
 				}
 			}
 		}
diff -ur kannel-1.4.0/wap/timers.c kannel-1.4.0.mod/wap/timers.c
--- kannel-1.4.0/wap/timers.c	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/wap/timers.c	2006-03-24 16:50:55.000000000 +0100
@@ -233,7 +233,7 @@
     t->elapsed_event = NULL;
     t->index = -1;
     t->output = outputlist;
-    list_add_producer(outputlist);
+    gwlist_add_producer(outputlist);
 
     return t;
 }
@@ -246,7 +246,7 @@
         return;
 
     gwtimer_stop(timer);
-    list_remove_producer(timer->output);
+    gwlist_remove_producer(timer->output);
     wap_event_destroy(timer->event);
     gw_free(timer);
 }
@@ -342,7 +342,7 @@
     if (timer->elapsed_event == NULL)
         return;
 
-    count = list_delete_equal(timer->output, timer->elapsed_event);
+    count = gwlist_delete_equal(timer->output, timer->elapsed_event);
     if (count > 0) {
         debug("timers", 0, "Aborting %s timer.",
               wap_event_name(timer->elapsed_event->type));
@@ -522,7 +522,7 @@
     debug("timers", 0, "%s elapsed.", wap_event_name(timer->event->type));
 
     timer->elapsed_event = wap_event_duplicate(timer->event);
-    list_produce(timer->output, timer->elapsed_event);
+    gwlist_produce(timer->output, timer->elapsed_event);
     timer->elapses = -1;
 }
 
diff -ur kannel-1.4.0/wap/wap.c kannel-1.4.0.mod/wap/wap.c
--- kannel-1.4.0/wap/wap.c	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/wap/wap.c	2006-03-24 16:50:55.000000000 +0100
@@ -90,10 +90,10 @@
             return;
         }
 
-        while (list_len(events) > 0) {
+        while (gwlist_len(events) > 0) {
 	    WAPEvent *event;
 
-	    event = list_extract_first(events);
+	    event = gwlist_extract_first(events);
             if (wtp_event_is_for_responder(event))
                 wtp_resp_dispatch_event(event);
             else
@@ -101,6 +101,6 @@
         }
 
         wap_event_destroy(dgram);
-        list_destroy(events, NULL);
+        gwlist_destroy(events, NULL);
     }
 }
diff -ur kannel-1.4.0/wap/wsp_caps.c kannel-1.4.0.mod/wap/wsp_caps.c
--- kannel-1.4.0/wap/wsp_caps.c	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/wap/wsp_caps.c	2006-03-24 16:50:55.000000000 +0100
@@ -111,15 +111,15 @@
 		return;
 	}
 	debug("wsp", 0, "Dumping capability list at %p, length %ld",
-		caps_list, list_len(caps_list));
-	for (i = 0; i < list_len(caps_list); i++) {
-		wsp_cap_dump(list_get(caps_list, i));
+		caps_list, gwlist_len(caps_list));
+	for (i = 0; i < gwlist_len(caps_list); i++) {
+		wsp_cap_dump(gwlist_get(caps_list, i));
 	}
 	debug("wsp", 0, "End of capability list dump");
 }
 
 void wsp_cap_destroy_list(List *caps_list) {
-	list_destroy(caps_list, wsp_cap_destroy_item);
+	gwlist_destroy(caps_list, wsp_cap_destroy_item);
 }
 
 List *wsp_cap_duplicate_list(List *caps_list) {
@@ -127,14 +127,14 @@
 	List *new_list;
 	long i;
 
-	new_list = list_create();
+	new_list = gwlist_create();
 
 	if (caps_list == NULL)
 		return new_list;
 
-	for (i = 0; i < list_len(caps_list); i++) {
-		cap = list_get(caps_list, i);
-		list_append(new_list, wsp_cap_duplicate(cap));
+	for (i = 0; i < gwlist_len(caps_list); i++) {
+		cap = gwlist_get(caps_list, i);
+		gwlist_append(new_list, wsp_cap_duplicate(cap));
 	}
 	return new_list;
 };
@@ -156,7 +156,7 @@
 	List *caps_list;
 	long pos, capslen;
 
-	caps_list = list_create();
+	caps_list = gwlist_create();
 	if (caps == NULL)
 		return caps_list;
 
@@ -187,7 +187,7 @@
 			data = octstr_copy(caps, nullpos + 1,
 				length - (nullpos + 1 - pos));
 		}
-		list_append(caps_list, wsp_cap_create(id, name, data));
+		gwlist_append(caps_list, wsp_cap_create(id, name, data));
 		pos += length;
 	}
 
@@ -204,11 +204,11 @@
 	long i, len;
 
 	result = octstr_create("");
-	len = list_len(caps_list);
+	len = gwlist_len(caps_list);
 	for (i = 0; i < len; i++) {
 		long datalen;
 
-		cap = list_get(caps_list, i);
+		cap = gwlist_get(caps_list, i);
 
 		datalen = 0;
 		if (cap->data)
@@ -256,11 +256,11 @@
 	Capability *cap;
 	int found;
 
-	len = list_len(caps_list);
+	len = gwlist_len(caps_list);
 	found = 0;
 	*data = NULL;
 	for (i = 0; i < len; i++) {
-		cap = list_get(caps_list, i);
+		cap = gwlist_get(caps_list, i);
 		if ((name && cap->name 
 		     && octstr_compare(name, cap->name) == 0)
 		    || (!name && cap->id == id)) {
diff -ur kannel-1.4.0/wap/wsp_headers.c kannel-1.4.0.mod/wap/wsp_headers.c
--- kannel-1.4.0/wap/wsp_headers.c	2004-08-08 22:39:56.000000000 +0200
+++ kannel-1.4.0.mod/wap/wsp_headers.c	2006-03-24 17:05:23.000000000 +0100
@@ -1382,12 +1382,12 @@
         }
     }
 
-    if (list_len(unpacked) > 0) {
+    if (gwlist_len(unpacked) > 0) {
         long i;
 
         debug("wsp", 0, "WSP: decoded headers:");
-        for (i = 0; i < list_len(unpacked); i++) {
-            Octstr *header = list_get(unpacked, i);
+        for (i = 0; i < gwlist_len(unpacked); i++) {
+            Octstr *header = gwlist_get(unpacked, i);
             debug("wsp", 0, "%s", octstr_get_cstr(header));
         }
         debug("wsp", 0, "WSP: End of decoded headers.");
@@ -1572,7 +1572,7 @@
     if (pos >= len)
         return NULL;   /* no parameters */
 
-    parms = list_create();
+    parms = gwlist_create();
     firstparm = pos;
 
     for (pos++; pos > 0 && pos < len; pos++) {
@@ -1604,7 +1604,7 @@
             pos = octstr_search_char(value, ';', pos);
         }
 
-        list_append(parms, parm_create(key, val));
+        gwlist_append(parms, parm_create(key, val));
     }
 
     octstr_delete(value, firstparm, octstr_len(value) - firstparm);
@@ -1719,8 +1719,8 @@
     Parameter *parm;
     int qvalue;
 
-    for (i = 0; i < list_len(parms); i++) {
-        parm = list_get(parms, i);
+    for (i = 0; i < gwlist_len(parms); i++) {
+        parm = gwlist_get(parms, i);
         if (octstr_str_compare(parm->key, "q") == 0 ||
             octstr_str_compare(parm->key, "Q") == 0) {
             qvalue = parse_qvalue(parm->value);
@@ -1960,8 +1960,8 @@
     long i;
     Parameter *parm;
 
-    for (i = 0; i < list_len(parms); i++) {
-        parm = list_get(parms, i);
+    for (i = 0; i < gwlist_len(parms); i++) {
+        parm = gwlist_get(parms, i);
         pack_parameter(packed, parm);
     }
 }
@@ -2037,11 +2037,11 @@
 
         /* Find the realm parameter and exclude it */
         parms = wsp_strip_parameters(value);
-        for (i = 0; i < list_len(parms); i++) {
-            Parameter *parm = list_get(parms, i);
+        for (i = 0; i < gwlist_len(parms); i++) {
+            Parameter *parm = gwlist_get(parms, i);
             if (octstr_case_compare(realm, parm->key) == 0) {
                 realmparm = parm;
-                list_delete(parms, i, 1);
+                gwlist_delete(parms, i, 1);
                 break;
             }
         }
@@ -2081,7 +2081,7 @@
     octstr_destroy(scheme);
     octstr_destroy(parmstring);
     parm_destroy(realmparm);
-    list_destroy(parms, parm_destroy_item);
+    gwlist_destroy(parms, parm_destroy_item);
     octstr_destroy(realmval);
     return 0;
 
@@ -2091,7 +2091,7 @@
     octstr_destroy(scheme);
     octstr_destroy(parmstring);
     parm_destroy(realmparm);
-    list_destroy(parms, parm_destroy_item);
+    gwlist_destroy(parms, parm_destroy_item);
     octstr_destroy(realmval);
     return -1;
 }
@@ -2153,7 +2153,7 @@
         wsp_pack_text(encoding, scheme);
         parms = wsp_strip_parameters(value);
         wsp_pack_parameters(encoding, parms);
-        list_destroy(parms, parm_destroy_item);
+        gwlist_destroy(parms, parm_destroy_item);
     }
 
     wsp_pack_value(packed, encoding);
@@ -2329,7 +2329,7 @@
         octstr_destroy(encoding);
     }
 
-    list_destroy(parms, parm_destroy_item);
+    gwlist_destroy(parms, parm_destroy_item);
     return 0;
 }
 
@@ -2344,7 +2344,7 @@
     qvalue = 1000;
     if (parms)
         qvalue = get_qvalue(parms, qvalue);
-    list_destroy(parms, parm_destroy_item);
+    gwlist_destroy(parms, parm_destroy_item);
 
     /* See if we can fit this in a Constrained-charset encoding */
     if (qvalue == 1000 && charset <= MAX_SHORT_INTEGER) {
@@ -2381,7 +2381,7 @@
     parms = wsp_strip_parameters(value);
     if (parms)
         qvalue = get_qvalue(parms, qvalue);
-    list_destroy(parms, parm_destroy_item);
+    gwlist_destroy(parms, parm_destroy_item);
 
     if (qvalue > 0) {
         if (qvalue < 1000)
@@ -2406,7 +2406,7 @@
     qvalue = 1000;
     if (parms)
         qvalue = get_qvalue(parms, qvalue);
-    list_destroy(parms, parm_destroy_item);
+    gwlist_destroy(parms, parm_destroy_item);
 
     /* See if we can fit this in a Constrained-language encoding. */
     /* Note that our language table already includes Any-language */
@@ -2470,11 +2470,11 @@
                 if (octstr_get_char(parm->value, octstr_len(parm->value) - 1) == '"')
                     octstr_delete(parm->value, octstr_len(parm->value) - 1, 1);
                 names = http_header_split_value(parm->value);
-                while ((element = list_consume(names))) {
+                while ((element = gwlist_consume(names))) {
                     pack_field_name(value_encoding, element);
                     octstr_destroy(element);
                 }
-                list_destroy(names, octstr_destroy_item);
+                gwlist_destroy(names, octstr_destroy_item);
                 done = 1;
                 break;
 
@@ -2525,11 +2525,11 @@
         goto error;
     }
 
-    list_destroy(parms, parm_destroy_item);
+    gwlist_destroy(parms, parm_destroy_item);
     return 0;
 
 error:
-    list_destroy(parms, parm_destroy_item);
+    gwlist_destroy(parms, parm_destroy_item);
     return -1;
 }
 
@@ -2852,7 +2852,7 @@
     long startpos;
     Octstr *element;
 
-    while ((element = list_consume(elements))) {
+    while ((element = gwlist_consume(elements))) {
         startpos = octstr_len(packed);
 
         wsp_pack_short_integer(packed, fieldnum);
@@ -2904,13 +2904,13 @@
             goto error;
     }
 
-    list_destroy(elements, octstr_destroy_item);
+    gwlist_destroy(elements, octstr_destroy_item);
     return 0;
 
 error:
     /* Remove whatever we added */
     octstr_delete(packed, startpos, octstr_len(packed) - startpos);
-    list_destroy(elements, octstr_destroy_item);
+    gwlist_destroy(elements, octstr_destroy_item);
     return -1;
 }
 
@@ -2949,7 +2949,7 @@
     if (separate_content_type)
         wsp_pack_separate_content_type(packed, headers);
 
-    len = list_len(headers);
+    len = gwlist_len(headers);
     for (i = 0; i < len; i++) {
         Octstr *fieldname;
         Octstr *value;
diff -ur kannel-1.4.0/wap/wsp_push_client.c kannel-1.4.0.mod/wap/wsp_push_client.c
--- kannel-1.4.0/wap/wsp_push_client.c	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/wap/wsp_push_client.c	2006-03-24 16:50:55.000000000 +0100
@@ -145,11 +145,11 @@
 void wsp_push_client_init(wap_dispatch_func_t *dispatch_self, 
                           wap_dispatch_func_t *dispatch_wtp_resp)
 {
-    push_client_machines = list_create();
+    push_client_machines = gwlist_create();
     push_client_machine_id_counter = counter_create();
 
-    push_client_queue = list_create();
-    list_add_producer(push_client_queue);
+    push_client_queue = gwlist_create();
+    gwlist_add_producer(push_client_queue);
 
     dispatch_to_self = dispatch_self;
     dispatch_to_wtp_resp = dispatch_wtp_resp;
@@ -163,20 +163,20 @@
 {
     gw_assert(push_client_run_status == running);
     push_client_run_status = terminating;
-    list_remove_producer(push_client_queue);
+    gwlist_remove_producer(push_client_queue);
     gwthread_join_every(main_thread);
 
     debug("wap.wsp", 0, "wsp_push_client_shutdown: %ld push client machines"
-          "left", list_len(push_client_machines));
-    list_destroy(push_client_machines, push_client_machine_destroy);
-    list_destroy(push_client_queue, wap_event_destroy_item);
+          "left", gwlist_len(push_client_machines));
+    gwlist_destroy(push_client_machines, push_client_machine_destroy);
+    gwlist_destroy(push_client_queue, wap_event_destroy_item);
 
     counter_destroy(push_client_machine_id_counter);
 }
 
 void wsp_push_client_dispatch_event(WAPEvent *e)
 {
-    list_produce(push_client_queue, e);
+    gwlist_produce(push_client_queue, e);
 }
 
 /***************************************************************************
@@ -191,7 +191,7 @@
     WAPEvent *e;
 
     while (push_client_run_status == running &&
-            (e = list_consume(push_client_queue)) != NULL) {
+            (e = gwlist_consume(push_client_queue)) != NULL) {
          cpm = push_client_machine_find_or_create(e);
          if (cpm == NULL)
 	     wap_event_destroy(e);
@@ -289,7 +289,7 @@
 {
     WSPPushClientMachine *m;
   
-    m = list_search(push_client_machines, &transid, 
+    m = gwlist_search(push_client_machines, &transid, 
                     push_client_machine_has_transid);
     return m;
 }
@@ -391,7 +391,7 @@
     m->transaction_id = transid;
     m->client_push_id = counter_increase(push_client_machine_id_counter);
 
-    list_append(push_client_machines, m);
+    gwlist_append(push_client_machines, m);
 
     return m;
 }
@@ -402,7 +402,7 @@
 
     m = a;
     debug("wap.wsp", 0, "Destroying WSPPushClientMachine %p", (void *) m);
-    list_delete_equal(push_client_machines, m); 
+    gwlist_delete_equal(push_client_machines, m); 
 
     #define INTEGER(name) m->name = 0;
     #define HTTPHEADERS(name) http_destroy_headers(m->name);  
diff -ur kannel-1.4.0/wap/wsp_push_client_states.def kannel-1.4.0.mod/wap/wsp_push_client_states.def
--- kannel-1.4.0/wap/wsp_push_client_states.def	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/wap/wsp_push_client_states.def	2006-03-24 16:50:55.000000000 +0100
@@ -135,7 +135,7 @@
 
      wsp_event = wap_event_create(Disconnect_Event);
      wsp_event->u.Disconnect_Event.session_handle = cpm->client_push_id;
-     list_append(push_client_queue, wsp_event);
+     gwlist_append(push_client_queue, wsp_event);
     },
     PUSH_CLIENT_NULL_STATE)
 
@@ -147,7 +147,7 @@
 
      wsp_event = wap_event_create(Suspend_Event);
      wsp_event->u.Suspend_Event.session_handle = cpm->client_push_id;
-     list_append(push_client_queue, wsp_event);
+     gwlist_append(push_client_queue, wsp_event);
     },
     PUSH_CLIENT_NULL_STATE)
 
diff -ur kannel-1.4.0/wap/wsp_server_method_states.def kannel-1.4.0.mod/wap/wsp_server_method_states.def
--- kannel-1.4.0/wap/wsp_server_method_states.def	2004-03-11 18:49:20.000000000 +0100
+++ kannel-1.4.0.mod/wap/wsp_server_method_states.def	2006-03-24 16:50:55.000000000 +0100
@@ -196,7 +196,7 @@
 		 * the queue because the state machine definitions expect
 		 * an event to be handled completely before the next is
 		 * started. */
-		list_insert(queue, 0, wsp_event);
+		gwlist_insert(queue, 0, wsp_event);
 	},
 	HOLDING)
 
@@ -210,7 +210,7 @@
 		wsp_event = wap_event_create(Suspend_Event);
 		wsp_event->u.Suspend_Event.session_handle = msm->session_id;
 		/* See story for Disconnect, above */
-		list_insert(queue, 0, wsp_event);
+		gwlist_insert(queue, 0, wsp_event);
 	},
 	HOLDING)
 
@@ -263,7 +263,7 @@
 		/* Disconnect the session */
 		wsp_event = wap_event_create(Disconnect_Event);
 		wsp_event->u.Disconnect_Event.session_handle = msm->session_id;
-		list_insert(queue, 0, wsp_event);
+		gwlist_insert(queue, 0, wsp_event);
 	},
 	REQUESTING)
 
@@ -276,7 +276,7 @@
 		/* Suspend the session */
 		wsp_event = wap_event_create(Suspend_Event);
 		wsp_event->u.Suspend_Event.session_handle = msm->session_id;
-		list_insert(queue, 0, wsp_event);
+		gwlist_insert(queue, 0, wsp_event);
 	},
 	REQUESTING)
 
@@ -343,7 +343,7 @@
 		/* Disconnect the session */
 		wsp_event = wap_event_create(Disconnect_Event);
 		wsp_event->u.Disconnect_Event.session_handle = msm->session_id;
-		list_insert(queue, 0, wsp_event);
+		gwlist_insert(queue, 0, wsp_event);
 	},
 	PROCESSING)
 
@@ -356,7 +356,7 @@
 		/* Suspend the session */
 		wsp_event = wap_event_create(Suspend_Event);
 		wsp_event->u.Suspend_Event.session_handle = msm->session_id;
-		list_insert(queue, 0, wsp_event);
+		gwlist_insert(queue, 0, wsp_event);
 	},
 	PROCESSING)
 
@@ -418,7 +418,7 @@
 		/* Disconnect the session */
 		wsp_event = wap_event_create(Disconnect_Event);
 		wsp_event->u.Disconnect_Event.session_handle = msm->session_id;
-		list_insert(queue, 0, wsp_event);
+		gwlist_insert(queue, 0, wsp_event);
 	},
 	REPLYING)
 
@@ -431,7 +431,7 @@
 		/* Suspend the session */
 		wsp_event = wap_event_create(Suspend_Event);
 		wsp_event->u.Suspend_Event.session_handle = msm->session_id;
-		list_insert(queue, 0, wsp_event);
+		gwlist_insert(queue, 0, wsp_event);
 	},
 	REPLYING)
 
diff -ur kannel-1.4.0/wap/wsp_server_push_states.def kannel-1.4.0.mod/wap/wsp_server_push_states.def
--- kannel-1.4.0/wap/wsp_server_push_states.def	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/wap/wsp_server_push_states.def	2006-03-24 16:50:55.000000000 +0100
@@ -104,7 +104,7 @@
      
      wsp_event = wap_event_create(Disconnect_Event);
      wsp_event->u.Disconnect_Event.session_handle = pm->server_push_id;
-     list_append(queue, wsp_event);
+     gwlist_append(queue, wsp_event);
     },
     SERVER_PUSH_NULL_STATE)
 
@@ -116,7 +116,7 @@
 
      wsp_event = wap_event_create(Suspend_Event);
      wsp_event->u.Suspend_Event.session_handle = pm->server_push_id;
-     list_append(queue, wsp_event);
+     gwlist_append(queue, wsp_event);
     },
     SERVER_PUSH_NULL_STATE)
 
diff -ur kannel-1.4.0/wap/wsp_server_session_states.def kannel-1.4.0.mod/wap/wsp_server_session_states.def
--- kannel-1.4.0/wap/wsp_server_session_states.def	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/wap/wsp_server_session_states.def	2006-03-24 16:50:55.000000000 +0100
@@ -101,7 +101,7 @@
 				sm->client_SDU_size = sdu;
 			}
 		} else {
-			sm->request_caps = list_create();
+			sm->request_caps = gwlist_create();
 		}
 
 		if (pdu->u.Connect.headers_len > 0) {
diff -ur kannel-1.4.0/wap/wsp_session.c kannel-1.4.0.mod/wap/wsp_session.c
--- kannel-1.4.0/wap/wsp_session.c	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/wap/wsp_session.c	2006-03-24 16:50:55.000000000 +0100
@@ -194,9 +194,9 @@
                       wap_dispatch_func_t *initiator_dispatch,
                       wap_dispatch_func_t *application_dispatch,
                       wap_dispatch_func_t *push_ota_dispatch) {
-	queue = list_create();
-	list_add_producer(queue);
-	session_machines = list_create();
+	queue = gwlist_create();
+	gwlist_add_producer(queue);
+	session_machines = gwlist_create();
 	session_id_counter = counter_create();
 	dispatch_to_wtp_resp = responder_dispatch;
 	dispatch_to_wtp_init = initiator_dispatch;
@@ -211,14 +211,14 @@
 void wsp_session_shutdown(void) {
 	gw_assert(run_status == running);
 	run_status = terminating;
-	list_remove_producer(queue);
+	gwlist_remove_producer(queue);
 	gwthread_join_every(main_thread);
 
-	list_destroy(queue, wap_event_destroy_item);
+	gwlist_destroy(queue, wap_event_destroy_item);
 
 	debug("wap.wsp", 0, "WSP: %ld session machines left.",
-		list_len(session_machines));
-	list_destroy(session_machines, machine_destroy);
+		gwlist_len(session_machines));
+	gwlist_destroy(session_machines, machine_destroy);
 
 	counter_destroy(session_id_counter);
         wsp_strings_shutdown();
@@ -227,7 +227,7 @@
 
 void wsp_session_dispatch_event(WAPEvent *event) {
 	wap_event_assert(event);
-	list_produce(queue, event);
+	gwlist_produce(queue, event);
 }
 
 
@@ -241,7 +241,7 @@
 	WSPMachine *sm;
 	WSP_PDU *pdu;
 	
-	while (run_status == running && (e = list_consume(queue)) != NULL) {
+	while (run_status == running && (e = gwlist_consume(queue)) != NULL) {
 		wap_event_assert(e);
 		switch (e->type) {
 		case TR_Invoke_Ind:
@@ -361,7 +361,7 @@
 		/* Pass to session identified by session id, not
 		 * the address tuple. */
 		session_id = pdu->u.Resume.sessionid;
-		sm = list_search(session_machines, &session_id,
+		sm = gwlist_search(session_machines, &session_id,
 				find_by_session_id);
 		if (sm == NULL) {
 			/* No session; TR-Abort.req(DISCONNECT) */
@@ -373,7 +373,7 @@
 	 * TR-Invoke.ind here by ignoring them; this seems to be
 	 * an omission in the spec table. */
 	} else if (event->type == TR_Invoke_Ind) {
-		sm = list_search(session_machines, tuple,
+		sm = gwlist_search(session_machines, tuple,
 				 transaction_belongs_to_session);
 		if (sm == NULL && (event->u.TR_Invoke_Ind.tcl == 1 ||
 				event->u.TR_Invoke_Ind.tcl == 2)) {
@@ -384,10 +384,10 @@
 	 * do those later, after we've tried to handle them. */
 	} else {
 		if (session_id != -1) {
-			sm = list_search(session_machines, &session_id,
+			sm = gwlist_search(session_machines, &session_id,
 				find_by_session_id);
 		} else {
-			sm = list_search(session_machines, tuple,
+			sm = gwlist_search(session_machines, tuple,
 				transaction_belongs_to_session);
 		}
 		/* The table doesn't really say what we should do with
@@ -490,7 +490,7 @@
 	#define OCTSTR(name) p->name = NULL;
 	#define HTTPHEADERS(name) p->name = NULL;
 	#define ADDRTUPLE(name) p->name = NULL;
-	#define MACHINESLIST(name) p->name = list_create();
+	#define MACHINESLIST(name) p->name = gwlist_create();
 	#define CAPABILITIES(name) p->name = NULL;
 	#define COOKIES(name) p->name = NULL;
 	#define REFERER(name) p->name = NULL;
@@ -508,28 +508,28 @@
 	 * to get events than old machines are, so this speeds up the linear
 	 * search, and 2) we want the newest machine to get any method
 	 * invokes that come through before the Connect is established. */
-	list_insert(session_machines, 0, p);
+	gwlist_insert(session_machines, 0, p);
 
 	return p;
 }
 
 
 static void destroy_methodmachines(List *machines) {
-	if (list_len(machines) > 0) {
+	if (gwlist_len(machines) > 0) {
 		warning(0, "Destroying WSP session with %ld active methods\n",
-			list_len(machines));
+			gwlist_len(machines));
 	}
 
-	list_destroy(machines, method_machine_destroy);
+	gwlist_destroy(machines, method_machine_destroy);
 }
 
 static void destroy_pushmachines(List *machines) {
-	if (list_len(machines) > 0) {
+	if (gwlist_len(machines) > 0) {
 		warning(0, "Destroying WSP session with %ld active pushes\n",
-			list_len(machines));
+			gwlist_len(machines));
 	}
 
-	list_destroy(machines, push_machine_destroy);
+	gwlist_destroy(machines, push_machine_destroy);
 }
 
 static void machine_destroy(void *pp) {
@@ -537,7 +537,7 @@
 	
 	p = pp;
 	debug("wap.wsp", 0, "Destroying WSPMachine %p", pp);
-	list_delete_equal(session_machines, p);
+	gwlist_delete_equal(session_machines, p);
 
 	#define INTEGER(name) p->name = 0;
 	#define OCTSTR(name) octstr_destroy(p->name);
@@ -598,7 +598,7 @@
 end:
 	if (msm->state == NULL_METHOD) {
 		method_machine_destroy(msm);
-		list_delete_equal(sm->methodmachines, msm);
+		gwlist_delete_equal(sm->methodmachines, msm);
 	}
 }
 
@@ -620,7 +620,7 @@
 	msm->addr_tuple = wap_addr_tuple_duplicate(sm->addr_tuple);
 	msm->session_id = sm->session_id;
 
-	list_append(sm->methodmachines, msm);
+	gwlist_append(sm->methodmachines, msm);
 
 	return msm;
 }
@@ -680,7 +680,7 @@
 end:
         if (pm->state == SERVER_PUSH_NULL_STATE) {
 		push_machine_destroy(pm);
-		list_delete_equal(sm->pushmachines, pm);
+		gwlist_delete_equal(sm->pushmachines, pm);
 	}
 }
 
@@ -703,7 +703,7 @@
 	m->addr_tuple = wap_addr_tuple_duplicate(sm->addr_tuple);
 	m->session_id = sm->session_id;
 
-	list_append(sm->pushmachines, m);
+	gwlist_append(sm->pushmachines, m);
 
 	return m;      
 }
@@ -756,8 +756,8 @@
 	Capability *cap;
 	unsigned long ui;
 
-	for (i = 0; i < list_len(caps); i++) {
-		cap = list_get(caps, i);
+	for (i = 0; i < gwlist_len(caps); i++) {
+		cap = gwlist_get(caps, i);
 
 		/* We only know numbered capabilities.  Let the application
 		 * layer negotiate whatever it wants for unknown ones. */
@@ -816,7 +816,7 @@
 	bad_cap:
 		error(0, "WSP: Found illegal value in capabilities reply.");
 		wsp_cap_dump(cap);
-		list_delete(caps, i, 1);
+		gwlist_delete(caps, i, 1);
 		i--;
 		wsp_cap_destroy(cap);
 		continue;
@@ -841,7 +841,7 @@
 		octstr_append_uintvar(data, m->client_SDU_size);
 		cap = wsp_cap_create(WSP_CAPS_CLIENT_SDU_SIZE,
 			NULL, data);
-		list_append(caps, cap);
+		gwlist_append(caps, cap);
 	}
 
 	if (wsp_cap_count(caps, WSP_CAPS_SERVER_SDU_SIZE, NULL) == 0) {
@@ -854,7 +854,7 @@
 		data = octstr_create("");
 		octstr_append_uintvar(data, ui);
 		cap = wsp_cap_create(WSP_CAPS_SERVER_SDU_SIZE, NULL, data);
-		list_append(caps, cap);
+		gwlist_append(caps, cap);
 	}
 
 	/* Currently we cannot handle any protocol options */
@@ -862,7 +862,7 @@
 		data = octstr_create("");
 		octstr_append_char(data, 0);
 		cap = wsp_cap_create(WSP_CAPS_PROTOCOL_OPTIONS, NULL, data);
-		list_append(caps, cap);
+		gwlist_append(caps, cap);
 	}
 
 	/* Accept any Method-MOR the client sent; if it sent none,
@@ -874,7 +874,7 @@
 		data = octstr_create("");
 		octstr_append_char(data, ui);
 		cap = wsp_cap_create(WSP_CAPS_METHOD_MOR, NULL, data);
-		list_append(caps, cap);
+		gwlist_append(caps, cap);
 	}
 
 	/* We will never send any Push requests because we don't support
@@ -887,7 +887,7 @@
 		data = octstr_create("");
 		octstr_append_char(data, m->MOR_push);
 		cap = wsp_cap_create(WSP_CAPS_PUSH_MOR, NULL, data);
-		list_append(caps, cap);
+		gwlist_append(caps, cap);
 	}
 
 	/* Supporting extended methods is up to the application layer,
@@ -910,12 +910,12 @@
 	long i, len;
 	Capability *cap;
 
-	len = list_len(req);
+	len = gwlist_len(req);
 	for (i = 0; i < len; i++) {
-		cap = list_get(req, i);
+		cap = gwlist_get(req, i);
 		if (wsp_cap_count(caps, cap->id, cap->name) == 0) {
 			cap = wsp_cap_create(cap->id, cap->name, NULL);
-			list_append(caps, cap);
+			gwlist_append(caps, cap);
 		}
 	}
 }
@@ -959,12 +959,12 @@
 	/* Hmm, this is an O(N*N) operation, which may be bad. */
 
 	i = 0;
-	while (i < list_len(caps)) {
-		cap = list_get(caps, i);
+	while (i < gwlist_len(caps)) {
+		cap = gwlist_get(caps, i);
 
 		count = wsp_cap_count(req, cap->id, cap->name);
 		if (count == 0 && is_default_cap(cap)) {
-			list_delete(caps, i, 1);
+			gwlist_delete(caps, i, 1);
 			wsp_cap_destroy(cap);
 		} else {
 			i++;
@@ -1168,12 +1168,12 @@
 }
 
 static WSPMethodMachine *find_method_machine(WSPMachine *sm, long id) {
-	return list_search(sm->methodmachines, &id, find_by_method_id);
+	return gwlist_search(sm->methodmachines, &id, find_by_method_id);
 }
 
 static WSPPushMachine *find_push_machine(WSPMachine *m, long id)
 {
-       return list_search(m->pushmachines, &id, find_by_push_id);
+       return gwlist_search(m->pushmachines, &id, find_by_push_id);
 }
 
 static int same_client(void *a, void *b) {
@@ -1191,19 +1191,19 @@
 	WSPMachine *sm2;
 	long i;
 
-	old_sessions = list_search_all(session_machines, sm, same_client);
+	old_sessions = gwlist_search_all(session_machines, sm, same_client);
 	if (old_sessions == NULL)
 		return;
 
-	for (i = 0; i < list_len(old_sessions); i++) {
-		sm2 = list_get(old_sessions, i);
+	for (i = 0; i < gwlist_len(old_sessions); i++) {
+		sm2 = gwlist_get(old_sessions, i);
 		if (sm2 != sm) {
 			disconnect = wap_event_create(Disconnect_Event);
 			handle_session_event(sm2, disconnect, NULL);
 		}
 	}
 
-	list_destroy(old_sessions, NULL);
+	gwlist_destroy(old_sessions, NULL);
 }
 
 
@@ -1374,7 +1374,7 @@
 	List *holding;
 	long i, len;
 
-	holding = list_search_all(sm->methodmachines, NULL, method_is_holding);
+	holding = gwlist_search_all(sm->methodmachines, NULL, method_is_holding);
 	if (holding == NULL)
 		return;
 
@@ -1382,12 +1382,12 @@
 	 * destroy its event */
 	release = wap_event_create(Release_Event);
 
-	len = list_len(holding);
+	len = gwlist_len(holding);
 	for (i = 0; i < len; i++) {
-		msm = list_get(holding, i);
+		msm = gwlist_get(holding, i);
 		handle_method_event(sm, msm, release, NULL);
 	}
-	list_destroy(holding, NULL);
+	gwlist_destroy(holding, NULL);
 	wap_event_destroy(release);
 }
 
@@ -1402,9 +1402,9 @@
 
 	/* This loop goes backward because it has to deal with the
 	 * possibility of method machines disappearing after their event. */
-	len = list_len(sm->methodmachines);
+	len = gwlist_len(sm->methodmachines);
 	for (i = len - 1; i >= 0; i--) {
-		msm = list_get(sm->methodmachines, i);
+		msm = gwlist_get(sm->methodmachines, i);
 		handle_method_event(sm, msm, ab, NULL);
 	}
 
@@ -1421,9 +1421,9 @@
         ab = wap_event_create(Abort_Event);
 	ab->u.Abort_Event.reason = reason;
 
-        len = list_len(sm->pushmachines);
+        len = gwlist_len(sm->pushmachines);
 	for (i = len - 1; i >= 0; i--) {
-		psm = list_get(sm->pushmachines, i);
+		psm = gwlist_get(sm->pushmachines, i);
 		handle_push_event(sm, psm, ab);
 	}
 
@@ -1433,7 +1433,7 @@
 
 WSPMachine *find_session_machine_by_id (int id) {
 
-	return list_search(session_machines, &id, id_belongs_to_session);
+	return gwlist_search(session_machines, &id, id_belongs_to_session);
 }
 
 
diff -ur kannel-1.4.0/wap/wsp_unit.c kannel-1.4.0.mod/wap/wsp_unit.c
--- kannel-1.4.0/wap/wsp_unit.c	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/wap/wsp_unit.c	2006-03-24 16:50:55.000000000 +0100
@@ -101,8 +101,8 @@
 
 void wsp_unit_init(wap_dispatch_func_t *datagram_dispatch,
                    wap_dispatch_func_t *application_dispatch) {
-	queue = list_create();
-	list_add_producer(queue);
+	queue = gwlist_create();
+	gwlist_add_producer(queue);
 	dispatch_to_wdp = datagram_dispatch;
 	dispatch_to_appl = application_dispatch;
         wsp_strings_init();
@@ -114,16 +114,16 @@
 void wsp_unit_shutdown(void) {
 	gw_assert(run_status == running);
 	run_status = terminating;
-	list_remove_producer(queue);
+	gwlist_remove_producer(queue);
 	gwthread_join_every(main_thread);
-	list_destroy(queue, wap_event_destroy_item);
+	gwlist_destroy(queue, wap_event_destroy_item);
         wsp_strings_shutdown();
 }
 
 
 void wsp_unit_dispatch_event(WAPEvent *event) {
 	wap_event_assert(event);
-	list_produce(queue, event);
+	gwlist_produce(queue, event);
 }
 
 
@@ -217,7 +217,7 @@
     WAPEvent *e;
     WAPEvent *newevent;
 	
-    while (run_status == running && (e = list_consume(queue)) != NULL) {
+    while (run_status == running && (e = gwlist_consume(queue)) != NULL) {
         debug("wap.wsp.unit", 0, "WSP (UNIT): event arrived");
         wap_event_assert(e);
         switch (e->type) {
diff -ur kannel-1.4.0/wap/wtls-secmgr.c kannel-1.4.0.mod/wap/wtls-secmgr.c
--- kannel-1.4.0/wap/wtls-secmgr.c	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/wap/wtls-secmgr.c	2006-03-24 16:50:55.000000000 +0100
@@ -110,8 +110,8 @@
 
 void wtls_secmgr_init(void) {
         gw_assert(run_status == limbo);
-        secmgr_queue = list_create();
-        list_add_producer(secmgr_queue);
+        secmgr_queue = gwlist_create();
+        gwlist_add_producer(secmgr_queue);
         run_status = running;
         gwthread_create(main_thread, NULL);
 }
@@ -119,24 +119,24 @@
 
 void wtls_secmgr_shutdown(void) {
         gw_assert(run_status == running);
-        list_remove_producer(secmgr_queue);
+        gwlist_remove_producer(secmgr_queue);
         run_status = terminating;
         
         gwthread_join_every(main_thread);
         
-        list_destroy(secmgr_queue, wap_event_destroy_item);
+        gwlist_destroy(secmgr_queue, wap_event_destroy_item);
 }
 
 
 void wtls_secmgr_dispatch(WAPEvent *event) {
         gw_assert(run_status == running);
-        list_produce(secmgr_queue, event);
+        gwlist_produce(secmgr_queue, event);
 }
 
 
 long wtls_secmgr_get_load(void) {
         gw_assert(run_status == running);
-        return list_len(secmgr_queue);
+        return gwlist_len(secmgr_queue);
 }
 
 
@@ -148,7 +148,7 @@
 static void main_thread(void *arg) {
         WAPEvent *ind, *res, *req, *term;
         
-        while (run_status == running && (ind = list_consume(secmgr_queue)) != NULL) {
+        while (run_status == running && (ind = gwlist_consume(secmgr_queue)) != NULL) {
                 switch (ind->type) {
                 case SEC_Create_Ind:
                         /* Process the cipherlist */
diff -ur kannel-1.4.0/wap/wtls.c kannel-1.4.0.mod/wap/wtls.c
--- kannel-1.4.0/wap/wtls.c	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/wap/wtls.c	2006-03-24 16:50:55.000000000 +0100
@@ -194,11 +194,11 @@
 
 void wtls_init(void) {
         /* Initialise our various lists and counters */
-        wtls_machines = list_create();
+        wtls_machines = gwlist_create();
         wtls_machine_id_counter = counter_create();
         
-        wtls_queue = list_create();
-        list_add_producer(wtls_queue);
+        wtls_queue = gwlist_create();
+        gwlist_add_producer(wtls_queue);
 
         /* Idiot check - ensure that we are able to start running */
         gw_assert(wtls_run_status == limbo);
@@ -211,22 +211,22 @@
            prepare for termination */
         gw_assert(wtls_run_status == running);
         wtls_run_status = terminating;
-        list_remove_producer(wtls_queue);
+        gwlist_remove_producer(wtls_queue);
         gwthread_join_every(main_thread);
 
         /* Print out a friendly message stating that we're going to die */
         debug("wap.wtls", 0, "wtls_shutdown: %ld wtls machines left",
-              list_len(wtls_machines));
+              gwlist_len(wtls_machines));
 
         /* And clean up nicely after ourselves */
-        list_destroy(wtls_machines, wtls_machine_destroy);
-        list_destroy(wtls_queue, wap_event_destroy_item);     
+        gwlist_destroy(wtls_machines, wtls_machine_destroy);
+        gwlist_destroy(wtls_queue, wap_event_destroy_item);     
         counter_destroy(wtls_machine_id_counter);
 }
 
 void wtls_dispatch_event(WAPEvent *event) {
         /* Stick the event on the incoming events queue */
-        list_produce(wtls_queue, event);
+        gwlist_produce(wtls_queue, event);
 }
 
 int wtls_get_address_tuple(long mid, WAPAddrTuple **tuple) {
@@ -351,7 +351,7 @@
 	WAPEvent *e;
         
 	while (wtls_run_status == running && 
-               (e = list_consume(wtls_queue)) != NULL) {
+               (e = gwlist_consume(wtls_queue)) != NULL) {
 		sm = wtls_machine_find_or_create(e);
 		if (sm == NULL)
 			wap_event_destroy(e);
@@ -528,7 +528,7 @@
 	pat.tuple = tuple;
 	pat.mid = mid;
 	
-	m = list_search(wtls_machines, &pat, is_wanted_wtls_machine);
+	m = gwlist_search(wtls_machines, &pat, is_wanted_wtls_machine);
 	return m;
 }
 
@@ -546,7 +546,7 @@
         #define PDULIST(name) wtls_machine->name = NULL;
         #include "wtls_machine-decl.h"
         
-        list_append(wtls_machines, wtls_machine);
+        gwlist_append(wtls_machines, wtls_machine);
         wtls_machine->mid = counter_increase(wtls_machine_id_counter);
         wtls_machine->addr_tuple = wap_addr_tuple_duplicate(tuple);
 
@@ -567,7 +567,7 @@
        wtls_machine = p;
        debug("wap.wtls", 0, "WTLS: Destroying WTLSMachine %p (%ld)",
              (void *) wtls_machine, wtls_machine->mid);
-       list_delete_equal(wtls_machines, wtls_machine);        
+       gwlist_delete_equal(wtls_machines, wtls_machine);        
         
        #define MACHINE(field) field
        #define ENUM(name) wtls_machine->name = NULL_STATE;
@@ -637,7 +637,7 @@
 }
 
 static WTLSMachine *find_wtls_machine_using_mid(long mid) {
-       return list_search(wtls_machines, &mid, wtls_machine_has_mid);
+       return gwlist_search(wtls_machines, &mid, wtls_machine_has_mid);
 }
 
 /* Used for list searches */
diff -ur kannel-1.4.0/wap/wtls_pdu.c kannel-1.4.0.mod/wap/wtls_pdu.c
--- kannel-1.4.0/wap/wtls_pdu.c	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/wap/wtls_pdu.c	2006-03-24 16:50:55.000000000 +0100
@@ -219,9 +219,9 @@
         returnData = octstr_create("");
         
         /* While there are PDUs remaining in our list */
-        while (list_len(payloadlist) > 0) {                
+        while (gwlist_len(payloadlist) > 0) {                
                 /* Retrieve the next payload from the payloadlist */
-                retrievedPDU = (wtls_Payload*) list_extract_first (payloadlist);
+                retrievedPDU = (wtls_Payload*) gwlist_extract_first (payloadlist);
 
                 /* Pack the PDU */
                 tempData2 = wtls_payload_pack(retrievedPDU);
@@ -263,7 +263,7 @@
         gw_assert(data != NULL);
         
         /* Initialise our list */
-        payloadlist = list_create();
+        payloadlist = gwlist_create();
         dataLength = octstr_len(data);
         
         /* While offset is less than the size of the data */
@@ -276,14 +276,14 @@
                 /* If the packet returned is not NULL */
                 if (tempPayload != NULL) {
                         /* Add the returned packet to the current list of packets */
-                        list_append(payloadlist, (void*) tempPayload);
+                        gwlist_append(payloadlist, (void*) tempPayload);
                 }
         }
 
-        debug("wtls:wtls_unpack_payloadlist",0,"Finished, found %d PDUs", list_len(payloadlist));
+        debug("wtls:wtls_unpack_payloadlist",0,"Finished, found %d PDUs", gwlist_len(payloadlist));
         
         /* If the length of the list is greater than 0 */
-        if (list_len(payloadlist) > 0) {
+        if (gwlist_len(payloadlist) > 0) {
                 /* Return the List */
                 return payloadlist;
         }
@@ -464,9 +464,9 @@
 		wtls_Payload* currentPayload;
 		int listLen, i;
 		
-		listLen = list_len(payloadList);
+		listLen = gwlist_len(payloadList);
 		for( i=0; i<listLen; i++) {
-			currentPayload = (wtls_Payload *)list_get(payloadList, i);
+			currentPayload = (wtls_Payload *)gwlist_get(payloadList, i);
 			wtls_payload_destroy(currentPayload);
 		}
 		
diff -ur kannel-1.4.0/wap/wtls_pdusupport.c kannel-1.4.0.mod/wap/wtls_pdusupport.c
--- kannel-1.4.0/wap/wtls_pdusupport.c	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/wap/wtls_pdusupport.c	2006-03-24 16:50:55.000000000 +0100
@@ -256,9 +256,9 @@
 	buffer = octstr_create("");
 	
 	/* pack each entry in the buffer */
-	for (i=0; i<list_len(array); i++)
+	for (i=0; i<gwlist_len(array); i++)
 	{
-		pos = pack_octstr(buffer, pos, (Octstr *) list_get(array, i));
+		pos = pack_octstr(buffer, pos, (Octstr *) gwlist_get(array, i));
 	}
 	
 	/* now we know the size of the list */
@@ -281,8 +281,8 @@
 	buffer = octstr_create("");
 	
 	/* pack the KeyExchangeIds */
-	for (i=0; i<list_len(key_list); i++) {
-		keyexid = (KeyExchangeId *) list_get(key_list, i);
+	for (i=0; i<gwlist_len(key_list); i++) {
+		keyexid = (KeyExchangeId *) gwlist_get(key_list, i);
 		
 		pos = pack_key_exchange_id(buffer, pos, keyexid);
 	}
@@ -302,12 +302,12 @@
 	
 	/* vector starts with its length 
 	   Each element uses 2 bytes */
-	octstr_set_char(data, charpos, list_len(ciphersuites)*2);
+	octstr_set_char(data, charpos, gwlist_len(ciphersuites)*2);
 	charpos += 1;
 	
 	/* pack the CipherSuites */
-	for (i=0; i<list_len(ciphersuites); i++) {
-		cs = (CipherSuite *) list_get(ciphersuites, i);
+	for (i=0; i<gwlist_len(ciphersuites); i++) {
+		cs = (CipherSuite *) gwlist_get(ciphersuites, i);
 		octstr_set_char(data, charpos, cs->bulk_cipher_algo);
 		charpos += 1;
 		octstr_set_char(data, charpos, cs->mac_algo);
@@ -321,13 +321,13 @@
 	int i;
 	
 	/* vector starts with its length */
-	octstr_set_char(data, charpos, list_len(compmethod_list));
+	octstr_set_char(data, charpos, gwlist_len(compmethod_list));
 	charpos += 1;
 	
 	/* pack the CompressionMethods */
-	for (i=0; i<list_len(compmethod_list); i++) {
+	for (i=0; i<gwlist_len(compmethod_list); i++) {
 		octstr_set_char(data, charpos, 
-				(CompressionMethod) list_get(compmethod_list, i));
+				(CompressionMethod) gwlist_get(compmethod_list, i));
 		charpos += 1;
 	}
 		
@@ -643,7 +643,7 @@
 	List *array;
 	
 	/* create the list */
-	array = list_create();
+	array = gwlist_create();
 	
 	/* get the size of the array */
 	array_length = octstr_get_char(data, *charpos);
@@ -651,7 +651,7 @@
 	
 	/* store each entry in the list */
 	for (i=0; i<array_length; i++) 	{
-		list_append(array, (void *)unpack_octstr(data, charpos));
+		gwlist_append(array, (void *)unpack_octstr(data, charpos));
 	}
 	
 	return array;
@@ -660,21 +660,21 @@
 List * unpack_key_list(Octstr *data, long *charpos) {
 	KeyExchangeId *keyexid;
 	List *key_list;
-	int list_length;
+	int gwlist_length;
 	long endpos;
 	
 	/* create the list */
-	key_list = list_create();
+	key_list = gwlist_create();
 	
 	/* get the size of the array */
-	list_length = unpack_int16(data, charpos);
-	endpos = *charpos + list_length;
+	gwlist_length = unpack_int16(data, charpos);
+	endpos = *charpos + gwlist_length;
 	
 	/* unpack the KeyExchangeIds */
 	while (*charpos < endpos)
 	{
 		keyexid = unpack_key_exchange_id(data, charpos);
-		list_append(key_list, (void *)keyexid);
+		gwlist_append(key_list, (void *)keyexid);
 	}
 	return key_list;
 }
@@ -682,26 +682,26 @@
 List * unpack_ciphersuite_list(Octstr *data, long *charpos)
 {
 	List *ciphersuites;
-	int list_length;
+	int gwlist_length;
 	int i;
 	CipherSuite *cs;
 	
 	/* create the list */
-	ciphersuites = list_create();
+	ciphersuites = gwlist_create();
 	
 	/* get the size of the array (in bytes, not elements)*/
-	list_length = octstr_get_char(data, *charpos);
+	gwlist_length = octstr_get_char(data, *charpos);
 	*charpos += 1;
 	
 	/* unpack the CipherSuites */
-	for (i=0; i<list_length; i+=2)
+	for (i=0; i<gwlist_length; i+=2)
 	{
 		cs = (CipherSuite *)gw_malloc(sizeof(CipherSuite));
 		cs->bulk_cipher_algo = octstr_get_char(data, *charpos);
 		*charpos += 1;
 		cs->mac_algo = octstr_get_char(data, *charpos);
 		*charpos += 1;
-		list_append(ciphersuites, (void *)cs);
+		gwlist_append(ciphersuites, (void *)cs);
 	}
 		
 	return ciphersuites;
@@ -709,23 +709,23 @@
 
 List * unpack_compression_method_list(Octstr *data, long *charpos) {
 	List *compmethod_list;
-	int list_length;
+	int gwlist_length;
 	int i;
 	CompressionMethod *cm;
 	
 	/* create the list */
-	compmethod_list = list_create();
+	compmethod_list = gwlist_create();
 	
 	/* get the size of the array */
-	list_length = octstr_get_char(data, *charpos);
+	gwlist_length = octstr_get_char(data, *charpos);
 	*charpos += 1;
 	
 	/* unpack the CompressionMethods */
-	for (i=0; i<list_length; i++)
+	for (i=0; i<gwlist_length; i++)
 	{
 		cm = gw_malloc(sizeof(CompressionMethod));
 		*cm = octstr_get_char(data, *charpos);
-		list_append(compmethod_list, (void *)cm);
+		gwlist_append(compmethod_list, (void *)cm);
 	}
 		
 	return compmethod_list;
@@ -940,21 +940,21 @@
 	int i;
 	
 	/* pack each entry in the array */
-	for (i=0; i<list_len(array); i++)
+	for (i=0; i<gwlist_len(array); i++)
 	{
-		octstr_destroy((Octstr *) list_get(array, i));
+		octstr_destroy((Octstr *) gwlist_get(array, i));
 	}
 	
-	list_destroy(array, NULL);
+	gwlist_destroy(array, NULL);
 }
 
 void destroy_key_list(List *key_list) {
 	int i;
 	/* destroy the KeyExchangeIds */
-	for (i=0; i<list_len(key_list); i++) {
-		destroy_key_exchange_id((KeyExchangeId *) list_get(key_list, i));
+	for (i=0; i<gwlist_len(key_list); i++) {
+		destroy_key_exchange_id((KeyExchangeId *) gwlist_get(key_list, i));
 	}
-	list_destroy(key_list, NULL);
+	gwlist_destroy(key_list, NULL);
 }
 
 void destroy_ciphersuite_list(List *ciphersuites) {
@@ -962,11 +962,11 @@
 	CipherSuite *cs;
 	
 	/* destroy the CipherSuites */
-	for (i=0; i<list_len(ciphersuites); i++) {
-		gw_free( (CipherSuite *) list_get(ciphersuites, i) );
+	for (i=0; i<gwlist_len(ciphersuites); i++) {
+		gw_free( (CipherSuite *) gwlist_get(ciphersuites, i) );
 	}
 		
-	list_destroy(ciphersuites, NULL);
+	gwlist_destroy(ciphersuites, NULL);
 }
 
 void destroy_compression_method_list(List *compmethod_list) {
@@ -974,8 +974,8 @@
 	CompressionMethod *cm;
 	
 	/* destroy the CompressionMethods */
-	for (i=0; i<list_len(compmethod_list); i++) {
-		cm = (CompressionMethod*) list_get(compmethod_list, i);
+	for (i=0; i<gwlist_len(compmethod_list); i++) {
+		cm = (CompressionMethod*) gwlist_get(compmethod_list, i);
 		gw_free(cm);
 	}
 		
@@ -1196,10 +1196,10 @@
 	/*debug(dbg, 0, "%*sOctstr Array: %p", level, "");*/
 	
 	/* dump each entry in the array */
-	for (i=0; i<list_len(array); i++)
+	for (i=0; i<gwlist_len(array); i++)
 	{
 		debug(dbg, 0, "%*sElement %d", level, "", i);
-		dump_octstr(dbg, level+1, (Octstr *) list_get(array, i));
+		dump_octstr(dbg, level+1, (Octstr *) gwlist_get(array, i));
 	}
 }
 
@@ -1212,8 +1212,8 @@
 	debug(dbg, 0, "%*sKey List: %p", level, "");
 	
 	/* pack the KeyExchangeIds */
-	for (i=0; i<list_len(key_list); i++) {
-		keyexid = (KeyExchangeId *) list_get(key_list, i);
+	for (i=0; i<gwlist_len(key_list); i++) {
+		keyexid = (KeyExchangeId *) gwlist_get(key_list, i);
 		
 		dump_key_exchange_id(dbg, level+1, keyexid);
 	}
@@ -1226,8 +1226,8 @@
 	debug(dbg, 0, "%*sCipherSuite List: %p", level, "");
 	
 	/* dump the CipherSuites */
-	for (i=0; i<list_len(ciphersuites); i++) {
-		cs = (CipherSuite *) list_get(ciphersuites, i);
+	for (i=0; i<gwlist_len(ciphersuites); i++) {
+		cs = (CipherSuite *) gwlist_get(ciphersuites, i);
 		debug(dbg, 0, "%*sBulk Cipher Algo: %p", level, "", cs->bulk_cipher_algo);
 		debug(dbg, 0, "%*sMAC Algo: %p", level, "", cs->mac_algo);
 	}
@@ -1238,9 +1238,9 @@
 	
 	debug(dbg, 0, "%*sCompression Method List: %p", level, "");
 	/* pack the CompressionMethods */
-	for (i=0; i<list_len(compmethod_list); i++) {
+	for (i=0; i<gwlist_len(compmethod_list); i++) {
 		debug(dbg, 0, "%*sMethod %d: %p", level, "", i, 
-				(CompressionMethod) list_get(compmethod_list, i));
+				(CompressionMethod) gwlist_get(compmethod_list, i));
 	}
 }
 
diff -ur kannel-1.4.0/wap/wtls_state-decl.h kannel-1.4.0.mod/wap/wtls_state-decl.h
--- kannel-1.4.0/wap/wtls_state-decl.h	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/wap/wtls_state-decl.h	2006-03-24 16:50:55.000000000 +0100
@@ -84,7 +84,7 @@
         CipherSuite* ciphersuite;
         int randomCounter;
             
-        tempPayload = (wtls_Payload*) list_search (event->u.T_Unitdata_Ind.pdu_list,
+        tempPayload = (wtls_Payload*) gwlist_search (event->u.T_Unitdata_Ind.pdu_list,
                                                    (void*) client_hello,
                                                    match_handshake_type);
 
@@ -345,7 +345,7 @@
             Octstr* labelMaster=0;
             
             /* Process the incoming event : ClientKeyExchange*/            
-            tempPayload = (wtls_Payload*) list_search (event->u.T_Unitdata_Ind.pdu_list,
+            tempPayload = (wtls_Payload*) gwlist_search (event->u.T_Unitdata_Ind.pdu_list,
                                                       (void*) client_key_exchange,
                                                       match_handshake_type);
 
@@ -382,7 +382,7 @@
 			calculate_client_key_block(wtls_machine);
                         
             /* Process the incoming event : ChangeCipherSpec*/            
-            tempPayload = (wtls_Payload*) list_search (event->u.T_Unitdata_Ind.pdu_list,
+            tempPayload = (wtls_Payload*) gwlist_search (event->u.T_Unitdata_Ind.pdu_list,
                                                       (void*) ChangeCipher_PDU,
                                                       match_pdu_type);
 
@@ -398,7 +398,7 @@
             wtls_pdu_dump(changeCipherSpec_incoming_PDU,0);
 
             /* Process the incoming event : Finished*/            
-            tempPayload = (wtls_Payload*) list_search (event->u.T_Unitdata_Ind.pdu_list,
+            tempPayload = (wtls_Payload*) gwlist_search (event->u.T_Unitdata_Ind.pdu_list,
                                                       (void*) finished,
                                                       match_handshake_type);
             if(tempPayload == NULL)
@@ -632,7 +632,7 @@
             wtls_Payload* tempPayload;
             wtls_PDU* ApplicationPDU;
 			
-            tempPayload = (wtls_Payload*) list_search (event->u.T_Unitdata_Ind.pdu_list,
+            tempPayload = (wtls_Payload*) gwlist_search (event->u.T_Unitdata_Ind.pdu_list,
                                                       (void*) Application_PDU,
                                                       match_pdu_type);
 
diff -ur kannel-1.4.0/wap/wtls_statesupport.c kannel-1.4.0.mod/wap/wtls_statesupport.c
--- kannel-1.4.0/wap/wtls_statesupport.c	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/wap/wtls_statesupport.c	2006-03-24 16:50:55.000000000 +0100
@@ -485,9 +485,9 @@
     Octstr* decryptedData = NULL;
 	wtls_Payload *payload;
 	
-	listlen = list_len(pdu_list);
+	listlen = gwlist_len(pdu_list);
 	for( i=0; i<listlen; i++) {
-		payload = (wtls_Payload *)list_get(pdu_list, i);
+		payload = (wtls_Payload *)gwlist_get(pdu_list, i);
 		
 		if(payload->cipher) {
 			debug("wtls", 0, "Decrypting PDU %d", i);
@@ -616,14 +616,14 @@
 		int i = 0;
         int listLen;
 		
-		listLen = list_len(ciphersuites);
+		listLen = gwlist_len(ciphersuites);
 		
         //returnSuite = gw_malloc(sizeof(CipherSuite));
 
 		/* the first CS in the list */
 		do {
 			/* the next CS in the list */
-			currentCS = list_get(ciphersuites, i);
+			currentCS = gwlist_get(ciphersuites, i);
 			/* Check if we support this BulkCipher */
 			if(currentCS->bulk_cipher_algo >= RC5_CBC_40 &&
 			   currentCS->bulk_cipher_algo <= IDEA_CBC) {
@@ -662,11 +662,11 @@
 		int i = 0;
 		int listLen;
 		
-		listLen = list_len(clientKeyIds);
+		listLen = gwlist_len(clientKeyIds);
 		debug("wtls", 0, "listLen = %d", listLen);
 		
 		do {
-			currentKeyId = list_get(clientKeyIds, i);
+			currentKeyId = gwlist_get(clientKeyIds, i);
 			debug("wtls", 0, "Key %d", i);
 			dump_key_exchange_id("wtls", 0, currentKeyId);
 			
@@ -775,10 +775,10 @@
 
 	gw_assert(pdu_list != NULL);
 	
-	listlen = list_len(pdu_list);
+	listlen = gwlist_len(pdu_list);
 	debug("wtls", 0,"adding handshake data from %d PDU(s)", listlen);
 	for(i=0; i<listlen; i++) {
-		payload = (wtls_Payload *)list_get(pdu_list, i);
+		payload = (wtls_Payload *)gwlist_get(pdu_list, i);
 		if(payload->type == Handshake_PDU) {
             octstr_insert(wtls_machine->handshake_data, payload->data,
                           octstr_len(wtls_machine->handshake_data));
diff -ur kannel-1.4.0/wap/wtp.c kannel-1.4.0.mod/wap/wtp.c
--- kannel-1.4.0/wap/wtp.c	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/wap/wtp.c	2006-03-24 16:50:55.000000000 +0100
@@ -105,7 +105,7 @@
 
      gw_assert(datagram->type == T_DUnitdata_Ind);
 
-     events = list_create();
+     events = gwlist_create();
         
      if (concatenated_message(datagram->u.T_DUnitdata_Ind.user_data)) {
          data = octstr_duplicate(datagram->u.T_DUnitdata_Ind.user_data);
@@ -129,7 +129,7 @@
              wap_event_assert(subdgram);
              event = unpack_wdp_datagram_real(subdgram);
              wap_event_assert(event);
-             list_append(events, event);
+             gwlist_append(events, event);
              octstr_delete(data, 0, pdu_len);
              wap_event_destroy(subdgram);
          }
@@ -139,7 +139,7 @@
      } else {
           event = unpack_wdp_datagram_real(datagram); 
           wap_event_assert(event);
-          list_append(events, event);
+          gwlist_append(events, event);
      } 
 
      return events;
@@ -272,10 +272,10 @@
 
     /* Set default to 0 because Ack on 1 piece message has no tpi */
     event->u.RcvAck.psn = 0;
-    num_tpis = list_len(pdu->options);
+    num_tpis = gwlist_len(pdu->options);
 
     for (i = 0; i < num_tpis; i++) {
-        tpi = list_get(pdu->options, i);
+        tpi = gwlist_get(pdu->options, i);
         if (tpi->type == TPI_PSN) {
             event->u.RcvAck.psn = octstr_get_bits(tpi->data,0,8);
             break;
diff -ur kannel-1.4.0/wap/wtp_init.c kannel-1.4.0.mod/wap/wtp_init.c
--- kannel-1.4.0/wap/wtp_init.c	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/wap/wtp_init.c	2006-03-24 16:50:55.000000000 +0100
@@ -168,11 +168,11 @@
 void wtp_initiator_init(wap_dispatch_func_t *datagram_dispatch,
 			wap_dispatch_func_t *session_dispatch, long timer_freq) 
 {
-    init_machines = list_create();
+    init_machines = gwlist_create();
     init_machine_id_counter = counter_create();
      
-    queue = list_create();
-    list_add_producer(queue);
+    queue = gwlist_create();
+    gwlist_add_producer(queue);
 
     dispatch_to_wdp = datagram_dispatch;
     dispatch_to_wsp = session_dispatch;
@@ -189,13 +189,13 @@
 {
     gw_assert(initiator_run_status == running);
     initiator_run_status = terminating;
-    list_remove_producer(queue);
+    gwlist_remove_producer(queue);
     gwthread_join_every(main_thread);
 
     debug("wap.wtp", 0, "wtp_initiator_shutdown: %ld init_machines left",
-     	  list_len(init_machines));
-    list_destroy(init_machines, init_machine_destroy);
-    list_destroy(queue, wap_event_destroy_item);
+     	  gwlist_len(init_machines));
+    gwlist_destroy(init_machines, init_machine_destroy);
+    gwlist_destroy(queue, wap_event_destroy_item);
 
     counter_destroy(init_machine_id_counter);
     timers_shutdown();
@@ -203,7 +203,7 @@
 
 void wtp_initiator_dispatch_event(WAPEvent *event) 
 {
-    list_produce(queue, event);
+    gwlist_produce(queue, event);
 }
 
 /**************************************************************************
@@ -217,7 +217,7 @@
     WAPEvent *e;
 
     while (initiator_run_status == running && 
-          (e = list_consume(queue)) != NULL) {
+          (e = gwlist_consume(queue)) != NULL) {
         sm = init_machine_find_or_create(e);
 	if (sm == NULL)
 	    wap_event_destroy(e);
@@ -241,7 +241,7 @@
      #define MACHINE(field) field
      #include "wtp_init_machine.def"
 
-     list_append(init_machines, init_machine);
+     gwlist_append(init_machines, init_machine);
 
      init_machine->mid = counter_increase(init_machine_id_counter);
      init_machine->addr_tuple = wap_addr_tuple_duplicate(tuple);
@@ -266,7 +266,7 @@
      debug("wap.wtp", 0, "WTP: Destroying WTPInitMachine %p (%ld)", 
 	    (void *) init_machine, init_machine->mid);
 	
-     list_delete_equal(init_machines, init_machine);
+     gwlist_delete_equal(init_machines, init_machine);
         
      #define ENUM(name) init_machine->name = INITIATOR_NULL_STATE;
      #define INTEGER(name) init_machine->name = 0; 
@@ -364,7 +364,7 @@
     pat.tid = tid;
     pat.mid = mid;
 	
-    m = list_search(init_machines, &pat, is_wanted_init_machine);
+    m = gwlist_search(init_machines, &pat, is_wanted_init_machine);
     return m;
 }
 
diff -ur kannel-1.4.0/wap/wtp_pdu.c kannel-1.4.0.mod/wap/wtp_pdu.c
--- kannel-1.4.0/wap/wtp_pdu.c	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/wap/wtp_pdu.c	2006-03-24 16:50:55.000000000 +0100
@@ -133,10 +133,10 @@
 	}
 
 	if (pdu->options) {
-		while (list_len(pdu->options)) {
-			wtp_tpi_destroy(list_consume(pdu->options));
+		while (gwlist_len(pdu->options)) {
+			wtp_tpi_destroy(gwlist_consume(pdu->options));
 		}
-		list_destroy(pdu->options, NULL);
+		gwlist_destroy(pdu->options, NULL);
 	}
 
 	gw_free(pdu);
@@ -157,8 +157,8 @@
 	tpi->type = type;
 	tpi->data = data;
 	if (pdu->options == NULL)
-		pdu->options = list_create();
-	list_append(pdu->options, tpi);
+		pdu->options = gwlist_create();
+	gwlist_append(pdu->options, tpi);
 }
 
 static long unpack_tpis(Octstr *data, long bitpos, WTP_PDU *pdu) {
@@ -194,9 +194,9 @@
 	int i;
 	int num_tpis;
 
-	num_tpis = list_len(tpis);
+	num_tpis = gwlist_len(tpis);
 	for (i = 0; i < num_tpis; i++) {
-		tpi = list_get(tpis, i);
+		tpi = gwlist_get(tpis, i);
 		length = octstr_len(tpi->data);
 		octstr_set_bits(data, bitpos, 1, i + 1 < num_tpis);
 		octstr_set_bits(data, bitpos + 1, 4, tpi->type);
@@ -227,9 +227,9 @@
 	if (tpis == NULL)
 		return;
 
-	num_tpis = list_len(tpis);
+	num_tpis = gwlist_len(tpis);
 	for (i = 0; i < num_tpis; i++) {
-		tpi = list_get(tpis, i);
+		tpi = gwlist_get(tpis, i);
 		debug("wap.wtp", 0, "%*s TPI type %u:", level, "", tpi->type);
 		octstr_dump(tpi->data, level + 1);
 	}
@@ -336,7 +336,7 @@
 #define RESERVED(bits) bitpos += (bits);
 #define TPI(confield) \
 	if (p->confield) { \
-		pdu->options = list_create(); \
+		pdu->options = gwlist_create(); \
 		bitpos = unpack_tpis(data, bitpos, pdu); \
 	}
 #include "wtp_pdu.def"
@@ -372,7 +372,7 @@
 #define TYPE(bits, value)
 #define RESERVED(bits)
 #define TPI(confield) \
-	p->confield = pdu->options != NULL && list_len(pdu->options) > 0;
+	p->confield = pdu->options != NULL && gwlist_len(pdu->options) > 0;
 #include "wtp_pdu.def"
 #undef TPI
 #undef RESERVED
diff -ur kannel-1.4.0/wap/wtp_resp.c kannel-1.4.0.mod/wap/wtp_resp.c
--- kannel-1.4.0/wap/wtp_resp.c	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/wap/wtp_resp.c	2006-03-24 16:50:55.000000000 +0100
@@ -213,11 +213,11 @@
                    wap_dispatch_func_t *push_dispatch, 
                    long timer_freq) 
 {
-    resp_machines = list_create();
+    resp_machines = gwlist_create();
     resp_machine_id_counter = counter_create();
 
-    resp_queue = list_create();
-    list_add_producer(resp_queue);
+    resp_queue = gwlist_create();
+    gwlist_add_producer(resp_queue);
 
     dispatch_to_wdp = datagram_dispatch;
     dispatch_to_wsp = session_dispatch;
@@ -236,13 +236,13 @@
 {
     gw_assert(resp_run_status == running);
     resp_run_status = terminating;
-    list_remove_producer(resp_queue);
+    gwlist_remove_producer(resp_queue);
     gwthread_join_every(main_thread);
 
     debug("wap.wtp", 0, "wtp_resp_shutdown: %ld resp_machines left",
-     	  list_len(resp_machines));
-    list_destroy(resp_machines, resp_machine_destroy);
-    list_destroy(resp_queue, wap_event_destroy_item);
+     	  gwlist_len(resp_machines));
+    gwlist_destroy(resp_machines, resp_machine_destroy);
+    gwlist_destroy(resp_queue, wap_event_destroy_item);
 
     counter_destroy(resp_machine_id_counter);
 
@@ -252,7 +252,7 @@
 
 void wtp_resp_dispatch_event(WAPEvent *event) 
 {
-    list_produce(resp_queue, event);
+    gwlist_produce(resp_queue, event);
 }
 
 
@@ -268,7 +268,7 @@
     WAPEvent *e;
 
     while (resp_run_status == running && 
-           (e = list_consume(resp_queue)) != NULL) {
+           (e = gwlist_consume(resp_queue)) != NULL) {
 
         sm = resp_machine_find_or_create(e);
         if (sm == NULL) {
@@ -581,7 +581,7 @@
     pat.tid = tid;
     pat.mid = mid;
 	
-    m = list_search(resp_machines, &pat, is_wanted_resp_machine);
+    m = gwlist_search(resp_machines, &pat, is_wanted_resp_machine);
     return m;
 }
 
@@ -603,7 +603,7 @@
     #define MACHINE(field) field
     #include "wtp_resp_machine.def"
 
-    list_append(resp_machines, resp_machine);
+    gwlist_append(resp_machines, resp_machine);
 
     resp_machine->mid = counter_increase(resp_machine_id_counter);
     resp_machine->addr_tuple = wap_addr_tuple_duplicate(tuple);
@@ -629,14 +629,14 @@
     debug("wap.wtp", 0, "WTP: Destroying WTPRespMachine %p (%ld)", 
 	  (void *) resp_machine, resp_machine->mid);
 	
-    list_delete_equal(resp_machines, resp_machine);
+    gwlist_delete_equal(resp_machines, resp_machine);
         
     #define ENUM(name) resp_machine->name = LISTEN;
     #define EVENT(name) wap_event_destroy(resp_machine->name);
     #define INTEGER(name) resp_machine->name = 0; 
     #define TIMER(name) gwtimer_destroy(resp_machine->name); 
     #define ADDRTUPLE(name) wap_addr_tuple_destroy(resp_machine->name); 
-    #define LIST(name) list_destroy(resp_machine->name,sar_info_destroy);
+    #define LIST(name) gwlist_destroy(resp_machine->name,sar_info_destroy);
     #define SARDATA(name) sardata_destroy(resp_machine->name);
     #define MACHINE(field) field
     #include "wtp_resp_machine.def"
@@ -835,14 +835,14 @@
     sar_info_t *sar_info;
 
     if (machine->sar_info == NULL) {
-        machine->sar_info = list_create();
+        machine->sar_info = gwlist_create();
     }
 
-    if (list_search(machine->sar_info, &psn, is_wanted_sar_data) == NULL) {
+    if (gwlist_search(machine->sar_info, &psn, is_wanted_sar_data) == NULL) {
         sar_info = gw_malloc(sizeof(sar_info_t));
         sar_info->sar_psn = psn;
         sar_info->sar_data = octstr_duplicate(data);
-        list_append(machine->sar_info, sar_info);
+        gwlist_append(machine->sar_info, sar_info);
         return 0;
     } else {
         debug("wap.wtp", 0, "Duplicated psn found, ignore packet");
@@ -859,7 +859,7 @@
     e = wap_event_duplicate(machine->sar_invoke);
 
     for (i = 1; i <= last_psn; i++) {
-        if ((sar_info = list_search(machine->sar_info, &i, is_wanted_sar_data)) != NULL) {
+        if ((sar_info = gwlist_search(machine->sar_info, &i, is_wanted_sar_data)) != NULL) {
             octstr_append(e->u.RcvInvoke.user_data,sar_info->sar_data);
         } else {
             debug("wap.wtp", 0, "Packet with psn %d not found", i);
diff -ur kannel-1.4.0/wap/wtp_tid.c kannel-1.4.0.mod/wap/wtp_tid.c
--- kannel-1.4.0/wap/wtp_tid.c	2004-01-22 15:08:25.000000000 +0100
+++ kannel-1.4.0.mod/wap/wtp_tid.c	2006-03-24 16:50:55.000000000 +0100
@@ -101,14 +101,14 @@
 
 void wtp_tid_cache_init(void) 
 {
-    tid_cache = list_create();
+    tid_cache = gwlist_create();
 }
 
 void wtp_tid_cache_shutdown(void) 
 {
     debug("wap.wtp_tid", 0, "%ld items left in the tid cache", 
-          list_len(tid_cache));
-    list_destroy(tid_cache, cache_item_destroy);
+          gwlist_len(tid_cache));
+    gwlist_destroy(tid_cache, cache_item_destroy);
 }
 
 /*
@@ -275,7 +275,7 @@
 {
     WTPCached_tid *item = NULL;
 
-    item = list_search(tid_cache, resp_machine->addr_tuple, tid_is_cached);
+    item = gwlist_search(tid_cache, resp_machine->addr_tuple, tid_is_cached);
 
     return item;
 }
@@ -292,7 +292,7 @@
     new_item->addr_tuple = wap_addr_tuple_duplicate(resp_machine->addr_tuple);
     new_item->tid = tid; 
 
-    list_append(tid_cache, new_item);
+    gwlist_append(tid_cache, new_item);
 }
 
 /*
@@ -300,7 +300,7 @@
  */
 static void set_tid_by_item(WTPCached_tid *item, long tid)
 {
-    list_lock(tid_cache);
+    gwlist_lock(tid_cache);
     item->tid = tid;
-    list_unlock(tid_cache);
+    gwlist_unlock(tid_cache);
 }
